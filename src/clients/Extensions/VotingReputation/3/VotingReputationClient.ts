/*
 * VotingReputation Client Version 3 autogenerated by
 * @colony/colony-js version v4.1.0-beta.5 from colonyNetwork tag 'dlwss'
 *
 * Feel free to modify as needed!
 */

/* eslint-disable @typescript-eslint/no-explicit-any */

import { ClientType } from '../../../../types';
import { VotingReputation__factory as VotingReputationFactory } from '../../../../contracts/VotingReputation/3/factories/VotingReputation__factory';
import { VotingReputation } from '../../../../contracts/VotingReputation/3/VotingReputation';
import { AugmentedIColony } from '../../../../clients/Core/augments/commonAugments';

import * as currentVersion from './VotingReputationClientAugments';
import * as version1 from '../1/VotingReputationClientAugments';
import * as version2 from '../2/VotingReputationClientAugments';

type VotingReputationEstimate = VotingReputation['estimateGas'];
interface AugmentedVotingReputationEstimate extends VotingReputationEstimate {
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

export interface VotingReputationClient extends VotingReputation {
  clientType: ClientType.VotingReputationClient;
  estimate: AugmentedVotingReputationEstimate;
  /*
   * @TODO These needs to be specifically determined once we can integrate
   * static code analysis into this lib
   */
  [key: string]: any;
}

const getVotingReputationClient = (
  address: string,
  colonyClient: AugmentedIColony,
): VotingReputationClient => {
  const votingReputationClient = VotingReputationFactory.connect(
    address,
    colonyClient.signer || colonyClient.provider,
  ) as VotingReputationClient;
  votingReputationClient.clientType = ClientType.VotingReputationClient;

  const addons = {
    ...version1.getVotingReputationClientAugments(
      votingReputationClient,
      colonyClient,
    ),
    ...version2.getVotingReputationClientAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...currentVersion.getVotingReputationClientAugments(
      votingReputationClient,
      colonyClient,
    ),
  };
  const addonsEstimate = {
    ...version1.getVotingReputationClientEstimateAugments(
      votingReputationClient,
      colonyClient,
    ),
    ...version2.getVotingReputationClientEstimateAddons(
      votingReputationClient,
      colonyClient,
    ),
    ...currentVersion.getVotingReputationClientEstimateAugments(
      votingReputationClient,
      colonyClient,
    ),
  };

  Object.keys(addons).map((addonName) => {
    votingReputationClient[addonName] = addons[addonName];
    return null;
  });

  Object.keys(addonsEstimate).map((addonName) => {
    votingReputationClient.estimate[addonName] = addonsEstimate[addonName];
    return null;
  });

  return votingReputationClient;
};

export default getVotingReputationClient;

/* eslint-enable */
