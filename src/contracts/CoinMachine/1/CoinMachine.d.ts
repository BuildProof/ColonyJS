/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface CoinMachineInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    getColony: TypedFunctionDescription<{ encode([]: []): string }>;

    getDeprecated: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    identifier: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    install: TypedFunctionDescription<{ encode([_colony]: [string]): string }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    deprecate: TypedFunctionDescription<{
      encode([_deprecated]: [boolean]): string;
    }>;

    uninstall: TypedFunctionDescription<{ encode([]: []): string }>;

    initialise: TypedFunctionDescription<{
      encode([
        _purchaseToken,
        _periodLength,
        _windowSize,
        _targetPerPeriod,
        _maxPerPeriod,
        _tokensToSell,
        _startingPrice,
      ]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    buyTokens: TypedFunctionDescription<{
      encode([_numTokens]: [BigNumberish]): string;
    }>;

    updatePeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getPeriodLength: TypedFunctionDescription<{ encode([]: []): string }>;

    getWindowSize: TypedFunctionDescription<{ encode([]: []): string }>;

    getTargetPerPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getMaxPerPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokensToSell: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getNumAvailable: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ExtensionInitialised: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    PeriodUpdated: TypedEventDescription<{
      encodeTopics([activePeriod, currentPeriod]: [null, null]): string[];
    }>;

    TokensBought: TypedEventDescription<{
      encodeTopics([buyer, numTokens, totalCost]: [null, null, null]): string[];
    }>;
  };
}

export class CoinMachine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CoinMachine;
  attach(addressOrName: string): CoinMachine;
  deployed(): Promise<CoinMachine>;

  on(event: EventFilter | string, listener: Listener): CoinMachine;
  once(event: EventFilter | string, listener: Listener): CoinMachine;
  addListener(eventName: EventFilter | string, listener: Listener): CoinMachine;
  removeAllListeners(eventName: EventFilter | string): CoinMachine;
  removeListener(eventName: any, listener: Listener): CoinMachine;

  interface: CoinMachineInterface;

  functions: {
    authority(overrides?: UnsignedTransaction): Promise<string>;

    "authority()"(overrides?: UnsignedTransaction): Promise<string>;

    getColony(overrides?: UnsignedTransaction): Promise<string>;

    "getColony()"(overrides?: UnsignedTransaction): Promise<string>;

    getDeprecated(overrides?: UnsignedTransaction): Promise<boolean>;

    "getDeprecated()"(overrides?: UnsignedTransaction): Promise<boolean>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    identifier(overrides?: UnsignedTransaction): Promise<string>;

    "identifier()"(overrides?: UnsignedTransaction): Promise<string>;

    version(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    install(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "install(address)"(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finishUpgrade()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deprecate(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    uninstall(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "uninstall()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    initialise(
      _purchaseToken: string,
      _periodLength: BigNumberish,
      _windowSize: BigNumberish,
      _targetPerPeriod: BigNumberish,
      _maxPerPeriod: BigNumberish,
      _tokensToSell: BigNumberish,
      _startingPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "initialise(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _purchaseToken: string,
      _periodLength: BigNumberish,
      _windowSize: BigNumberish,
      _targetPerPeriod: BigNumberish,
      _maxPerPeriod: BigNumberish,
      _tokensToSell: BigNumberish,
      _startingPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    buyTokens(
      _numTokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "buyTokens(uint256)"(
      _numTokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updatePeriod(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "updatePeriod()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getPeriodLength(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getPeriodLength()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getWindowSize(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getWindowSize()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTargetPerPeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getTargetPerPeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getMaxPerPeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getMaxPerPeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTokensToSell(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getTokensToSell()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getCurrentPrice(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getCurrentPrice()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getNumAvailable(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getNumAvailable()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };

  authority(overrides?: UnsignedTransaction): Promise<string>;

  "authority()"(overrides?: UnsignedTransaction): Promise<string>;

  getColony(overrides?: UnsignedTransaction): Promise<string>;

  "getColony()"(overrides?: UnsignedTransaction): Promise<string>;

  getDeprecated(overrides?: UnsignedTransaction): Promise<boolean>;

  "getDeprecated()"(overrides?: UnsignedTransaction): Promise<boolean>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  identifier(overrides?: UnsignedTransaction): Promise<string>;

  "identifier()"(overrides?: UnsignedTransaction): Promise<string>;

  version(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  install(
    _colony: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "install(address)"(
    _colony: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  finishUpgrade(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "finishUpgrade()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deprecate(
    _deprecated: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "deprecate(bool)"(
    _deprecated: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  uninstall(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "uninstall()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  initialise(
    _purchaseToken: string,
    _periodLength: BigNumberish,
    _windowSize: BigNumberish,
    _targetPerPeriod: BigNumberish,
    _maxPerPeriod: BigNumberish,
    _tokensToSell: BigNumberish,
    _startingPrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "initialise(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _purchaseToken: string,
    _periodLength: BigNumberish,
    _windowSize: BigNumberish,
    _targetPerPeriod: BigNumberish,
    _maxPerPeriod: BigNumberish,
    _tokensToSell: BigNumberish,
    _startingPrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  buyTokens(
    _numTokens: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "buyTokens(uint256)"(
    _numTokens: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updatePeriod(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "updatePeriod()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getPeriodLength(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getPeriodLength()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getWindowSize(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getWindowSize()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getTargetPerPeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getTargetPerPeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getMaxPerPeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getMaxPerPeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getTokensToSell(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getTokensToSell()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getCurrentPrice(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getCurrentPrice()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getNumAvailable(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getNumAvailable()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  filters: {
    ExtensionInitialised(): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    PeriodUpdated(activePeriod: null, currentPeriod: null): EventFilter;

    TokensBought(buyer: null, numTokens: null, totalCost: null): EventFilter;
  };

  estimate: {
    authority(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "authority()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getColony(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getColony()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getDeprecated(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getDeprecated()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    identifier(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "identifier()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    version(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    install(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "install(address)"(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finishUpgrade(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "finishUpgrade()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    deprecate(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    uninstall(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "uninstall()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    initialise(
      _purchaseToken: string,
      _periodLength: BigNumberish,
      _windowSize: BigNumberish,
      _targetPerPeriod: BigNumberish,
      _maxPerPeriod: BigNumberish,
      _tokensToSell: BigNumberish,
      _startingPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "initialise(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _purchaseToken: string,
      _periodLength: BigNumberish,
      _windowSize: BigNumberish,
      _targetPerPeriod: BigNumberish,
      _maxPerPeriod: BigNumberish,
      _tokensToSell: BigNumberish,
      _startingPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    buyTokens(
      _numTokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "buyTokens(uint256)"(
      _numTokens: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updatePeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "updatePeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getPeriodLength(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getPeriodLength()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getWindowSize(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getWindowSize()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTargetPerPeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getTargetPerPeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getMaxPerPeriod(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getMaxPerPeriod()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTokensToSell(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getTokensToSell()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getCurrentPrice(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getCurrentPrice()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getNumAvailable(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getNumAvailable()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
