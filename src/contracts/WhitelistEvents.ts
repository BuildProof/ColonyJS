/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WhitelistEventsInterface extends utils.Interface {
  contractName: "WhitelistEvents";
  functions: {};

  events: {
    "AgreementSigned(address)": EventFragment;
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "UserApproved(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserApproved"): EventFragment;
}

export type AgreementSignedEvent = TypedEvent<[string], { _user: string }>;

export type AgreementSignedEventFilter = TypedEventFilter<AgreementSignedEvent>;

export type ExtensionInitialisedEvent = TypedEvent<[], {}>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export type LogSetAuthorityEvent = TypedEvent<[string], { authority: string }>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export type LogSetOwnerEvent = TypedEvent<[string], { owner: string }>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { user: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type UserApprovedEvent = TypedEvent<
  [string, boolean],
  { _user: string; _status: boolean }
>;

export type UserApprovedEventFilter = TypedEventFilter<UserApprovedEvent>;

export interface WhitelistEvents extends BaseContract {
  contractName: "WhitelistEvents";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WhitelistEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AgreementSigned(address)"(
      _user?: string | null
    ): AgreementSignedEventFilter;
    AgreementSigned(_user?: string | null): AgreementSignedEventFilter;

    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "UserApproved(address,bool)"(
      _user?: string | null,
      _status?: null
    ): UserApprovedEventFilter;
    UserApproved(
      _user?: string | null,
      _status?: null
    ): UserApprovedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
