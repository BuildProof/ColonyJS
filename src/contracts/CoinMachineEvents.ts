/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CoinMachineEventsInterface extends utils.Interface {
  contractName: "CoinMachineEvents";
  functions: {};

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "PeriodUpdated(uint256,uint256)": EventFragment;
    "PriceEvolutionSet(bool)": EventFragment;
    "TokensBought(address,uint256,uint256)": EventFragment;
    "WhitelistSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceEvolutionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistSet"): EventFragment;
}

export type ExtensionInitialisedEvent = TypedEvent<[], {}>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export type LogSetAuthorityEvent = TypedEvent<[string], { authority: string }>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export type LogSetOwnerEvent = TypedEvent<[string], { owner: string }>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { user: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type PeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { activePeriod: BigNumber; currentPeriod: BigNumber }
>;

export type PeriodUpdatedEventFilter = TypedEventFilter<PeriodUpdatedEvent>;

export type PriceEvolutionSetEvent = TypedEvent<
  [boolean],
  { evolvePrice: boolean }
>;

export type PriceEvolutionSetEventFilter =
  TypedEventFilter<PriceEvolutionSetEvent>;

export type TokensBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; numTokens: BigNumber; totalCost: BigNumber }
>;

export type TokensBoughtEventFilter = TypedEventFilter<TokensBoughtEvent>;

export type WhitelistSetEvent = TypedEvent<[string], { whitelist: string }>;

export type WhitelistSetEventFilter = TypedEventFilter<WhitelistSetEvent>;

export interface CoinMachineEvents extends BaseContract {
  contractName: "CoinMachineEvents";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoinMachineEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "PeriodUpdated(uint256,uint256)"(
      activePeriod?: null,
      currentPeriod?: null
    ): PeriodUpdatedEventFilter;
    PeriodUpdated(
      activePeriod?: null,
      currentPeriod?: null
    ): PeriodUpdatedEventFilter;

    "PriceEvolutionSet(bool)"(evolvePrice?: null): PriceEvolutionSetEventFilter;
    PriceEvolutionSet(evolvePrice?: null): PriceEvolutionSetEventFilter;

    "TokensBought(address,uint256,uint256)"(
      buyer?: null,
      numTokens?: null,
      totalCost?: null
    ): TokensBoughtEventFilter;
    TokensBought(
      buyer?: null,
      numTokens?: null,
      totalCost?: null
    ): TokensBoughtEventFilter;

    "WhitelistSet(address)"(whitelist?: null): WhitelistSetEventFilter;
    WhitelistSet(whitelist?: null): WhitelistSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
