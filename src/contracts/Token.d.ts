/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface TokenInterface extends Interface {
  functions: {
    allowance: TypedFunctionDescription<{
      encode([src, guy]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([guy, wad]: [string, BigNumberish]): string;
    }>;

    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([src]: [string]): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    locked: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([dst, wad]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([src, dst, wad]: [string, string, BigNumberish]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([guy, wad]: [string, BigNumberish]): string;
    }>;

    burn: TypedFunctionDescription<{ encode([wad]: [BigNumberish]): string }>;

    unlock: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([src, guy, wad]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Burn: TypedEventDescription<{
      encodeTopics([guy, wad]: [string | null, null]): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    Mint: TypedEventDescription<{
      encodeTopics([guy, wad]: [string | null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([src, dst, wad]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Token extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Token;
  attach(addressOrName: string): Token;
  deployed(): Promise<Token>;

  on(event: EventFilter | string, listener: Listener): Token;
  once(event: EventFilter | string, listener: Listener): Token;
  addListener(eventName: EventFilter | string, listener: Listener): Token;
  removeAllListeners(eventName: EventFilter | string): Token;
  removeListener(eventName: any, listener: Listener): Token;

  interface: TokenInterface;

  functions: {
    allowance(
      src: string,
      guy: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      src: string,
      guy: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    authority(overrides?: UnsignedTransaction): Promise<string>;

    "authority()"(overrides?: UnsignedTransaction): Promise<string>;

    balanceOf(src: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "balanceOf(address)"(
      src: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    decimals(overrides?: UnsignedTransaction): Promise<number>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<number>;

    locked(overrides?: UnsignedTransaction): Promise<boolean>;

    "locked()"(overrides?: UnsignedTransaction): Promise<boolean>;

    name(overrides?: UnsignedTransaction): Promise<string>;

    "name()"(overrides?: UnsignedTransaction): Promise<string>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    symbol(overrides?: UnsignedTransaction): Promise<string>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    mint(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    burn(
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    unlock(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "unlock()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;
  };

  allowance(
    src: string,
    guy: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    src: string,
    guy: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  approve(
    guy: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    guy: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  authority(overrides?: UnsignedTransaction): Promise<string>;

  "authority()"(overrides?: UnsignedTransaction): Promise<string>;

  balanceOf(src: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "balanceOf(address)"(
    src: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  decimals(overrides?: UnsignedTransaction): Promise<number>;

  "decimals()"(overrides?: UnsignedTransaction): Promise<number>;

  locked(overrides?: UnsignedTransaction): Promise<boolean>;

  "locked()"(overrides?: UnsignedTransaction): Promise<boolean>;

  name(overrides?: UnsignedTransaction): Promise<string>;

  "name()"(overrides?: UnsignedTransaction): Promise<string>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  symbol(overrides?: UnsignedTransaction): Promise<string>;

  "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

  totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    dst: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  mint(
    guy: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    guy: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  burn(
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    guy: string,
    wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  unlock(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "unlock()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  filters: {
    Approval(src: string | null, guy: string | null, wad: null): EventFilter;

    Burn(guy: string | null, wad: null): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    Mint(guy: string | null, wad: null): EventFilter;

    Transfer(src: string | null, dst: string | null, wad: null): EventFilter;
  };

  estimate: {
    allowance(
      src: string,
      guy: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      src: string,
      guy: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    authority(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "authority()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    balanceOf(src: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "balanceOf(address)"(
      src: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    decimals(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    locked(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "locked()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    name(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "name()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    symbol(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mint(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mint(uint256)"(
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burn(
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burn(uint256)"(
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      guy: string,
      wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    unlock(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "unlock()"(overrides?: UnsignedTransaction): Promise<BigNumber>;
  };
}
