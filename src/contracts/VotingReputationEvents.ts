/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VotingReputationEventsInterface extends utils.Interface {
  contractName: "VotingReputationEvents";
  functions: {};

  events: {
    "ExtensionInitialised()": EventFragment;
    "LogSetAuthority(address)": EventFragment;
    "LogSetOwner(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "MotionCreated(uint256,address,uint256)": EventFragment;
    "MotionEscalated(uint256,address,uint256,uint256)": EventFragment;
    "MotionEventSet(uint256,uint256)": EventFragment;
    "MotionFinalized(uint256,bytes,bool)": EventFragment;
    "MotionRewardClaimed(uint256,address,uint256,uint256)": EventFragment;
    "MotionStaked(uint256,address,uint256,uint256)": EventFragment;
    "MotionVoteRevealed(uint256,address,uint256)": EventFragment;
    "MotionVoteSubmitted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionEscalated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionEventSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionVoteRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MotionVoteSubmitted"): EventFragment;
}

export type ExtensionInitialisedEvent = TypedEvent<[], {}>;

export type ExtensionInitialisedEventFilter =
  TypedEventFilter<ExtensionInitialisedEvent>;

export type LogSetAuthorityEvent = TypedEvent<[string], { authority: string }>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export type LogSetOwnerEvent = TypedEvent<[string], { owner: string }>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { user: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type MotionCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { motionId: BigNumber; creator: string; domainId: BigNumber }
>;

export type MotionCreatedEventFilter = TypedEventFilter<MotionCreatedEvent>;

export type MotionEscalatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    motionId: BigNumber;
    escalator: string;
    domainId: BigNumber;
    newDomainId: BigNumber;
  }
>;

export type MotionEscalatedEventFilter = TypedEventFilter<MotionEscalatedEvent>;

export type MotionEventSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { motionId: BigNumber; eventIndex: BigNumber }
>;

export type MotionEventSetEventFilter = TypedEventFilter<MotionEventSetEvent>;

export type MotionFinalizedEvent = TypedEvent<
  [BigNumber, string, boolean],
  { motionId: BigNumber; action: string; executed: boolean }
>;

export type MotionFinalizedEventFilter = TypedEventFilter<MotionFinalizedEvent>;

export type MotionRewardClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  { motionId: BigNumber; staker: string; vote: BigNumber; amount: BigNumber }
>;

export type MotionRewardClaimedEventFilter =
  TypedEventFilter<MotionRewardClaimedEvent>;

export type MotionStakedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  { motionId: BigNumber; staker: string; vote: BigNumber; amount: BigNumber }
>;

export type MotionStakedEventFilter = TypedEventFilter<MotionStakedEvent>;

export type MotionVoteRevealedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { motionId: BigNumber; voter: string; vote: BigNumber }
>;

export type MotionVoteRevealedEventFilter =
  TypedEventFilter<MotionVoteRevealedEvent>;

export type MotionVoteSubmittedEvent = TypedEvent<
  [BigNumber, string],
  { motionId: BigNumber; voter: string }
>;

export type MotionVoteSubmittedEventFilter =
  TypedEventFilter<MotionVoteSubmittedEvent>;

export interface VotingReputationEvents extends BaseContract {
  contractName: "VotingReputationEvents";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingReputationEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
    ExtensionInitialised(): ExtensionInitialisedEventFilter;

    "LogSetAuthority(address)"(
      authority?: string | null
    ): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;

    "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      user?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "MotionCreated(uint256,address,uint256)"(
      motionId?: BigNumberish | null,
      creator?: null,
      domainId?: BigNumberish | null
    ): MotionCreatedEventFilter;
    MotionCreated(
      motionId?: BigNumberish | null,
      creator?: null,
      domainId?: BigNumberish | null
    ): MotionCreatedEventFilter;

    "MotionEscalated(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      escalator?: null,
      domainId?: BigNumberish | null,
      newDomainId?: BigNumberish | null
    ): MotionEscalatedEventFilter;
    MotionEscalated(
      motionId?: BigNumberish | null,
      escalator?: null,
      domainId?: BigNumberish | null,
      newDomainId?: BigNumberish | null
    ): MotionEscalatedEventFilter;

    "MotionEventSet(uint256,uint256)"(
      motionId?: BigNumberish | null,
      eventIndex?: null
    ): MotionEventSetEventFilter;
    MotionEventSet(
      motionId?: BigNumberish | null,
      eventIndex?: null
    ): MotionEventSetEventFilter;

    "MotionFinalized(uint256,bytes,bool)"(
      motionId?: BigNumberish | null,
      action?: null,
      executed?: null
    ): MotionFinalizedEventFilter;
    MotionFinalized(
      motionId?: BigNumberish | null,
      action?: null,
      executed?: null
    ): MotionFinalizedEventFilter;

    "MotionRewardClaimed(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionRewardClaimedEventFilter;
    MotionRewardClaimed(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionRewardClaimedEventFilter;

    "MotionStaked(uint256,address,uint256,uint256)"(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionStakedEventFilter;
    MotionStaked(
      motionId?: BigNumberish | null,
      staker?: string | null,
      vote?: BigNumberish | null,
      amount?: null
    ): MotionStakedEventFilter;

    "MotionVoteRevealed(uint256,address,uint256)"(
      motionId?: BigNumberish | null,
      voter?: string | null,
      vote?: BigNumberish | null
    ): MotionVoteRevealedEventFilter;
    MotionVoteRevealed(
      motionId?: BigNumberish | null,
      voter?: string | null,
      vote?: BigNumberish | null
    ): MotionVoteRevealedEventFilter;

    "MotionVoteSubmitted(uint256,address)"(
      motionId?: BigNumberish | null,
      voter?: string | null
    ): MotionVoteSubmittedEventFilter;
    MotionVoteSubmitted(
      motionId?: BigNumberish | null,
      voter?: string | null
    ): MotionVoteSubmittedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
