/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ColonyNetworkDataTypes {
  export type ReputationLogEntryStruct = {
    user: string;
    amount: BigNumberish;
    skillId: BigNumberish;
    colony: string;
    nUpdates: BigNumberish;
    nPreviousUpdates: BigNumberish;
  };

  export type ReputationLogEntryStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    amount: BigNumber;
    skillId: BigNumber;
    colony: string;
    nUpdates: BigNumber;
    nPreviousUpdates: BigNumber;
  };

  export type SkillStruct = {
    nParents: BigNumberish;
    nChildren: BigNumberish;
    parents: BigNumberish[];
    children: BigNumberish[];
    globalSkill: boolean;
    deprecated: boolean;
  };

  export type SkillStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    boolean,
    boolean
  ] & {
    nParents: BigNumber;
    nChildren: BigNumber;
    parents: BigNumber[];
    children: BigNumber[];
    globalSkill: boolean;
    deprecated: boolean;
  };

  export type MiningStakeStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type MiningStakeStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface IColonyNetworkInterface extends utils.Interface {
  contractName: "IColonyNetwork";
  functions: {
    "approveExitRecovery()": FunctionFragment;
    "checkNotAdditionalProtectedVariable(uint256)": FunctionFragment;
    "enterRecoveryMode()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "exitRecoveryMode()": FunctionFragment;
    "getMetatransactionNonce(address)": FunctionFragment;
    "isInRecoveryMode()": FunctionFragment;
    "numRecoveryRoles()": FunctionFragment;
    "removeRecoveryRole(address)": FunctionFragment;
    "setRecoveryRole(address)": FunctionFragment;
    "setStorageSlotRecovery(uint256,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)": FunctionFragment;
    "getReplacementReputationUpdateLogEntry(address,uint256)": FunctionFragment;
    "getReplacementReputationUpdateLogsExist(address)": FunctionFragment;
    "getMetaColony()": FunctionFragment;
    "getColonyCount()": FunctionFragment;
    "isColony(address)": FunctionFragment;
    "addSkill(uint256)": FunctionFragment;
    "getSkill(uint256)": FunctionFragment;
    "deprecateSkill(uint256)": FunctionFragment;
    "appendReputationUpdateLog(address,int256,uint256)": FunctionFragment;
    "getSkillCount()": FunctionFragment;
    "getReputationMiningSkillId()": FunctionFragment;
    "setTokenLocking(address)": FunctionFragment;
    "getTokenLocking()": FunctionFragment;
    "createMetaColony(address)": FunctionFragment;
    "createColony(address)": FunctionFragment;
    "addColonyVersion(uint256,address)": FunctionFragment;
    "initialise(address,uint256)": FunctionFragment;
    "getColony(uint256)": FunctionFragment;
    "getCurrentColonyVersion()": FunctionFragment;
    "getParentSkillId(uint256,uint256)": FunctionFragment;
    "getChildSkillId(uint256,uint256)": FunctionFragment;
    "getReputationMiningCycle(bool)": FunctionFragment;
    "calculateMinerWeight(uint256,uint256)": FunctionFragment;
    "getColonyVersionResolver(uint256)": FunctionFragment;
    "setReputationRootHash(bytes32,uint256,address[])": FunctionFragment;
    "startNextCycle()": FunctionFragment;
    "initialiseReputationMining()": FunctionFragment;
    "getReputationRootHash()": FunctionFragment;
    "getReputationRootHashNLeaves()": FunctionFragment;
    "getReputationRootHashNNodes()": FunctionFragment;
    "startTokenAuction(address)": FunctionFragment;
    "setupRegistrar(address,bytes32)": FunctionFragment;
    "registerUserLabel(string,string)": FunctionFragment;
    "registerColonyLabel(string,string)": FunctionFragment;
    "updateColonyOrbitDB(string)": FunctionFragment;
    "updateUserOrbitDB(string)": FunctionFragment;
    "getProfileDBAddress(bytes32)": FunctionFragment;
    "lookupRegisteredENSDomain(address)": FunctionFragment;
    "addr(bytes32)": FunctionFragment;
    "getENSRegistrar()": FunctionFragment;
    "setMiningResolver(address)": FunctionFragment;
    "getMiningResolver()": FunctionFragment;
    "addExtensionToNetwork(bytes32,address)": FunctionFragment;
    "installExtension(bytes32,uint256)": FunctionFragment;
    "upgradeExtension(bytes32,uint256)": FunctionFragment;
    "deprecateExtension(bytes32,bool)": FunctionFragment;
    "uninstallExtension(bytes32)": FunctionFragment;
    "getExtensionResolver(bytes32,uint256)": FunctionFragment;
    "getExtensionInstallation(bytes32,address)": FunctionFragment;
    "getFeeInverse()": FunctionFragment;
    "setFeeInverse(uint256)": FunctionFragment;
    "getPayoutWhitelist(address)": FunctionFragment;
    "setPayoutWhitelist(address,bool)": FunctionFragment;
    "punishStakers(address[],uint256)": FunctionFragment;
    "stakeForMining(uint256)": FunctionFragment;
    "unstakeForMining(uint256)": FunctionFragment;
    "getMiningStake(address)": FunctionFragment;
    "reward(address,uint256)": FunctionFragment;
    "burnUnneededRewards(uint256)": FunctionFragment;
    "claimMiningReward(address)": FunctionFragment;
    "setReputationMiningCycleReward(uint256)": FunctionFragment;
    "getReputationMiningCycleReward()": FunctionFragment;
    "deployTokenViaNetwork(string,string,uint8)": FunctionFragment;
    "deployTokenAuthority(address,address,address[])": FunctionFragment;
    "setMiningDelegate(address,bool)": FunctionFragment;
    "getMiningDelegator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveExitRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkNotAdditionalProtectedVariable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetatransactionNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numRecoveryRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageSlotRecovery",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReplacementReputationUpdateLogEntry",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReplacementReputationUpdateLogEntry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReplacementReputationUpdateLogsExist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaColony",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getColonyCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isColony", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addSkill",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSkill",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateSkill",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "appendReputationUpdateLog",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSkillCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationMiningSkillId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenLocking",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenLocking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createMetaColony",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createColony",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addColonyVersion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColony",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentColonyVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParentSkillId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChildSkillId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationMiningCycle",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMinerWeight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColonyVersionResolver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputationRootHash",
    values: [BytesLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "startNextCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseReputationMining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationRootHashNLeaves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationRootHashNNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTokenAuction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupRegistrar",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserLabel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerColonyLabel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateColonyOrbitDB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserOrbitDB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileDBAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lookupRegisteredENSDomain",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getENSRegistrar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMiningResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addExtensionToNetwork",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "installExtension",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeExtension",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateExtension",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallExtension",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtensionResolver",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtensionInstallation",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeInverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeInverse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayoutWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "punishStakers",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForMining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeForMining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnUnneededRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMiningReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputationMiningCycleReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationMiningCycleReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTokenViaNetwork",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTokenAuthority",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiningDelegate",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningDelegator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveExitRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNotAdditionalProtectedVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetatransactionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRecoveryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageSlotRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReplacementReputationUpdateLogEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReplacementReputationUpdateLogEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReplacementReputationUpdateLogsExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColonyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isColony", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSkill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSkill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deprecateSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appendReputationUpdateLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSkillCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationMiningSkillId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenLocking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenLocking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMetaColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addColonyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentColonyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentSkillId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChildSkillId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationMiningCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMinerWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColonyVersionResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputationRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNextCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialiseReputationMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationRootHashNLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationRootHashNNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTokenAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerColonyLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateColonyOrbitDB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserOrbitDB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileDBAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookupRegisteredENSDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getENSRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiningResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExtensionToNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtensionResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtensionInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "punishStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeForMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeForMining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnUnneededRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMiningReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputationMiningCycleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationMiningCycleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTokenViaNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTokenAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiningDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningDelegator",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCreated(address,address,uint256)": EventFragment;
    "ColonyAdded(uint256,address,address)": EventFragment;
    "ColonyLabelRegistered(address,bytes32)": EventFragment;
    "ColonyNetworkInitialised(address)": EventFragment;
    "ColonyVersionAdded(uint256,address)": EventFragment;
    "ExtensionAddedToNetwork(bytes32,uint256)": EventFragment;
    "ExtensionDeprecated(bytes32,address,bool)": EventFragment;
    "ExtensionInstalled(bytes32,address,uint256)": EventFragment;
    "ExtensionUninstalled(bytes32,address)": EventFragment;
    "ExtensionUpgraded(bytes32,address,uint256)": EventFragment;
    "MetaColonyCreated(address,address,uint256)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "MiningCycleResolverSet(address)": EventFragment;
    "NetworkFeeInverseSet(uint256)": EventFragment;
    "RecoveryModeEntered(address)": EventFragment;
    "RecoveryModeExitApproved(address)": EventFragment;
    "RecoveryModeExited(address)": EventFragment;
    "RecoveryRoleSet(address,bool)": EventFragment;
    "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": EventFragment;
    "RegistrarInitialised(address,bytes32)": EventFragment;
    "ReputationMinerPenalised(address,uint256)": EventFragment;
    "ReputationMiningCycleComplete(bytes32,uint256)": EventFragment;
    "ReputationMiningInitialised(address)": EventFragment;
    "ReputationMiningRewardSet(uint256)": EventFragment;
    "ReputationRootHashSet(bytes32,uint256,address[],uint256)": EventFragment;
    "SkillAdded(uint256,uint256)": EventFragment;
    "TokenAuthorityDeployed(address)": EventFragment;
    "TokenDeployed(address)": EventFragment;
    "TokenLockingAddressSet(address)": EventFragment;
    "TokenWhitelisted(address,bool)": EventFragment;
    "UserLabelRegistered(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyLabelRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyNetworkInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyVersionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionAddedToNetwork"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionInstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionUninstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaColonyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MiningCycleResolverSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkFeeInverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrarInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationMinerPenalised"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReputationMiningCycleComplete"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReputationMiningInitialised"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationMiningRewardSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationRootHashSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SkillAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAuthorityDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLockingAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserLabelRegistered"): EventFragment;
}

export type AuctionCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  { auction: string; token: string; quantity: BigNumber }
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export type ColonyAddedEvent = TypedEvent<
  [BigNumber, string, string],
  { colonyId: BigNumber; colonyAddress: string; token: string }
>;

export type ColonyAddedEventFilter = TypedEventFilter<ColonyAddedEvent>;

export type ColonyLabelRegisteredEvent = TypedEvent<
  [string, string],
  { colony: string; label: string }
>;

export type ColonyLabelRegisteredEventFilter =
  TypedEventFilter<ColonyLabelRegisteredEvent>;

export type ColonyNetworkInitialisedEvent = TypedEvent<
  [string],
  { resolver: string }
>;

export type ColonyNetworkInitialisedEventFilter =
  TypedEventFilter<ColonyNetworkInitialisedEvent>;

export type ColonyVersionAddedEvent = TypedEvent<
  [BigNumber, string],
  { version: BigNumber; resolver: string }
>;

export type ColonyVersionAddedEventFilter =
  TypedEventFilter<ColonyVersionAddedEvent>;

export type ExtensionAddedToNetworkEvent = TypedEvent<
  [string, BigNumber],
  { extensionId: string; version: BigNumber }
>;

export type ExtensionAddedToNetworkEventFilter =
  TypedEventFilter<ExtensionAddedToNetworkEvent>;

export type ExtensionDeprecatedEvent = TypedEvent<
  [string, string, boolean],
  { extensionId: string; colony: string; deprecated: boolean }
>;

export type ExtensionDeprecatedEventFilter =
  TypedEventFilter<ExtensionDeprecatedEvent>;

export type ExtensionInstalledEvent = TypedEvent<
  [string, string, BigNumber],
  { extensionId: string; colony: string; version: BigNumber }
>;

export type ExtensionInstalledEventFilter =
  TypedEventFilter<ExtensionInstalledEvent>;

export type ExtensionUninstalledEvent = TypedEvent<
  [string, string],
  { extensionId: string; colony: string }
>;

export type ExtensionUninstalledEventFilter =
  TypedEventFilter<ExtensionUninstalledEvent>;

export type ExtensionUpgradedEvent = TypedEvent<
  [string, string, BigNumber],
  { extensionId: string; colony: string; version: BigNumber }
>;

export type ExtensionUpgradedEventFilter =
  TypedEventFilter<ExtensionUpgradedEvent>;

export type MetaColonyCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  { metaColony: string; token: string; rootSkillId: BigNumber }
>;

export type MetaColonyCreatedEventFilter =
  TypedEventFilter<MetaColonyCreatedEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; payload: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type MiningCycleResolverSetEvent = TypedEvent<
  [string],
  { miningCycleResolver: string }
>;

export type MiningCycleResolverSetEventFilter =
  TypedEventFilter<MiningCycleResolverSetEvent>;

export type NetworkFeeInverseSetEvent = TypedEvent<
  [BigNumber],
  { feeInverse: BigNumber }
>;

export type NetworkFeeInverseSetEventFilter =
  TypedEventFilter<NetworkFeeInverseSetEvent>;

export type RecoveryModeEnteredEvent = TypedEvent<[string], { user: string }>;

export type RecoveryModeEnteredEventFilter =
  TypedEventFilter<RecoveryModeEnteredEvent>;

export type RecoveryModeExitApprovedEvent = TypedEvent<
  [string],
  { user: string }
>;

export type RecoveryModeExitApprovedEventFilter =
  TypedEventFilter<RecoveryModeExitApprovedEvent>;

export type RecoveryModeExitedEvent = TypedEvent<[string], { user: string }>;

export type RecoveryModeExitedEventFilter =
  TypedEventFilter<RecoveryModeExitedEvent>;

export type RecoveryRoleSetEvent = TypedEvent<
  [string, boolean],
  { user: string; setTo: boolean }
>;

export type RecoveryRoleSetEventFilter = TypedEventFilter<RecoveryRoleSetEvent>;

export type RecoveryStorageSlotSetEvent = TypedEvent<
  [string, BigNumber, string, string],
  { user: string; slot: BigNumber; fromValue: string; toValue: string }
>;

export type RecoveryStorageSlotSetEventFilter =
  TypedEventFilter<RecoveryStorageSlotSetEvent>;

export type RegistrarInitialisedEvent = TypedEvent<
  [string, string],
  { ens: string; rootNode: string }
>;

export type RegistrarInitialisedEventFilter =
  TypedEventFilter<RegistrarInitialisedEvent>;

export type ReputationMinerPenalisedEvent = TypedEvent<
  [string, BigNumber],
  { miner: string; tokensLost: BigNumber }
>;

export type ReputationMinerPenalisedEventFilter =
  TypedEventFilter<ReputationMinerPenalisedEvent>;

export type ReputationMiningCycleCompleteEvent = TypedEvent<
  [string, BigNumber],
  { hash: string; nLeaves: BigNumber }
>;

export type ReputationMiningCycleCompleteEventFilter =
  TypedEventFilter<ReputationMiningCycleCompleteEvent>;

export type ReputationMiningInitialisedEvent = TypedEvent<
  [string],
  { inactiveReputationMiningCycle: string }
>;

export type ReputationMiningInitialisedEventFilter =
  TypedEventFilter<ReputationMiningInitialisedEvent>;

export type ReputationMiningRewardSetEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ReputationMiningRewardSetEventFilter =
  TypedEventFilter<ReputationMiningRewardSetEvent>;

export type ReputationRootHashSetEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber],
  {
    newHash: string;
    newNLeaves: BigNumber;
    stakers: string[];
    reward: BigNumber;
  }
>;

export type ReputationRootHashSetEventFilter =
  TypedEventFilter<ReputationRootHashSetEvent>;

export type SkillAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { skillId: BigNumber; parentSkillId: BigNumber }
>;

export type SkillAddedEventFilter = TypedEventFilter<SkillAddedEvent>;

export type TokenAuthorityDeployedEvent = TypedEvent<
  [string],
  { tokenAuthorityAddress: string }
>;

export type TokenAuthorityDeployedEventFilter =
  TypedEventFilter<TokenAuthorityDeployedEvent>;

export type TokenDeployedEvent = TypedEvent<[string], { tokenAddress: string }>;

export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;

export type TokenLockingAddressSetEvent = TypedEvent<
  [string],
  { tokenLocking: string }
>;

export type TokenLockingAddressSetEventFilter =
  TypedEventFilter<TokenLockingAddressSetEvent>;

export type TokenWhitelistedEvent = TypedEvent<
  [string, boolean],
  { token: string; status: boolean }
>;

export type TokenWhitelistedEventFilter =
  TypedEventFilter<TokenWhitelistedEvent>;

export type UserLabelRegisteredEvent = TypedEvent<
  [string, string],
  { user: string; label: string }
>;

export type UserLabelRegisteredEventFilter =
  TypedEventFilter<UserLabelRegisteredEvent>;

export interface IColonyNetwork extends BaseContract {
  contractName: "IColonyNetwork";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IColonyNetworkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    isInRecoveryMode(
      overrides?: CallOverrides
    ): Promise<[boolean] & { inRecoveryMode: boolean }>;

    numRecoveryRoles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numRoles: BigNumber }>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    setReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyNetworkDataTypes.ReputationLogEntryStructOutput] & {
        reputationLogEntry: ColonyNetworkDataTypes.ReputationLogEntryStructOutput;
      }
    >;

    getReplacementReputationUpdateLogsExist(
      _reputationMiningCycle: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    getMetaColony(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyAddress: string }>;

    getColonyCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    isColony(
      _colony: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { addressIsColony: boolean }>;

    addSkill(
      _parentSkillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSkill(
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyNetworkDataTypes.SkillStructOutput] & {
        skill: ColonyNetworkDataTypes.SkillStructOutput;
      }
    >;

    deprecateSkill(
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    appendReputationUpdateLog(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSkillCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getReputationMiningSkillId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skillId: BigNumber }>;

    setTokenLocking(
      _tokenLockingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenLocking(
      overrides?: CallOverrides
    ): Promise<[string] & { lockingAddress: string }>;

    createMetaColony(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createColony(address)"(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createColony(address,uint256,string,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createColony(address,uint256,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createColony(address,uint256,string,string,bool)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _orbitdb: string,
      _useExtensionManager: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addColonyVersion(
      _version: BigNumberish,
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialise(
      _resolver: string,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getColony(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { colonyAddress: string }>;

    getCurrentColonyVersion(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { version: BigNumber }>;

    getParentSkillId(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skillId: BigNumber }>;

    getChildSkillId(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skillId: BigNumber }>;

    getReputationMiningCycle(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { repMiningCycleAddress: string }>;

    calculateMinerWeight(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minerWeight: BigNumber }>;

    getColonyVersionResolver(
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { resolverAddress: string }>;

    "setReputationRootHash(bytes32,uint256,address[])"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReputationRootHash(bytes32,uint256,address[],uint256)"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNextCycle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialiseReputationMining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReputationRootHash(
      overrides?: CallOverrides
    ): Promise<[string] & { rootHash: string }>;

    getReputationRootHashNLeaves(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nLeaves: BigNumber }>;

    getReputationRootHashNNodes(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nNodes: BigNumber }>;

    startTokenAuction(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupRegistrar(
      _ens: string,
      _rootNode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUserLabel(
      username: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProfileDBAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { orbitDB: string }>;

    lookupRegisteredENSDomain(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { domain: string }>;

    addr(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getENSRegistrar(overrides?: CallOverrides): Promise<[string]>;

    setMiningResolver(
      miningResolverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMiningResolver(
      overrides?: CallOverrides
    ): Promise<[string] & { miningResolverAddress: string }>;

    addExtensionToNetwork(
      extensionId: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExtensionResolver(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { resolver: string }>;

    getExtensionInstallation(
      extensionId: BytesLike,
      colony: string,
      overrides?: CallOverrides
    ): Promise<[string] & { installation: string }>;

    getFeeInverse(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _feeInverse: BigNumber }>;

    setFeeInverse(
      _feeInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPayoutWhitelist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    setPayoutWhitelist(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    punishStakers(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeForMining(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeForMining(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMiningStake(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [ColonyNetworkDataTypes.MiningStakeStructOutput] & {
        _info: ColonyNetworkDataTypes.MiningStakeStructOutput;
      }
    >;

    reward(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnUnneededRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMiningReward(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReputationMiningCycleReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReputationMiningCycleReward(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployTokenViaNetwork(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTokenAuthority(
      _token: string,
      _colony: string,
      allowedToTransfer: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMiningDelegate(
      _delegate: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMiningDelegator(
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  approveExitRecovery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  enterRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    payload: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMetatransactionNonce(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

  numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

  removeRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setReplacementReputationUpdateLogEntry(
    _reputationMiningCycle: string,
    _id: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    _colony: string,
    _nUpdates: BigNumberish,
    _nPreviousUpdates: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReplacementReputationUpdateLogEntry(
    _reputationMiningCycle: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyNetworkDataTypes.ReputationLogEntryStructOutput>;

  getReplacementReputationUpdateLogsExist(
    _reputationMiningCycle: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMetaColony(overrides?: CallOverrides): Promise<string>;

  getColonyCount(overrides?: CallOverrides): Promise<BigNumber>;

  isColony(_colony: string, overrides?: CallOverrides): Promise<boolean>;

  addSkill(
    _parentSkillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSkill(
    _skillId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyNetworkDataTypes.SkillStructOutput>;

  deprecateSkill(
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  appendReputationUpdateLog(
    _user: string,
    _amount: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSkillCount(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationMiningSkillId(overrides?: CallOverrides): Promise<BigNumber>;

  setTokenLocking(
    _tokenLockingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenLocking(overrides?: CallOverrides): Promise<string>;

  createMetaColony(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createColony(address)"(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createColony(address,uint256,string,string)"(
    _tokenAddress: string,
    _version: BigNumberish,
    _colonyName: string,
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createColony(address,uint256,string)"(
    _tokenAddress: string,
    _version: BigNumberish,
    _colonyName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createColony(address,uint256,string,string,bool)"(
    _tokenAddress: string,
    _version: BigNumberish,
    _colonyName: string,
    _orbitdb: string,
    _useExtensionManager: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addColonyVersion(
    _version: BigNumberish,
    _resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialise(
    _resolver: string,
    _version: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getCurrentColonyVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getParentSkillId(
    _skillId: BigNumberish,
    _parentSkillIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChildSkillId(
    _skillId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReputationMiningCycle(
    _active: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateMinerWeight(
    _timeStaked: BigNumberish,
    _submissonIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getColonyVersionResolver(
    _version: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "setReputationRootHash(bytes32,uint256,address[])"(
    newHash: BytesLike,
    newNLeaves: BigNumberish,
    stakers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReputationRootHash(bytes32,uint256,address[],uint256)"(
    newHash: BytesLike,
    newNLeaves: BigNumberish,
    stakers: string[],
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNextCycle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialiseReputationMining(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReputationRootHash(overrides?: CallOverrides): Promise<string>;

  getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationRootHashNNodes(overrides?: CallOverrides): Promise<BigNumber>;

  startTokenAuction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupRegistrar(
    _ens: string,
    _rootNode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUserLabel(
    username: string,
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserOrbitDB(
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProfileDBAddress(
    node: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  lookupRegisteredENSDomain(
    addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  addr(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  getENSRegistrar(overrides?: CallOverrides): Promise<string>;

  setMiningResolver(
    miningResolverAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMiningResolver(overrides?: CallOverrides): Promise<string>;

  addExtensionToNetwork(
    extensionId: BytesLike,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  installExtension(
    extensionId: BytesLike,
    version: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeExtension(
    extensionId: BytesLike,
    newVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateExtension(
    extensionId: BytesLike,
    deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uninstallExtension(
    extensionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExtensionResolver(
    extensionId: BytesLike,
    version: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getExtensionInstallation(
    extensionId: BytesLike,
    colony: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeInverse(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeInverse(
    _feeInverse: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPayoutWhitelist(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setPayoutWhitelist(
    _token: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  punishStakers(
    _stakers: string[],
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeForMining(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeForMining(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMiningStake(
    _user: string,
    overrides?: CallOverrides
  ): Promise<ColonyNetworkDataTypes.MiningStakeStructOutput>;

  reward(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnUnneededRewards(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMiningReward(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReputationMiningCycleReward(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReputationMiningCycleReward(overrides?: CallOverrides): Promise<BigNumber>;

  deployTokenViaNetwork(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTokenAuthority(
    _token: string,
    _colony: string,
    allowedToTransfer: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMiningDelegate(
    _delegate: string,
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMiningDelegator(
    _delegate: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    approveExitRecovery(overrides?: CallOverrides): Promise<void>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterRecoveryMode(overrides?: CallOverrides): Promise<void>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    exitRecoveryMode(overrides?: CallOverrides): Promise<void>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    setRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyNetworkDataTypes.ReputationLogEntryStructOutput>;

    getReplacementReputationUpdateLogsExist(
      _reputationMiningCycle: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMetaColony(overrides?: CallOverrides): Promise<string>;

    getColonyCount(overrides?: CallOverrides): Promise<BigNumber>;

    isColony(_colony: string, overrides?: CallOverrides): Promise<boolean>;

    addSkill(
      _parentSkillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSkill(
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyNetworkDataTypes.SkillStructOutput>;

    deprecateSkill(
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    appendReputationUpdateLog(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getSkillCount(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationMiningSkillId(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenLocking(
      _tokenLockingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenLocking(overrides?: CallOverrides): Promise<string>;

    createMetaColony(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createColony(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createColony(address,uint256,string,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createColony(address,uint256,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createColony(address,uint256,string,string,bool)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _orbitdb: string,
      _useExtensionManager: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    addColonyVersion(
      _version: BigNumberish,
      _resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialise(
      _resolver: string,
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getCurrentColonyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getParentSkillId(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChildSkillId(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReputationMiningCycle(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateMinerWeight(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getColonyVersionResolver(
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "setReputationRootHash(bytes32,uint256,address[])"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setReputationRootHash(bytes32,uint256,address[],uint256)"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startNextCycle(overrides?: CallOverrides): Promise<void>;

    initialiseReputationMining(overrides?: CallOverrides): Promise<void>;

    getReputationRootHash(overrides?: CallOverrides): Promise<string>;

    getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationRootHashNNodes(overrides?: CallOverrides): Promise<BigNumber>;

    startTokenAuction(_token: string, overrides?: CallOverrides): Promise<void>;

    setupRegistrar(
      _ens: string,
      _rootNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUserLabel(
      username: string,
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserOrbitDB(
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getProfileDBAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    lookupRegisteredENSDomain(
      addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    addr(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    getENSRegistrar(overrides?: CallOverrides): Promise<string>;

    setMiningResolver(
      miningResolverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getMiningResolver(overrides?: CallOverrides): Promise<string>;

    addExtensionToNetwork(
      extensionId: BytesLike,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getExtensionResolver(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getExtensionInstallation(
      extensionId: BytesLike,
      colony: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeInverse(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeInverse(
      _feeInverse: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPayoutWhitelist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPayoutWhitelist(
      _token: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    punishStakers(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeForMining(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeForMining(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMiningStake(
      _user: string,
      overrides?: CallOverrides
    ): Promise<ColonyNetworkDataTypes.MiningStakeStructOutput>;

    reward(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnUnneededRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMiningReward(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReputationMiningCycleReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReputationMiningCycleReward(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTokenViaNetwork(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployTokenAuthority(
      _token: string,
      _colony: string,
      allowedToTransfer: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    setMiningDelegate(
      _delegate: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getMiningDelegator(
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AuctionCreated(address,address,uint256)"(
      auction?: null,
      token?: null,
      quantity?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      auction?: null,
      token?: null,
      quantity?: null
    ): AuctionCreatedEventFilter;

    "ColonyAdded(uint256,address,address)"(
      colonyId?: BigNumberish | null,
      colonyAddress?: string | null,
      token?: null
    ): ColonyAddedEventFilter;
    ColonyAdded(
      colonyId?: BigNumberish | null,
      colonyAddress?: string | null,
      token?: null
    ): ColonyAddedEventFilter;

    "ColonyLabelRegistered(address,bytes32)"(
      colony?: string | null,
      label?: null
    ): ColonyLabelRegisteredEventFilter;
    ColonyLabelRegistered(
      colony?: string | null,
      label?: null
    ): ColonyLabelRegisteredEventFilter;

    "ColonyNetworkInitialised(address)"(
      resolver?: null
    ): ColonyNetworkInitialisedEventFilter;
    ColonyNetworkInitialised(
      resolver?: null
    ): ColonyNetworkInitialisedEventFilter;

    "ColonyVersionAdded(uint256,address)"(
      version?: null,
      resolver?: null
    ): ColonyVersionAddedEventFilter;
    ColonyVersionAdded(
      version?: null,
      resolver?: null
    ): ColonyVersionAddedEventFilter;

    "ExtensionAddedToNetwork(bytes32,uint256)"(
      extensionId?: BytesLike | null,
      version?: null
    ): ExtensionAddedToNetworkEventFilter;
    ExtensionAddedToNetwork(
      extensionId?: BytesLike | null,
      version?: null
    ): ExtensionAddedToNetworkEventFilter;

    "ExtensionDeprecated(bytes32,address,bool)"(
      extensionId?: BytesLike | null,
      colony?: string | null,
      deprecated?: null
    ): ExtensionDeprecatedEventFilter;
    ExtensionDeprecated(
      extensionId?: BytesLike | null,
      colony?: string | null,
      deprecated?: null
    ): ExtensionDeprecatedEventFilter;

    "ExtensionInstalled(bytes32,address,uint256)"(
      extensionId?: BytesLike | null,
      colony?: string | null,
      version?: null
    ): ExtensionInstalledEventFilter;
    ExtensionInstalled(
      extensionId?: BytesLike | null,
      colony?: string | null,
      version?: null
    ): ExtensionInstalledEventFilter;

    "ExtensionUninstalled(bytes32,address)"(
      extensionId?: BytesLike | null,
      colony?: string | null
    ): ExtensionUninstalledEventFilter;
    ExtensionUninstalled(
      extensionId?: BytesLike | null,
      colony?: string | null
    ): ExtensionUninstalledEventFilter;

    "ExtensionUpgraded(bytes32,address,uint256)"(
      extensionId?: BytesLike | null,
      colony?: string | null,
      version?: null
    ): ExtensionUpgradedEventFilter;
    ExtensionUpgraded(
      extensionId?: BytesLike | null,
      colony?: string | null,
      version?: null
    ): ExtensionUpgradedEventFilter;

    "MetaColonyCreated(address,address,uint256)"(
      metaColony?: null,
      token?: null,
      rootSkillId?: null
    ): MetaColonyCreatedEventFilter;
    MetaColonyCreated(
      metaColony?: null,
      token?: null,
      rootSkillId?: null
    ): MetaColonyCreatedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      payload?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      payload?: null
    ): MetaTransactionExecutedEventFilter;

    "MiningCycleResolverSet(address)"(
      miningCycleResolver?: null
    ): MiningCycleResolverSetEventFilter;
    MiningCycleResolverSet(
      miningCycleResolver?: null
    ): MiningCycleResolverSetEventFilter;

    "NetworkFeeInverseSet(uint256)"(
      feeInverse?: null
    ): NetworkFeeInverseSetEventFilter;
    NetworkFeeInverseSet(feeInverse?: null): NetworkFeeInverseSetEventFilter;

    "RecoveryModeEntered(address)"(user?: null): RecoveryModeEnteredEventFilter;
    RecoveryModeEntered(user?: null): RecoveryModeEnteredEventFilter;

    "RecoveryModeExitApproved(address)"(
      user?: null
    ): RecoveryModeExitApprovedEventFilter;
    RecoveryModeExitApproved(user?: null): RecoveryModeExitApprovedEventFilter;

    "RecoveryModeExited(address)"(user?: null): RecoveryModeExitedEventFilter;
    RecoveryModeExited(user?: null): RecoveryModeExitedEventFilter;

    "RecoveryRoleSet(address,bool)"(
      user?: string | null,
      setTo?: null
    ): RecoveryRoleSetEventFilter;
    RecoveryRoleSet(
      user?: string | null,
      setTo?: null
    ): RecoveryRoleSetEventFilter;

    "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"(
      user?: null,
      slot?: null,
      fromValue?: null,
      toValue?: null
    ): RecoveryStorageSlotSetEventFilter;
    RecoveryStorageSlotSet(
      user?: null,
      slot?: null,
      fromValue?: null,
      toValue?: null
    ): RecoveryStorageSlotSetEventFilter;

    "RegistrarInitialised(address,bytes32)"(
      ens?: null,
      rootNode?: null
    ): RegistrarInitialisedEventFilter;
    RegistrarInitialised(
      ens?: null,
      rootNode?: null
    ): RegistrarInitialisedEventFilter;

    "ReputationMinerPenalised(address,uint256)"(
      miner?: null,
      tokensLost?: null
    ): ReputationMinerPenalisedEventFilter;
    ReputationMinerPenalised(
      miner?: null,
      tokensLost?: null
    ): ReputationMinerPenalisedEventFilter;

    "ReputationMiningCycleComplete(bytes32,uint256)"(
      hash?: null,
      nLeaves?: null
    ): ReputationMiningCycleCompleteEventFilter;
    ReputationMiningCycleComplete(
      hash?: null,
      nLeaves?: null
    ): ReputationMiningCycleCompleteEventFilter;

    "ReputationMiningInitialised(address)"(
      inactiveReputationMiningCycle?: null
    ): ReputationMiningInitialisedEventFilter;
    ReputationMiningInitialised(
      inactiveReputationMiningCycle?: null
    ): ReputationMiningInitialisedEventFilter;

    "ReputationMiningRewardSet(uint256)"(
      amount?: null
    ): ReputationMiningRewardSetEventFilter;
    ReputationMiningRewardSet(
      amount?: null
    ): ReputationMiningRewardSetEventFilter;

    "ReputationRootHashSet(bytes32,uint256,address[],uint256)"(
      newHash?: null,
      newNLeaves?: null,
      stakers?: null,
      reward?: null
    ): ReputationRootHashSetEventFilter;
    ReputationRootHashSet(
      newHash?: null,
      newNLeaves?: null,
      stakers?: null,
      reward?: null
    ): ReputationRootHashSetEventFilter;

    "SkillAdded(uint256,uint256)"(
      skillId?: null,
      parentSkillId?: null
    ): SkillAddedEventFilter;
    SkillAdded(skillId?: null, parentSkillId?: null): SkillAddedEventFilter;

    "TokenAuthorityDeployed(address)"(
      tokenAuthorityAddress?: null
    ): TokenAuthorityDeployedEventFilter;
    TokenAuthorityDeployed(
      tokenAuthorityAddress?: null
    ): TokenAuthorityDeployedEventFilter;

    "TokenDeployed(address)"(tokenAddress?: null): TokenDeployedEventFilter;
    TokenDeployed(tokenAddress?: null): TokenDeployedEventFilter;

    "TokenLockingAddressSet(address)"(
      tokenLocking?: null
    ): TokenLockingAddressSetEventFilter;
    TokenLockingAddressSet(
      tokenLocking?: null
    ): TokenLockingAddressSetEventFilter;

    "TokenWhitelisted(address,bool)"(
      token?: null,
      status?: null
    ): TokenWhitelistedEventFilter;
    TokenWhitelisted(token?: null, status?: null): TokenWhitelistedEventFilter;

    "UserLabelRegistered(address,bytes32)"(
      user?: string | null,
      label?: null
    ): UserLabelRegisteredEventFilter;
    UserLabelRegistered(
      user?: string | null,
      label?: null
    ): UserLabelRegisteredEventFilter;
  };

  estimateGas: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReplacementReputationUpdateLogsExist(
      _reputationMiningCycle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetaColony(overrides?: CallOverrides): Promise<BigNumber>;

    getColonyCount(overrides?: CallOverrides): Promise<BigNumber>;

    isColony(_colony: string, overrides?: CallOverrides): Promise<BigNumber>;

    addSkill(
      _parentSkillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSkill(
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deprecateSkill(
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    appendReputationUpdateLog(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSkillCount(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationMiningSkillId(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenLocking(
      _tokenLockingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenLocking(overrides?: CallOverrides): Promise<BigNumber>;

    createMetaColony(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createColony(address)"(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createColony(address,uint256,string,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createColony(address,uint256,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createColony(address,uint256,string,string,bool)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _orbitdb: string,
      _useExtensionManager: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addColonyVersion(
      _version: BigNumberish,
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialise(
      _resolver: string,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentColonyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getParentSkillId(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChildSkillId(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReputationMiningCycle(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMinerWeight(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getColonyVersionResolver(
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setReputationRootHash(bytes32,uint256,address[])"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReputationRootHash(bytes32,uint256,address[],uint256)"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNextCycle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialiseReputationMining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReputationRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationRootHashNNodes(overrides?: CallOverrides): Promise<BigNumber>;

    startTokenAuction(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupRegistrar(
      _ens: string,
      _rootNode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUserLabel(
      username: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProfileDBAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lookupRegisteredENSDomain(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addr(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getENSRegistrar(overrides?: CallOverrides): Promise<BigNumber>;

    setMiningResolver(
      miningResolverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMiningResolver(overrides?: CallOverrides): Promise<BigNumber>;

    addExtensionToNetwork(
      extensionId: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExtensionResolver(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExtensionInstallation(
      extensionId: BytesLike,
      colony: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeInverse(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeInverse(
      _feeInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPayoutWhitelist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPayoutWhitelist(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    punishStakers(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeForMining(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeForMining(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMiningStake(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnUnneededRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMiningReward(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReputationMiningCycleReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReputationMiningCycleReward(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTokenViaNetwork(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTokenAuthority(
      _token: string,
      _colony: string,
      allowedToTransfer: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMiningDelegate(
      _delegate: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMiningDelegator(
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      _colony: string,
      _nUpdates: BigNumberish,
      _nPreviousUpdates: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReplacementReputationUpdateLogEntry(
      _reputationMiningCycle: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReplacementReputationUpdateLogsExist(
      _reputationMiningCycle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetaColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColonyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isColony(
      _colony: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSkill(
      _parentSkillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSkill(
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deprecateSkill(
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    appendReputationUpdateLog(
      _user: string,
      _amount: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSkillCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReputationMiningSkillId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenLocking(
      _tokenLockingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenLocking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMetaColony(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createColony(address)"(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createColony(address,uint256,string,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createColony(address,uint256,string)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createColony(address,uint256,string,string,bool)"(
      _tokenAddress: string,
      _version: BigNumberish,
      _colonyName: string,
      _orbitdb: string,
      _useExtensionManager: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addColonyVersion(
      _version: BigNumberish,
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialise(
      _resolver: string,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getColony(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentColonyVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentSkillId(
      _skillId: BigNumberish,
      _parentSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChildSkillId(
      _skillId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationMiningCycle(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateMinerWeight(
      _timeStaked: BigNumberish,
      _submissonIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColonyVersionResolver(
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setReputationRootHash(bytes32,uint256,address[])"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReputationRootHash(bytes32,uint256,address[],uint256)"(
      newHash: BytesLike,
      newNLeaves: BigNumberish,
      stakers: string[],
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNextCycle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialiseReputationMining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReputationRootHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationRootHashNLeaves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationRootHashNNodes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTokenAuction(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupRegistrar(
      _ens: string,
      _rootNode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUserLabel(
      username: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProfileDBAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lookupRegisteredENSDomain(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addr(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getENSRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMiningResolver(
      miningResolverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMiningResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addExtensionToNetwork(
      extensionId: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExtensionResolver(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExtensionInstallation(
      extensionId: BytesLike,
      colony: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeInverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeInverse(
      _feeInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPayoutWhitelist(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPayoutWhitelist(
      _token: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    punishStakers(
      _stakers: string[],
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeForMining(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeForMining(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMiningStake(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnUnneededRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMiningReward(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReputationMiningCycleReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReputationMiningCycleReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployTokenViaNetwork(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTokenAuthority(
      _token: string,
      _colony: string,
      allowedToTransfer: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMiningDelegate(
      _delegate: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMiningDelegator(
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
