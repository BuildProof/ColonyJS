/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CoinMachineInterface extends Interface {
  functions: {
    initialise: TypedFunctionDescription<{
      encode([
        _purchaseToken,
        _periodLength,
        _windowSize,
        _targetPerPeriod,
        _maxPerPeriod,
        _startingPrice
      ]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    buyTokens: TypedFunctionDescription<{
      encode([_numTokens]: [BigNumberish]): string;
    }>;

    updatePeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getPeriodLength: TypedFunctionDescription<{ encode([]: []): string }>;

    getWindowSize: TypedFunctionDescription<{ encode([]: []): string }>;

    getTargetPerPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getMaxPerPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getNumAvailable: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    TokensBought: TypedEventDescription<{
      encodeTopics([buyer, numTokens, totalCost]: [null, null, null]): string[];
    }>;

    PeriodUpdated: TypedEventDescription<{
      encodeTopics([activePeriod, currentPeriod]: [null, null]): string[];
    }>;
  };
}

export class CoinMachine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CoinMachine;
  attach(addressOrName: string): CoinMachine;
  deployed(): Promise<CoinMachine>;

  on(event: EventFilter | string, listener: Listener): CoinMachine;
  once(event: EventFilter | string, listener: Listener): CoinMachine;
  addListener(eventName: EventFilter | string, listener: Listener): CoinMachine;
  removeAllListeners(eventName: EventFilter | string): CoinMachine;
  removeListener(eventName: any, listener: Listener): CoinMachine;

  interface: CoinMachineInterface;

  functions: {
    /**
     * Must be called before any sales can be made
     * @param _maxPerPeriod The maximum number of tokens that can be sold per period
     * @param _periodLength How long in seconds each period of the sale should last
     * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
     * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
     * @param _targetPerPeriod The number of tokens to aim to sell per period
     * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
     */
    initialise(
      _purchaseToken: string,
      _periodLength: BigNumberish,
      _windowSize: BigNumberish,
      _targetPerPeriod: BigNumberish,
      _maxPerPeriod: BigNumberish,
      _startingPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Purchase tokens from Coin Machine.
     * @param _numTokens The number of tokens to purchase
     */
    buyTokens(
      _numTokens: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Bring the token accounting current
     */
    updatePeriod(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the length of the sale period
     */
    getPeriodLength(): Promise<BigNumber>;

    /**
     * Get the size of the averaging window
     */
    getWindowSize(): Promise<BigNumber>;

    /**
     * Get the target number of tokens to sell per period
     */
    getTargetPerPeriod(): Promise<BigNumber>;

    /**
     * Get the maximum number of tokens to sell per period
     */
    getMaxPerPeriod(): Promise<BigNumber>;

    /**
     * Get the current price per token
     */
    getCurrentPrice(): Promise<BigNumber>;

    /**
     * Get the number of remaining tokens for sale this period
     */
    getNumAvailable(): Promise<BigNumber>;
  };

  /**
   * Must be called before any sales can be made
   * @param _maxPerPeriod The maximum number of tokens that can be sold per period
   * @param _periodLength How long in seconds each period of the sale should last
   * @param _purchaseToken The token to receive payments in. Use 0x0 for ether
   * @param _startingPrice The sale price to start at, expressed in units of _purchaseToken per token being sold, as a WAD
   * @param _targetPerPeriod The number of tokens to aim to sell per period
   * @param _windowSize Characteristic number of periods that should be used for the moving average. In the long-term, 86% of the weighting will be in this window size. The higher the number, the slower the price will be to adjust
   */
  initialise(
    _purchaseToken: string,
    _periodLength: BigNumberish,
    _windowSize: BigNumberish,
    _targetPerPeriod: BigNumberish,
    _maxPerPeriod: BigNumberish,
    _startingPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Purchase tokens from Coin Machine.
   * @param _numTokens The number of tokens to purchase
   */
  buyTokens(
    _numTokens: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Bring the token accounting current
   */
  updatePeriod(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Get the length of the sale period
   */
  getPeriodLength(): Promise<BigNumber>;

  /**
   * Get the size of the averaging window
   */
  getWindowSize(): Promise<BigNumber>;

  /**
   * Get the target number of tokens to sell per period
   */
  getTargetPerPeriod(): Promise<BigNumber>;

  /**
   * Get the maximum number of tokens to sell per period
   */
  getMaxPerPeriod(): Promise<BigNumber>;

  /**
   * Get the current price per token
   */
  getCurrentPrice(): Promise<BigNumber>;

  /**
   * Get the number of remaining tokens for sale this period
   */
  getNumAvailable(): Promise<BigNumber>;

  filters: {
    TokensBought(buyer: null, numTokens: null, totalCost: null): EventFilter;

    PeriodUpdated(activePeriod: null, currentPeriod: null): EventFilter;
  };

  estimate: {
    initialise(
      _purchaseToken: string,
      _periodLength: BigNumberish,
      _windowSize: BigNumberish,
      _targetPerPeriod: BigNumberish,
      _maxPerPeriod: BigNumberish,
      _startingPrice: BigNumberish
    ): Promise<BigNumber>;

    buyTokens(_numTokens: BigNumberish): Promise<BigNumber>;

    updatePeriod(): Promise<BigNumber>;

    getPeriodLength(): Promise<BigNumber>;

    getWindowSize(): Promise<BigNumber>;

    getTargetPerPeriod(): Promise<BigNumber>;

    getMaxPerPeriod(): Promise<BigNumber>;

    getCurrentPrice(): Promise<BigNumber>;

    getNumAvailable(): Promise<BigNumber>;
  };
}
