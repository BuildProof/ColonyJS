/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OneTxPaymentInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    getDeprecated: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    identifier: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    install: TypedFunctionDescription<{ encode([_colony]: [string]): string }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    deprecate: TypedFunctionDescription<{
      encode([_deprecated]: [boolean]): string;
    }>;

    uninstall: TypedFunctionDescription<{ encode([]: []): string }>;

    makePayment: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _callerPermissionDomainId,
        _callerChildSkillIndex,
        _workers,
        _tokens,
        _amounts,
        _domainId,
        _skillId
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string[],
        string[],
        BigNumberish[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    makePaymentFundedFromDomain: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _callerPermissionDomainId,
        _callerChildSkillIndex,
        _workers,
        _tokens,
        _amounts,
        _domainId,
        _skillId
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string[],
        string[],
        BigNumberish[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    ExtensionInitialised: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;
  };
}

export class OneTxPayment extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OneTxPayment;
  attach(addressOrName: string): OneTxPayment;
  deployed(): Promise<OneTxPayment>;

  on(event: EventFilter | string, listener: Listener): OneTxPayment;
  once(event: EventFilter | string, listener: Listener): OneTxPayment;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OneTxPayment;
  removeAllListeners(eventName: EventFilter | string): OneTxPayment;
  removeListener(eventName: any, listener: Listener): OneTxPayment;

  interface: OneTxPaymentInterface;

  functions: {
    authority(): Promise<string>;

    getDeprecated(): Promise<boolean>;

    owner(): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the identifier of the extension
     */
    identifier(): Promise<string>;

    /**
     * Returns the version of the extension
     */
    version(): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    /**
     * Assumes that each entity holds administration and funding roles in the root domain
     * Completes a colony payment in a single transaction
     * @param _amounts amounts of the tokens being paid out
     * @param _callerChildSkillIndex Index of the _callerPermissionDomainId skill.children array to get
     * @param _callerPermissionDomainId The domainId in which the _caller_ has the administration permission (must have funding in root)
     * @param _childSkillIndex Index of the _permissionDomainId skill.children array to get
     * @param _domainId The domainId the payment should be coming from
     * @param _permissionDomainId The domainId in which the _contract_ has permissions to add a payment and fund it
     * @param _skillId The skillId that the payment should be marked with, possibly awarding reputation in this skill.
     * @param _tokens Addresses of the tokens the payments are being made in. 0x00 for Ether.
     * @param _workers The addresses of the recipients of the payment
     */
    makePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _callerPermissionDomainId: BigNumberish,
      _callerChildSkillIndex: BigNumberish,
      _workers: string[],
      _tokens: string[],
      _amounts: BigNumberish[],
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Assumes that each entity holds administration and funding roles in the same domain,   although contract and caller can have the permissions in different domains. Payment is taken from domain funds - if the domain does not have sufficient funds, call will fail.
     * Completes a colony payment in a single transaction
     * @param _amounts The amounts of the tokens being paid out
     * @param _callerChildSkillIndex Index of the _callerPermissionDomainId skill.children array to get
     * @param _callerPermissionDomainId The domainId in which the _caller_ has permissions to add a payment and fund it
     * @param _childSkillIndex Index of the _permissionDomainId skill.children array to get
     * @param _domainId The domainId the payment should be coming from
     * @param _permissionDomainId The domainId in which the _contract_ has permissions to add a payment and fund it
     * @param _skillId The skillId that the payment should be marked with, possibly awarding reputation in this skill.
     * @param _tokens The addresses of the token the payments are being made in. 0x00 for Ether.
     * @param _workers The addresses of the recipients of the payment
     */
    makePaymentFundedFromDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _callerPermissionDomainId: BigNumberish,
      _callerChildSkillIndex: BigNumberish,
      _workers: string[],
      _tokens: string[],
      _amounts: BigNumberish[],
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  authority(): Promise<string>;

  getDeprecated(): Promise<boolean>;

  owner(): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the identifier of the extension
   */
  identifier(): Promise<string>;

  /**
   * Returns the version of the extension
   */
  version(): Promise<BigNumber>;

  /**
   * Configures the extension
   * @param _colony The colony in which the extension holds permissions
   */
  install(
    _colony: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  finishUpgrade(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   */
  deprecate(
    _deprecated: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  uninstall(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  /**
   * Assumes that each entity holds administration and funding roles in the root domain
   * Completes a colony payment in a single transaction
   * @param _amounts amounts of the tokens being paid out
   * @param _callerChildSkillIndex Index of the _callerPermissionDomainId skill.children array to get
   * @param _callerPermissionDomainId The domainId in which the _caller_ has the administration permission (must have funding in root)
   * @param _childSkillIndex Index of the _permissionDomainId skill.children array to get
   * @param _domainId The domainId the payment should be coming from
   * @param _permissionDomainId The domainId in which the _contract_ has permissions to add a payment and fund it
   * @param _skillId The skillId that the payment should be marked with, possibly awarding reputation in this skill.
   * @param _tokens Addresses of the tokens the payments are being made in. 0x00 for Ether.
   * @param _workers The addresses of the recipients of the payment
   */
  makePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _callerPermissionDomainId: BigNumberish,
    _callerChildSkillIndex: BigNumberish,
    _workers: string[],
    _tokens: string[],
    _amounts: BigNumberish[],
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Assumes that each entity holds administration and funding roles in the same domain,   although contract and caller can have the permissions in different domains. Payment is taken from domain funds - if the domain does not have sufficient funds, call will fail.
   * Completes a colony payment in a single transaction
   * @param _amounts The amounts of the tokens being paid out
   * @param _callerChildSkillIndex Index of the _callerPermissionDomainId skill.children array to get
   * @param _callerPermissionDomainId The domainId in which the _caller_ has permissions to add a payment and fund it
   * @param _childSkillIndex Index of the _permissionDomainId skill.children array to get
   * @param _domainId The domainId the payment should be coming from
   * @param _permissionDomainId The domainId in which the _contract_ has permissions to add a payment and fund it
   * @param _skillId The skillId that the payment should be marked with, possibly awarding reputation in this skill.
   * @param _tokens The addresses of the token the payments are being made in. 0x00 for Ether.
   * @param _workers The addresses of the recipients of the payment
   */
  makePaymentFundedFromDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _callerPermissionDomainId: BigNumberish,
    _callerChildSkillIndex: BigNumberish,
    _workers: string[],
    _tokens: string[],
    _amounts: BigNumberish[],
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ExtensionInitialised(): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;
  };

  estimate: {
    authority(): Promise<BigNumber>;

    getDeprecated(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    setAuthority(authority_: string): Promise<BigNumber>;

    setOwner(owner_: string): Promise<BigNumber>;

    identifier(): Promise<BigNumber>;

    version(): Promise<BigNumber>;

    install(_colony: string): Promise<BigNumber>;

    finishUpgrade(): Promise<BigNumber>;

    deprecate(_deprecated: boolean): Promise<BigNumber>;

    uninstall(): Promise<BigNumber>;

    makePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _callerPermissionDomainId: BigNumberish,
      _callerChildSkillIndex: BigNumberish,
      _workers: string[],
      _tokens: string[],
      _amounts: BigNumberish[],
      _domainId: BigNumberish,
      _skillId: BigNumberish
    ): Promise<BigNumber>;

    makePaymentFundedFromDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _callerPermissionDomainId: BigNumberish,
      _callerChildSkillIndex: BigNumberish,
      _workers: string[],
      _tokens: string[],
      _amounts: BigNumberish[],
      _domainId: BigNumberish,
      _skillId: BigNumberish
    ): Promise<BigNumber>;
  };
}
