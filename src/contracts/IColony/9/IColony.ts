/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ColonyDataTypes {
  export type DomainStruct = {
    skillId: BigNumberish;
    fundingPotId: BigNumberish;
    deprecated: boolean;
  };

  export type DomainStructOutput = [BigNumber, BigNumber, boolean] & {
    skillId: BigNumber;
    fundingPotId: BigNumber;
    deprecated: boolean;
  };

  export type ExpenditureStruct = {
    status: BigNumberish;
    owner: string;
    fundingPotId: BigNumberish;
    domainId: BigNumberish;
    finalizedTimestamp: BigNumberish;
    globalClaimDelay: BigNumberish;
  };

  export type ExpenditureStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    status: number;
    owner: string;
    fundingPotId: BigNumber;
    domainId: BigNumber;
    finalizedTimestamp: BigNumber;
    globalClaimDelay: BigNumber;
  };

  export type ExpenditureSlotStruct = {
    recipient: string;
    claimDelay: BigNumberish;
    payoutModifier: BigNumberish;
    skills: BigNumberish[];
  };

  export type ExpenditureSlotStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    recipient: string;
    claimDelay: BigNumber;
    payoutModifier: BigNumber;
    skills: BigNumber[];
  };

  export type PaymentStruct = {
    recipient: string;
    finalized: boolean;
    fundingPotId: BigNumberish;
    domainId: BigNumberish;
    skills: BigNumberish[];
  };

  export type PaymentStructOutput = [
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    recipient: string;
    finalized: boolean;
    fundingPotId: BigNumber;
    domainId: BigNumber;
    skills: BigNumber[];
  };

  export type RoleStruct = {
    user: string;
    rateFail: boolean;
    rating: BigNumberish;
  };

  export type RoleStructOutput = [string, boolean, number] & {
    user: string;
    rateFail: boolean;
    rating: number;
  };

  export type RewardPayoutCycleStruct = {
    reputationState: BytesLike;
    colonyWideReputation: BigNumberish;
    totalTokens: BigNumberish;
    amount: BigNumberish;
    tokenAddress: string;
    blockTimestamp: BigNumberish;
    amountRemaining: BigNumberish;
    finalized: boolean;
  };

  export type RewardPayoutCycleStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    reputationState: string;
    colonyWideReputation: BigNumber;
    totalTokens: BigNumber;
    amount: BigNumber;
    tokenAddress: string;
    blockTimestamp: BigNumber;
    amountRemaining: BigNumber;
    finalized: boolean;
  };
}

export interface IColonyInterface extends utils.Interface {
  contractName: "IColony";
  functions: {
    "approveExitRecovery()": FunctionFragment;
    "checkNotAdditionalProtectedVariable(uint256)": FunctionFragment;
    "enterRecoveryMode()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "exitRecoveryMode()": FunctionFragment;
    "getMetatransactionNonce(address)": FunctionFragment;
    "isInRecoveryMode()": FunctionFragment;
    "numRecoveryRoles()": FunctionFragment;
    "removeRecoveryRole(address)": FunctionFragment;
    "setRecoveryRole(address)": FunctionFragment;
    "setStorageSlotRecovery(uint256,bytes32)": FunctionFragment;
    "authority()": FunctionFragment;
    "owner()": FunctionFragment;
    "version()": FunctionFragment;
    "upgrade(uint256)": FunctionFragment;
    "finishUpgrade()": FunctionFragment;
    "getColonyNetwork()": FunctionFragment;
    "getToken()": FunctionFragment;
    "makeArbitraryTransaction(address,bytes)": FunctionFragment;
    "makeArbitraryTransactions(address[],bytes[],bool)": FunctionFragment;
    "makeSingleArbitraryTransaction(address,bytes)": FunctionFragment;
    "annotateTransaction(bytes32,string)": FunctionFragment;
    "setRootRole(address,bool)": FunctionFragment;
    "setArbitrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setArchitectureRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setFundingRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setAdministrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setUserRoles(uint256,uint256,address,uint256,bytes32)": FunctionFragment;
    "hasUserRole(address,uint256,uint8)": FunctionFragment;
    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)": FunctionFragment;
    "userCanSetRoles(address,uint256,uint256,uint256)": FunctionFragment;
    "getUserRoles(address,uint256)": FunctionFragment;
    "getCapabilityRoles(bytes4)": FunctionFragment;
    "emitDomainReputationReward(uint256,address,int256)": FunctionFragment;
    "emitSkillReputationReward(uint256,address,int256)": FunctionFragment;
    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)": FunctionFragment;
    "emitSkillReputationPenalty(uint256,address,int256)": FunctionFragment;
    "initialiseColony(address,address)": FunctionFragment;
    "editColony(string)": FunctionFragment;
    "bootstrapColony(address[],int256[])": FunctionFragment;
    "mintTokens(uint256)": FunctionFragment;
    "mintTokensFor(address,uint256)": FunctionFragment;
    "lockToken()": FunctionFragment;
    "unlockTokenForUser(address,uint256)": FunctionFragment;
    "registerColonyLabel(string,string)": FunctionFragment;
    "updateColonyOrbitDB(string)": FunctionFragment;
    "installExtension(bytes32,uint256)": FunctionFragment;
    "upgradeExtension(bytes32,uint256)": FunctionFragment;
    "deprecateExtension(bytes32,bool)": FunctionFragment;
    "uninstallExtension(bytes32)": FunctionFragment;
    "addDomain(uint256,uint256,uint256)": FunctionFragment;
    "editDomain(uint256,uint256,uint256,string)": FunctionFragment;
    "deprecateDomain(uint256,uint256,uint256,bool)": FunctionFragment;
    "getDomain(uint256)": FunctionFragment;
    "getDomainCount()": FunctionFragment;
    "verifyReputationProof(bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "setDefaultGlobalClaimDelay(uint256)": FunctionFragment;
    "makeExpenditure(uint256,uint256,uint256)": FunctionFragment;
    "transferExpenditure(uint256,address)": FunctionFragment;
    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)": FunctionFragment;
    "cancelExpenditure(uint256)": FunctionFragment;
    "lockExpenditure(uint256)": FunctionFragment;
    "finalizeExpenditure(uint256)": FunctionFragment;
    "setExpenditureMetadata(uint256,uint256,uint256,string)": FunctionFragment;
    "setExpenditureRecipient(uint256,uint256,address)": FunctionFragment;
    "setExpenditureRecipients(uint256,uint256[],address[])": FunctionFragment;
    "setExpenditurePayout(uint256,uint256,address,uint256)": FunctionFragment;
    "setExpenditurePayouts(uint256,uint256[],address,uint256[])": FunctionFragment;
    "setExpenditureSkill(uint256,uint256,uint256)": FunctionFragment;
    "setExpenditureSkills(uint256,uint256[],uint256[])": FunctionFragment;
    "setExpenditureClaimDelay(uint256,uint256,uint256)": FunctionFragment;
    "setExpenditureClaimDelays(uint256,uint256[],uint256[])": FunctionFragment;
    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])": FunctionFragment;
    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)": FunctionFragment;
    "claimExpenditurePayout(uint256,uint256,address)": FunctionFragment;
    "getExpenditureCount()": FunctionFragment;
    "getExpenditure(uint256)": FunctionFragment;
    "getExpenditureSlot(uint256,uint256)": FunctionFragment;
    "getExpenditureSlotPayout(uint256,uint256,address)": FunctionFragment;
    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)": FunctionFragment;
    "finalizePayment(uint256,uint256,uint256)": FunctionFragment;
    "setPaymentRecipient(uint256,uint256,uint256,address)": FunctionFragment;
    "setPaymentSkill(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPaymentPayout(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getPayment(uint256)": FunctionFragment;
    "claimPayment(uint256,address)": FunctionFragment;
    "getPaymentCount()": FunctionFragment;
    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getTaskCount()": FunctionFragment;
    "getTaskChangeNonce(uint256)": FunctionFragment;
    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": FunctionFragment;
    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": FunctionFragment;
    "submitTaskWorkRating(uint256,uint8,bytes32)": FunctionFragment;
    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)": FunctionFragment;
    "generateSecret(bytes32,uint256)": FunctionFragment;
    "getTaskWorkRatingSecretsInfo(uint256)": FunctionFragment;
    "getTaskWorkRatingSecret(uint256,uint8)": FunctionFragment;
    "setTaskManagerRole(uint256,address,uint256,uint256)": FunctionFragment;
    "setTaskEvaluatorRole(uint256,address)": FunctionFragment;
    "setTaskWorkerRole(uint256,address)": FunctionFragment;
    "removeTaskEvaluatorRole(uint256)": FunctionFragment;
    "removeTaskWorkerRole(uint256)": FunctionFragment;
    "setTaskSkill(uint256,uint256)": FunctionFragment;
    "setTaskBrief(uint256,bytes32)": FunctionFragment;
    "setTaskDueDate(uint256,uint256)": FunctionFragment;
    "submitTaskDeliverable(uint256,bytes32)": FunctionFragment;
    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)": FunctionFragment;
    "finalizeTask(uint256)": FunctionFragment;
    "cancelTask(uint256)": FunctionFragment;
    "completeTask(uint256)": FunctionFragment;
    "getTask(uint256)": FunctionFragment;
    "getTaskRole(uint256,uint8)": FunctionFragment;
    "setRewardInverse(uint256)": FunctionFragment;
    "getRewardInverse()": FunctionFragment;
    "getTaskPayout(uint256,uint8,address)": FunctionFragment;
    "setTaskManagerPayout(uint256,address,uint256)": FunctionFragment;
    "setTaskEvaluatorPayout(uint256,address,uint256)": FunctionFragment;
    "setTaskWorkerPayout(uint256,address,uint256)": FunctionFragment;
    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "claimTaskPayout(uint256,uint8,address)": FunctionFragment;
    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "getRewardPayoutInfo(uint256)": FunctionFragment;
    "finalizeRewardPayout(uint256)": FunctionFragment;
    "getFundingPot(uint256)": FunctionFragment;
    "getFundingPotCount()": FunctionFragment;
    "getFundingPotBalance(uint256,address)": FunctionFragment;
    "getFundingPotPayout(uint256,address)": FunctionFragment;
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "claimColonyFunds(address)": FunctionFragment;
    "getNonRewardPotsTotal(address)": FunctionFragment;
    "approveStake(address,uint256,uint256)": FunctionFragment;
    "obligateStake(address,uint256,uint256)": FunctionFragment;
    "deobligateStake(address,uint256,uint256)": FunctionFragment;
    "transferStake(uint256,uint256,address,address,uint256,uint256,address)": FunctionFragment;
    "getApproval(address,address,uint256)": FunctionFragment;
    "getObligation(address,address,uint256)": FunctionFragment;
    "getDomainFromFundingPot(uint256)": FunctionFragment;
    "burnTokens(address,uint256)": FunctionFragment;
    "unlockToken()": FunctionFragment;
    "updateApprovalAmount(address,address)": FunctionFragment;
    "getTokenApproval(address,address)": FunctionFragment;
    "getTotalTokenApproval(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveExitRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkNotAdditionalProtectedVariable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetatransactionNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numRecoveryRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageSlotRecovery",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getColonyNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeArbitraryTransaction",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeArbitraryTransactions",
    values: [string[], BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSingleArbitraryTransaction",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "annotateTransaction",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootRole",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrationRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArchitectureRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdministrationRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRoles",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserRole",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInheritedUserRole",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCanSetRoles",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapabilityRoles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDomainReputationReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSkillReputationReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDomainReputationPenalty",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSkillReputationPenalty",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseColony",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "editColony", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bootstrapColony",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokensFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlockTokenForUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerColonyLabel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateColonyOrbitDB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "installExtension",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeExtension",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateExtension",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallExtension",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addDomain",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editDomain",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateDomain",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReputationProof",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultGlobalClaimDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeExpenditure",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExpenditure",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExpenditureViaArbitration",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExpenditure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockExpenditure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeExpenditure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureMetadata",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureRecipient",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureRecipients",
    values: [BigNumberish, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditurePayout",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditurePayouts",
    values: [BigNumberish, BigNumberish[], string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureSkill",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureSkills",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureClaimDelay",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureClaimDelays",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditurePayoutModifiers",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpenditureState",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExpenditurePayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditureCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditureSlot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenditureSlotPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPayment",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePayment",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentRecipient",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentSkill",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentPayout",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeTask",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskChangeNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTaskChange",
    values: [
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTaskRoleAssignment",
    values: [
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskWorkRating",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealTaskWorkRating",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSecret",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskWorkRatingSecretsInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskWorkRatingSecret",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskManagerRole",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskEvaluatorRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskWorkerRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTaskEvaluatorRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTaskWorkerRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskSkill",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskBrief",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskDueDate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskDeliverable",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskDeliverableAndRating",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskRole",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardInverse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardInverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskManagerPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskEvaluatorPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskWorkerPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllTaskPayouts",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTaskPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startNextRewardPayout",
    values: [string, BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardPayout",
    values: [
      BigNumberish,
      BigNumberish[],
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPayoutInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRewardPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotPayout",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveFundsBetweenPots",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimColonyFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonRewardPotsTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveStake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "obligateStake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deobligateStake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStake",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproval",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getObligation",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainFromFundingPot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateApprovalAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenApproval",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenApproval",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveExitRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNotAdditionalProtectedVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetatransactionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRecoveryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageSlotRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColonyNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeArbitraryTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeArbitraryTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSingleArbitraryTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "annotateTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRootRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrationRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArchitectureRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdministrationRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInheritedUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCanSetRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapabilityRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDomainReputationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitSkillReputationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDomainReputationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitSkillReputationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialiseColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editColony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintTokensFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokenForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerColonyLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateColonyOrbitDB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDomain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deprecateDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReputationProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultGlobalClaimDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeExpenditure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExpenditure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExpenditureViaArbitration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExpenditure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockExpenditure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeExpenditure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditurePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditurePayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureSkills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureClaimDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureClaimDelays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditurePayoutModifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpenditureState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExpenditurePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditureCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditureSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenditureSlotPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskChangeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTaskChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTaskRoleAssignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskWorkRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealTaskWorkRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskWorkRatingSecretsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskWorkRatingSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskManagerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskEvaluatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTaskEvaluatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTaskWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskBrief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskDueDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskDeliverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskDeliverableAndRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskManagerPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskEvaluatorPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskWorkerPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllTaskPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTaskPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNextRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPayoutInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveFundsBetweenPots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimColonyFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonRewardPotsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "obligateStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deobligateStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getObligation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainFromFundingPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApprovalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenApproval",
    data: BytesLike
  ): Result;

  events: {
    "Annotation(address,bytes32,string)": EventFragment;
    "ArbitraryReputationUpdate(address,address,uint256,int256)": EventFragment;
    "ColonyBootstrapped(address,address[],int256[])": EventFragment;
    "ColonyFundsClaimed(address,address,uint256,uint256)": EventFragment;
    "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)": EventFragment;
    "ColonyInitialised(address,address,address)": EventFragment;
    "ColonyMetadata(address,string)": EventFragment;
    "ColonyRewardInverseSet(address,uint256)": EventFragment;
    "ColonyRoleSet(address,address,uint256,uint8,bool)": EventFragment;
    "ColonyUpgraded(address,uint256,uint256)": EventFragment;
    "DomainAdded(address,uint256)": EventFragment;
    "DomainDeprecated(address,uint256,bool)": EventFragment;
    "DomainMetadata(address,uint256,string)": EventFragment;
    "ExpenditureAdded(address,uint256)": EventFragment;
    "ExpenditureCancelled(address,uint256)": EventFragment;
    "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)": EventFragment;
    "ExpenditureFinalized(address,uint256)": EventFragment;
    "ExpenditureGlobalClaimDelaySet(address,uint256)": EventFragment;
    "ExpenditureLocked(address,uint256)": EventFragment;
    "ExpenditureMetadataSet(address,uint256,string)": EventFragment;
    "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)": EventFragment;
    "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)": EventFragment;
    "ExpenditureRecipientSet(address,uint256,uint256,address)": EventFragment;
    "ExpenditureSkillSet(address,uint256,uint256,uint256)": EventFragment;
    "ExpenditureTransferred(address,uint256,address)": EventFragment;
    "FundingPotAdded(uint256)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "PaymentAdded(address,uint256)": EventFragment;
    "PaymentFinalized(address,uint256)": EventFragment;
    "PaymentPayoutSet(address,uint256,address,uint256)": EventFragment;
    "PaymentRecipientSet(address,uint256,address)": EventFragment;
    "PaymentSkillSet(address,uint256,uint256)": EventFragment;
    "PayoutClaimed(address,uint256,address,uint256)": EventFragment;
    "RecoveryModeEntered(address)": EventFragment;
    "RecoveryModeExitApproved(address)": EventFragment;
    "RecoveryModeExited(address)": EventFragment;
    "RecoveryRoleSet(address,bool)": EventFragment;
    "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": EventFragment;
    "RewardPayoutClaimed(uint256,address,uint256,uint256)": EventFragment;
    "RewardPayoutCycleEnded(address,uint256)": EventFragment;
    "RewardPayoutCycleStarted(address,uint256)": EventFragment;
    "TaskAdded(address,uint256)": EventFragment;
    "TaskBriefSet(uint256,bytes32)": EventFragment;
    "TaskCanceled(uint256)": EventFragment;
    "TaskChangedViaSignatures(address[])": EventFragment;
    "TaskCompleted(address,uint256)": EventFragment;
    "TaskDeliverableSubmitted(address,uint256,bytes32)": EventFragment;
    "TaskDueDateSet(uint256,uint256)": EventFragment;
    "TaskFinalized(address,uint256)": EventFragment;
    "TaskPayoutSet(uint256,uint8,address,uint256)": EventFragment;
    "TaskRoleUserSet(uint256,uint8,address)": EventFragment;
    "TaskSkillSet(uint256,uint256)": EventFragment;
    "TaskWorkRatingRevealed(address,uint256,uint8,uint8)": EventFragment;
    "TokenUnlocked()": EventFragment;
    "TokensBurned(address,address,uint256)": EventFragment;
    "TokensMinted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Annotation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArbitraryReputationUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyBootstrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyFundsClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ColonyFundsMovedBetweenFundingPots"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRewardInverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureClaimDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureFinalized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpenditureGlobalClaimDelaySet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureMetadataSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpenditurePayoutModifierSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditurePayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpenditureTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingPotAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentPayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryModeExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskBriefSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskChangedViaSignatures"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDeliverableSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDueDateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskPayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRoleUserSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskWorkRatingRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensMinted"): EventFragment;
}

export type AnnotationEvent = TypedEvent<
  [string, string, string],
  { agent: string; txHash: string; metadata: string }
>;

export type AnnotationEventFilter = TypedEventFilter<AnnotationEvent>;

export type ArbitraryReputationUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { agent: string; user: string; skillId: BigNumber; amount: BigNumber }
>;

export type ArbitraryReputationUpdateEventFilter =
  TypedEventFilter<ArbitraryReputationUpdateEvent>;

export type ColonyBootstrappedEvent = TypedEvent<
  [string, string[], BigNumber[]],
  { agent: string; users: string[]; amounts: BigNumber[] }
>;

export type ColonyBootstrappedEventFilter =
  TypedEventFilter<ColonyBootstrappedEvent>;

export type ColonyFundsClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { agent: string; token: string; fee: BigNumber; payoutRemainder: BigNumber }
>;

export type ColonyFundsClaimedEventFilter =
  TypedEventFilter<ColonyFundsClaimedEvent>;

export type ColonyFundsMovedBetweenFundingPotsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  {
    agent: string;
    fromPot: BigNumber;
    toPot: BigNumber;
    amount: BigNumber;
    token: string;
  }
>;

export type ColonyFundsMovedBetweenFundingPotsEventFilter =
  TypedEventFilter<ColonyFundsMovedBetweenFundingPotsEvent>;

export type ColonyInitialisedEvent = TypedEvent<
  [string, string, string],
  { agent: string; colonyNetwork: string; token: string }
>;

export type ColonyInitialisedEventFilter =
  TypedEventFilter<ColonyInitialisedEvent>;

export type ColonyMetadataEvent = TypedEvent<
  [string, string],
  { agent: string; metadata: string }
>;

export type ColonyMetadataEventFilter = TypedEventFilter<ColonyMetadataEvent>;

export type ColonyRewardInverseSetEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; rewardInverse: BigNumber }
>;

export type ColonyRewardInverseSetEventFilter =
  TypedEventFilter<ColonyRewardInverseSetEvent>;

export type ColonyRoleSetEvent = TypedEvent<
  [string, string, BigNumber, number, boolean],
  {
    agent: string;
    user: string;
    domainId: BigNumber;
    role: number;
    setTo: boolean;
  }
>;

export type ColonyRoleSetEventFilter = TypedEventFilter<ColonyRoleSetEvent>;

export type ColonyUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { agent: string; oldVersion: BigNumber; newVersion: BigNumber }
>;

export type ColonyUpgradedEventFilter = TypedEventFilter<ColonyUpgradedEvent>;

export type DomainAddedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; domainId: BigNumber }
>;

export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;

export type DomainDeprecatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  { agent: string; domainId: BigNumber; deprecated: boolean }
>;

export type DomainDeprecatedEventFilter =
  TypedEventFilter<DomainDeprecatedEvent>;

export type DomainMetadataEvent = TypedEvent<
  [string, BigNumber, string],
  { agent: string; domainId: BigNumber; metadata: string }
>;

export type DomainMetadataEventFilter = TypedEventFilter<DomainMetadataEvent>;

export type ExpenditureAddedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; expenditureId: BigNumber }
>;

export type ExpenditureAddedEventFilter =
  TypedEventFilter<ExpenditureAddedEvent>;

export type ExpenditureCancelledEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; expenditureId: BigNumber }
>;

export type ExpenditureCancelledEventFilter =
  TypedEventFilter<ExpenditureCancelledEvent>;

export type ExpenditureClaimDelaySetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    claimDelay: BigNumber;
  }
>;

export type ExpenditureClaimDelaySetEventFilter =
  TypedEventFilter<ExpenditureClaimDelaySetEvent>;

export type ExpenditureFinalizedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; expenditureId: BigNumber }
>;

export type ExpenditureFinalizedEventFilter =
  TypedEventFilter<ExpenditureFinalizedEvent>;

export type ExpenditureGlobalClaimDelaySetEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; globalClaimDelay: BigNumber }
>;

export type ExpenditureGlobalClaimDelaySetEventFilter =
  TypedEventFilter<ExpenditureGlobalClaimDelaySetEvent>;

export type ExpenditureLockedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; expenditureId: BigNumber }
>;

export type ExpenditureLockedEventFilter =
  TypedEventFilter<ExpenditureLockedEvent>;

export type ExpenditureMetadataSetEvent = TypedEvent<
  [string, BigNumber, string],
  { agent: string; expenditureId: BigNumber; metadata: string }
>;

export type ExpenditureMetadataSetEventFilter =
  TypedEventFilter<ExpenditureMetadataSetEvent>;

export type ExpenditurePayoutModifierSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    payoutModifier: BigNumber;
  }
>;

export type ExpenditurePayoutModifierSetEventFilter =
  TypedEventFilter<ExpenditurePayoutModifierSetEvent>;

export type ExpenditurePayoutSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    token: string;
    amount: BigNumber;
  }
>;

export type ExpenditurePayoutSetEventFilter =
  TypedEventFilter<ExpenditurePayoutSetEvent>;

export type ExpenditureRecipientSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    recipient: string;
  }
>;

export type ExpenditureRecipientSetEventFilter =
  TypedEventFilter<ExpenditureRecipientSetEvent>;

export type ExpenditureSkillSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    skillId: BigNumber;
  }
>;

export type ExpenditureSkillSetEventFilter =
  TypedEventFilter<ExpenditureSkillSetEvent>;

export type ExpenditureTransferredEvent = TypedEvent<
  [string, BigNumber, string],
  { agent: string; expenditureId: BigNumber; owner: string }
>;

export type ExpenditureTransferredEventFilter =
  TypedEventFilter<ExpenditureTransferredEvent>;

export type FundingPotAddedEvent = TypedEvent<
  [BigNumber],
  { fundingPotId: BigNumber }
>;

export type FundingPotAddedEventFilter = TypedEventFilter<FundingPotAddedEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; payload: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type PaymentAddedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; paymentId: BigNumber }
>;

export type PaymentAddedEventFilter = TypedEventFilter<PaymentAddedEvent>;

export type PaymentFinalizedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; paymentId: BigNumber }
>;

export type PaymentFinalizedEventFilter =
  TypedEventFilter<PaymentFinalizedEvent>;

export type PaymentPayoutSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { agent: string; paymentId: BigNumber; token: string; amount: BigNumber }
>;

export type PaymentPayoutSetEventFilter =
  TypedEventFilter<PaymentPayoutSetEvent>;

export type PaymentRecipientSetEvent = TypedEvent<
  [string, BigNumber, string],
  { agent: string; paymentId: BigNumber; recipient: string }
>;

export type PaymentRecipientSetEventFilter =
  TypedEventFilter<PaymentRecipientSetEvent>;

export type PaymentSkillSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { agent: string; paymentId: BigNumber; skillId: BigNumber }
>;

export type PaymentSkillSetEventFilter = TypedEventFilter<PaymentSkillSetEvent>;

export type PayoutClaimedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  { agent: string; fundingPotId: BigNumber; token: string; amount: BigNumber }
>;

export type PayoutClaimedEventFilter = TypedEventFilter<PayoutClaimedEvent>;

export type RecoveryModeEnteredEvent = TypedEvent<[string], { user: string }>;

export type RecoveryModeEnteredEventFilter =
  TypedEventFilter<RecoveryModeEnteredEvent>;

export type RecoveryModeExitApprovedEvent = TypedEvent<
  [string],
  { user: string }
>;

export type RecoveryModeExitApprovedEventFilter =
  TypedEventFilter<RecoveryModeExitApprovedEvent>;

export type RecoveryModeExitedEvent = TypedEvent<[string], { user: string }>;

export type RecoveryModeExitedEventFilter =
  TypedEventFilter<RecoveryModeExitedEvent>;

export type RecoveryRoleSetEvent = TypedEvent<
  [string, boolean],
  { user: string; setTo: boolean }
>;

export type RecoveryRoleSetEventFilter = TypedEventFilter<RecoveryRoleSetEvent>;

export type RecoveryStorageSlotSetEvent = TypedEvent<
  [string, BigNumber, string, string],
  { user: string; slot: BigNumber; fromValue: string; toValue: string }
>;

export type RecoveryStorageSlotSetEventFilter =
  TypedEventFilter<RecoveryStorageSlotSetEvent>;

export type RewardPayoutClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    rewardPayoutId: BigNumber;
    user: string;
    fee: BigNumber;
    rewardRemainder: BigNumber;
  }
>;

export type RewardPayoutClaimedEventFilter =
  TypedEventFilter<RewardPayoutClaimedEvent>;

export type RewardPayoutCycleEndedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; rewardPayoutId: BigNumber }
>;

export type RewardPayoutCycleEndedEventFilter =
  TypedEventFilter<RewardPayoutCycleEndedEvent>;

export type RewardPayoutCycleStartedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; rewardPayoutId: BigNumber }
>;

export type RewardPayoutCycleStartedEventFilter =
  TypedEventFilter<RewardPayoutCycleStartedEvent>;

export type TaskAddedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; taskId: BigNumber }
>;

export type TaskAddedEventFilter = TypedEventFilter<TaskAddedEvent>;

export type TaskBriefSetEvent = TypedEvent<
  [BigNumber, string],
  { taskId: BigNumber; specificationHash: string }
>;

export type TaskBriefSetEventFilter = TypedEventFilter<TaskBriefSetEvent>;

export type TaskCanceledEvent = TypedEvent<[BigNumber], { taskId: BigNumber }>;

export type TaskCanceledEventFilter = TypedEventFilter<TaskCanceledEvent>;

export type TaskChangedViaSignaturesEvent = TypedEvent<
  [string[]],
  { reviewerAddresses: string[] }
>;

export type TaskChangedViaSignaturesEventFilter =
  TypedEventFilter<TaskChangedViaSignaturesEvent>;

export type TaskCompletedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; taskId: BigNumber }
>;

export type TaskCompletedEventFilter = TypedEventFilter<TaskCompletedEvent>;

export type TaskDeliverableSubmittedEvent = TypedEvent<
  [string, BigNumber, string],
  { agent: string; taskId: BigNumber; deliverableHash: string }
>;

export type TaskDeliverableSubmittedEventFilter =
  TypedEventFilter<TaskDeliverableSubmittedEvent>;

export type TaskDueDateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { taskId: BigNumber; dueDate: BigNumber }
>;

export type TaskDueDateSetEventFilter = TypedEventFilter<TaskDueDateSetEvent>;

export type TaskFinalizedEvent = TypedEvent<
  [string, BigNumber],
  { agent: string; taskId: BigNumber }
>;

export type TaskFinalizedEventFilter = TypedEventFilter<TaskFinalizedEvent>;

export type TaskPayoutSetEvent = TypedEvent<
  [BigNumber, number, string, BigNumber],
  { taskId: BigNumber; role: number; token: string; amount: BigNumber }
>;

export type TaskPayoutSetEventFilter = TypedEventFilter<TaskPayoutSetEvent>;

export type TaskRoleUserSetEvent = TypedEvent<
  [BigNumber, number, string],
  { taskId: BigNumber; role: number; user: string }
>;

export type TaskRoleUserSetEventFilter = TypedEventFilter<TaskRoleUserSetEvent>;

export type TaskSkillSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { taskId: BigNumber; skillId: BigNumber }
>;

export type TaskSkillSetEventFilter = TypedEventFilter<TaskSkillSetEvent>;

export type TaskWorkRatingRevealedEvent = TypedEvent<
  [string, BigNumber, number, number],
  { agent: string; taskId: BigNumber; role: number; rating: number }
>;

export type TaskWorkRatingRevealedEventFilter =
  TypedEventFilter<TaskWorkRatingRevealedEvent>;

export type TokenUnlockedEvent = TypedEvent<[], {}>;

export type TokenUnlockedEventFilter = TypedEventFilter<TokenUnlockedEvent>;

export type TokensBurnedEvent = TypedEvent<
  [string, string, BigNumber],
  { agent: string; token: string; amount: BigNumber }
>;

export type TokensBurnedEventFilter = TypedEventFilter<TokensBurnedEvent>;

export type TokensMintedEvent = TypedEvent<
  [string, string, BigNumber],
  { agent: string; who: string; amount: BigNumber }
>;

export type TokensMintedEventFilter = TypedEventFilter<TokensMintedEvent>;

export interface IColony extends BaseContract {
  contractName: "IColony";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IColonyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    isInRecoveryMode(
      overrides?: CallOverrides
    ): Promise<[boolean] & { inRecoveryMode: boolean }>;

    numRecoveryRoles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numRoles: BigNumber }>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyAuthority: string }>;

    owner(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyOwner: string }>;

    version(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { colonyVersion: BigNumber }>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getColonyNetwork(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyNetwork: string }>;

    getToken(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenAddress: string }>;

    makeArbitraryTransaction(
      _to: string,
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: BytesLike[],
      _strict: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    annotateTransaction(
      _txHash: BytesLike,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasRole: boolean }>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasRole: boolean }>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { canSet: boolean }>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { roles: string }>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { roles: string }>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editColony(
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyDataTypes.DomainStructOutput] & {
        domain: ColonyDataTypes.DomainStructOutput;
      }
    >;

    getDomainCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: BytesLike[],
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExpenditureCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyDataTypes.ExpenditureStructOutput] & {
        expenditure: ColonyDataTypes.ExpenditureStructOutput;
      }
    >;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyDataTypes.ExpenditureSlotStructOutput] & {
        expenditureSlot: ColonyDataTypes.ExpenditureSlotStructOutput;
      }
    >;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyDataTypes.PaymentStructOutput] & {
        payment: ColonyDataTypes.PaymentStructOutput;
      }
    >;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPaymentCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTaskCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { secret: string }>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { secret: string }>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyDataTypes.RoleStructOutput] & {
        role: ColonyDataTypes.RoleStructOutput;
      }
    >;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardInverse(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardInverse: BigNumber }>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ColonyDataTypes.RewardPayoutCycleStructOutput] & {
        rewardPayoutCycle: ColonyDataTypes.RewardPayoutCycleStructOutput;
      }
    >;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    getFundingPotCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payout: BigNumber }>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { approval: BigNumber }>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { obligation: BigNumber }>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { domainId: BigNumber }>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getTotalTokenApproval(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  approveExitRecovery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  enterRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    payload: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMetatransactionNonce(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

  numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

  removeRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  upgrade(
    _newVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getColonyNetwork(overrides?: CallOverrides): Promise<string>;

  getToken(overrides?: CallOverrides): Promise<string>;

  makeArbitraryTransaction(
    _to: string,
    _action: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeArbitraryTransactions(
    _targets: string[],
    _actions: BytesLike[],
    _strict: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeSingleArbitraryTransaction(
    _target: string,
    _action: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  annotateTransaction(
    _txHash: BytesLike,
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserRoles(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasInheritedUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userCanSetRoles(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserRoles(
    _user: string,
    _domain: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCapabilityRoles(
    _sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  emitDomainReputationReward(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitSkillReputationReward(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitDomainReputationPenalty(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitSkillReputationPenalty(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editColony(
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTokens(
    _wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTokensFor(
    _guy: string,
    _wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokenForUser(
    user: string,
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  installExtension(
    extensionId: BytesLike,
    version: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeExtension(
    extensionId: BytesLike,
    newVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateExtension(
    extensionId: BytesLike,
    deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uninstallExtension(
    extensionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDomain(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _deprecated: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDomain(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyDataTypes.DomainStructOutput>;

  getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

  verifyReputationProof(
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDefaultGlobalClaimDelay(
    _globalClaimDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeExpenditure(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferExpenditure(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferExpenditureViaArbitration(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelExpenditure(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockExpenditure(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeExpenditure(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExpenditureMetadata(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExpenditureMetadata(uint256,string)"(
    _id: BigNumberish,
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureRecipient(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureRecipients(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditurePayouts(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureSkill(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureSkills(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelay(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelays(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditurePayoutModifiers(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpenditureState(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: BytesLike[],
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExpenditureCount(overrides?: CallOverrides): Promise<BigNumber>;

  getExpenditure(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyDataTypes.ExpenditureStructOutput>;

  getExpenditureSlot(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyDataTypes.ExpenditureSlotStructOutput>;

  getExpenditureSlotPayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addPayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentRecipient(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentSkill(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentPayout(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPayment(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyDataTypes.PaymentStructOutput>;

  claimPayment(
    _id: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

  makeTask(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: BytesLike,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTaskChangeNonce(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeTaskChange(
    _sigV: BigNumberish[],
    _sigR: BytesLike[],
    _sigS: BytesLike[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeTaskRoleAssignment(
    _sigV: BigNumberish[],
    _sigR: BytesLike[],
    _sigS: BytesLike[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateSecret(
    _salt: BytesLike,
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setTaskManagerRole(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskEvaluatorRole(
    _id: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskWorkerRole(
    _id: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTaskEvaluatorRole(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTaskWorkerRole(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskSkill(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskBrief(
    _id: BigNumberish,
    _specificationHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskDueDate(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskDeliverable(
    _id: BigNumberish,
    _deliverableHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskDeliverableAndRating(
    _id: BigNumberish,
    _deliverableHash: BytesLike,
    _ratingSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTask(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyDataTypes.RoleStructOutput>;

  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

  getTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setTaskManagerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskEvaluatorPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskWorkerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllTaskPayouts(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNextRewardPayout(
    _token: string,
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardPayoutInfo(
    _payoutId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ColonyDataTypes.RewardPayoutCycleStructOutput>;

  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFundingPot(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingPotPayout(
    _potId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimColonyFunds(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonRewardPotsTotal(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approveStake(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  obligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deobligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferStake(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproval(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getObligation(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDomainFromFundingPot(
    _fundingPotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnTokens(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateApprovalAmount(
    token: string,
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenApproval(
    token: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTokenApproval(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    approveExitRecovery(overrides?: CallOverrides): Promise<void>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterRecoveryMode(overrides?: CallOverrides): Promise<void>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    exitRecoveryMode(overrides?: CallOverrides): Promise<void>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    setRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finishUpgrade(overrides?: CallOverrides): Promise<void>;

    getColonyNetwork(overrides?: CallOverrides): Promise<string>;

    getToken(overrides?: CallOverrides): Promise<string>;

    makeArbitraryTransaction(
      _to: string,
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: BytesLike[],
      _strict: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    annotateTransaction(
      _txHash: BytesLike,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editColony(_metadata: string, overrides?: CallOverrides): Promise<void>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintTokens(_wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockToken(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecateDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyDataTypes.DomainStructOutput>;

    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: BytesLike[],
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getExpenditureCount(overrides?: CallOverrides): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyDataTypes.ExpenditureStructOutput>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyDataTypes.ExpenditureSlotStructOutput>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyDataTypes.PaymentStructOutput>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyDataTypes.RoleStructOutput>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ColonyDataTypes.RewardPayoutCycleStructOutput>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimColonyFunds(_token: string, overrides?: CallOverrides): Promise<void>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockToken(overrides?: CallOverrides): Promise<void>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenApproval(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Annotation(address,bytes32,string)"(
      agent?: string | null,
      txHash?: BytesLike | null,
      metadata?: null
    ): AnnotationEventFilter;
    Annotation(
      agent?: string | null,
      txHash?: BytesLike | null,
      metadata?: null
    ): AnnotationEventFilter;

    "ArbitraryReputationUpdate(address,address,uint256,int256)"(
      agent?: null,
      user?: null,
      skillId?: null,
      amount?: null
    ): ArbitraryReputationUpdateEventFilter;
    ArbitraryReputationUpdate(
      agent?: null,
      user?: null,
      skillId?: null,
      amount?: null
    ): ArbitraryReputationUpdateEventFilter;

    "ColonyBootstrapped(address,address[],int256[])"(
      agent?: null,
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;
    ColonyBootstrapped(
      agent?: null,
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;

    "ColonyFundsClaimed(address,address,uint256,uint256)"(
      agent?: null,
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;
    ColonyFundsClaimed(
      agent?: null,
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;

    "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)"(
      agent?: null,
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;
    ColonyFundsMovedBetweenFundingPots(
      agent?: null,
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;

    "ColonyInitialised(address,address,address)"(
      agent?: null,
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;
    ColonyInitialised(
      agent?: null,
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;

    "ColonyMetadata(address,string)"(
      agent?: null,
      metadata?: null
    ): ColonyMetadataEventFilter;
    ColonyMetadata(agent?: null, metadata?: null): ColonyMetadataEventFilter;

    "ColonyRewardInverseSet(address,uint256)"(
      agent?: null,
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;
    ColonyRewardInverseSet(
      agent?: null,
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;

    "ColonyRoleSet(address,address,uint256,uint8,bool)"(
      agent?: null,
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;
    ColonyRoleSet(
      agent?: null,
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;

    "ColonyUpgraded(address,uint256,uint256)"(
      agent?: null,
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;
    ColonyUpgraded(
      agent?: null,
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;

    "DomainAdded(address,uint256)"(
      agent?: null,
      domainId?: null
    ): DomainAddedEventFilter;
    DomainAdded(agent?: null, domainId?: null): DomainAddedEventFilter;

    "DomainDeprecated(address,uint256,bool)"(
      agent?: null,
      domainId?: BigNumberish | null,
      deprecated?: null
    ): DomainDeprecatedEventFilter;
    DomainDeprecated(
      agent?: null,
      domainId?: BigNumberish | null,
      deprecated?: null
    ): DomainDeprecatedEventFilter;

    "DomainMetadata(address,uint256,string)"(
      agent?: null,
      domainId?: BigNumberish | null,
      metadata?: null
    ): DomainMetadataEventFilter;
    DomainMetadata(
      agent?: null,
      domainId?: BigNumberish | null,
      metadata?: null
    ): DomainMetadataEventFilter;

    "ExpenditureAdded(address,uint256)"(
      agent?: null,
      expenditureId?: null
    ): ExpenditureAddedEventFilter;
    ExpenditureAdded(
      agent?: null,
      expenditureId?: null
    ): ExpenditureAddedEventFilter;

    "ExpenditureCancelled(address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureCancelledEventFilter;
    ExpenditureCancelled(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureCancelledEventFilter;

    "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      claimDelay?: null
    ): ExpenditureClaimDelaySetEventFilter;
    ExpenditureClaimDelaySet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      claimDelay?: null
    ): ExpenditureClaimDelaySetEventFilter;

    "ExpenditureFinalized(address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureFinalizedEventFilter;
    ExpenditureFinalized(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureFinalizedEventFilter;

    "ExpenditureGlobalClaimDelaySet(address,uint256)"(
      agent?: null,
      globalClaimDelay?: null
    ): ExpenditureGlobalClaimDelaySetEventFilter;
    ExpenditureGlobalClaimDelaySet(
      agent?: null,
      globalClaimDelay?: null
    ): ExpenditureGlobalClaimDelaySetEventFilter;

    "ExpenditureLocked(address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureLockedEventFilter;
    ExpenditureLocked(
      agent?: null,
      expenditureId?: BigNumberish | null
    ): ExpenditureLockedEventFilter;

    "ExpenditureMetadataSet(address,uint256,string)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      metadata?: null
    ): ExpenditureMetadataSetEventFilter;
    ExpenditureMetadataSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      metadata?: null
    ): ExpenditureMetadataSetEventFilter;

    "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      payoutModifier?: null
    ): ExpenditurePayoutModifierSetEventFilter;
    ExpenditurePayoutModifierSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      payoutModifier?: null
    ): ExpenditurePayoutModifierSetEventFilter;

    "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): ExpenditurePayoutSetEventFilter;
    ExpenditurePayoutSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      token?: string | null,
      amount?: null
    ): ExpenditurePayoutSetEventFilter;

    "ExpenditureRecipientSet(address,uint256,uint256,address)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      recipient?: string | null
    ): ExpenditureRecipientSetEventFilter;
    ExpenditureRecipientSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      recipient?: string | null
    ): ExpenditureRecipientSetEventFilter;

    "ExpenditureSkillSet(address,uint256,uint256,uint256)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): ExpenditureSkillSetEventFilter;
    ExpenditureSkillSet(
      agent?: null,
      expenditureId?: BigNumberish | null,
      slot?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): ExpenditureSkillSetEventFilter;

    "ExpenditureTransferred(address,uint256,address)"(
      agent?: null,
      expenditureId?: BigNumberish | null,
      owner?: string | null
    ): ExpenditureTransferredEventFilter;
    ExpenditureTransferred(
      agent?: null,
      expenditureId?: BigNumberish | null,
      owner?: string | null
    ): ExpenditureTransferredEventFilter;

    "FundingPotAdded(uint256)"(fundingPotId?: null): FundingPotAddedEventFilter;
    FundingPotAdded(fundingPotId?: null): FundingPotAddedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      payload?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      payload?: null
    ): MetaTransactionExecutedEventFilter;

    "PaymentAdded(address,uint256)"(
      agent?: null,
      paymentId?: null
    ): PaymentAddedEventFilter;
    PaymentAdded(agent?: null, paymentId?: null): PaymentAddedEventFilter;

    "PaymentFinalized(address,uint256)"(
      agent?: null,
      paymentId?: BigNumberish | null
    ): PaymentFinalizedEventFilter;
    PaymentFinalized(
      agent?: null,
      paymentId?: BigNumberish | null
    ): PaymentFinalizedEventFilter;

    "PaymentPayoutSet(address,uint256,address,uint256)"(
      agent?: null,
      paymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PaymentPayoutSetEventFilter;
    PaymentPayoutSet(
      agent?: null,
      paymentId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PaymentPayoutSetEventFilter;

    "PaymentRecipientSet(address,uint256,address)"(
      agent?: null,
      paymentId?: BigNumberish | null,
      recipient?: null
    ): PaymentRecipientSetEventFilter;
    PaymentRecipientSet(
      agent?: null,
      paymentId?: BigNumberish | null,
      recipient?: null
    ): PaymentRecipientSetEventFilter;

    "PaymentSkillSet(address,uint256,uint256)"(
      agent?: null,
      paymentId?: BigNumberish | null,
      skillId?: null
    ): PaymentSkillSetEventFilter;
    PaymentSkillSet(
      agent?: null,
      paymentId?: BigNumberish | null,
      skillId?: null
    ): PaymentSkillSetEventFilter;

    "PayoutClaimed(address,uint256,address,uint256)"(
      agent?: null,
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimedEventFilter;
    PayoutClaimed(
      agent?: null,
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimedEventFilter;

    "RecoveryModeEntered(address)"(user?: null): RecoveryModeEnteredEventFilter;
    RecoveryModeEntered(user?: null): RecoveryModeEnteredEventFilter;

    "RecoveryModeExitApproved(address)"(
      user?: null
    ): RecoveryModeExitApprovedEventFilter;
    RecoveryModeExitApproved(user?: null): RecoveryModeExitApprovedEventFilter;

    "RecoveryModeExited(address)"(user?: null): RecoveryModeExitedEventFilter;
    RecoveryModeExited(user?: null): RecoveryModeExitedEventFilter;

    "RecoveryRoleSet(address,bool)"(
      user?: string | null,
      setTo?: null
    ): RecoveryRoleSetEventFilter;
    RecoveryRoleSet(
      user?: string | null,
      setTo?: null
    ): RecoveryRoleSetEventFilter;

    "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"(
      user?: null,
      slot?: null,
      fromValue?: null,
      toValue?: null
    ): RecoveryStorageSlotSetEventFilter;
    RecoveryStorageSlotSet(
      user?: null,
      slot?: null,
      fromValue?: null,
      toValue?: null
    ): RecoveryStorageSlotSetEventFilter;

    "RewardPayoutClaimed(uint256,address,uint256,uint256)"(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;
    RewardPayoutClaimed(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;

    "RewardPayoutCycleEnded(address,uint256)"(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;
    RewardPayoutCycleEnded(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;

    "RewardPayoutCycleStarted(address,uint256)"(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;
    RewardPayoutCycleStarted(
      agent?: null,
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;

    "TaskAdded(address,uint256)"(
      agent?: null,
      taskId?: null
    ): TaskAddedEventFilter;
    TaskAdded(agent?: null, taskId?: null): TaskAddedEventFilter;

    "TaskBriefSet(uint256,bytes32)"(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;
    TaskBriefSet(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;

    "TaskCanceled(uint256)"(
      taskId?: BigNumberish | null
    ): TaskCanceledEventFilter;
    TaskCanceled(taskId?: BigNumberish | null): TaskCanceledEventFilter;

    "TaskChangedViaSignatures(address[])"(
      reviewerAddresses?: null
    ): TaskChangedViaSignaturesEventFilter;
    TaskChangedViaSignatures(
      reviewerAddresses?: null
    ): TaskChangedViaSignaturesEventFilter;

    "TaskCompleted(address,uint256)"(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskCompletedEventFilter;
    TaskCompleted(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskCompletedEventFilter;

    "TaskDeliverableSubmitted(address,uint256,bytes32)"(
      agent?: null,
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;
    TaskDeliverableSubmitted(
      agent?: null,
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;

    "TaskDueDateSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;
    TaskDueDateSet(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;

    "TaskFinalized(address,uint256)"(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskFinalizedEventFilter;
    TaskFinalized(
      agent?: null,
      taskId?: BigNumberish | null
    ): TaskFinalizedEventFilter;

    "TaskPayoutSet(uint256,uint8,address,uint256)"(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;
    TaskPayoutSet(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;

    "TaskRoleUserSet(uint256,uint8,address)"(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;
    TaskRoleUserSet(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;

    "TaskSkillSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;
    TaskSkillSet(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;

    "TaskWorkRatingRevealed(address,uint256,uint8,uint8)"(
      agent?: null,
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;
    TaskWorkRatingRevealed(
      agent?: null,
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;

    "TokenUnlocked()"(): TokenUnlockedEventFilter;
    TokenUnlocked(): TokenUnlockedEventFilter;

    "TokensBurned(address,address,uint256)"(
      agent?: null,
      token?: null,
      amount?: null
    ): TokensBurnedEventFilter;
    TokensBurned(
      agent?: null,
      token?: null,
      amount?: null
    ): TokensBurnedEventFilter;

    "TokensMinted(address,address,uint256)"(
      agent?: null,
      who?: null,
      amount?: null
    ): TokensMintedEventFilter;
    TokensMinted(
      agent?: null,
      who?: null,
      amount?: null
    ): TokensMintedEventFilter;
  };

  estimateGas: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getColonyNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    makeArbitraryTransaction(
      _to: string,
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: BytesLike[],
      _strict: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    annotateTransaction(
      _txHash: BytesLike,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editColony(
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: BytesLike[],
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExpenditureCount(overrides?: CallOverrides): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenApproval(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      payload: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getColonyNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeArbitraryTransaction(
      _to: string,
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: BytesLike[],
      _strict: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    annotateTransaction(
      _txHash: BytesLike,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCapabilityRoles(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editColony(
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    installExtension(
      extensionId: BytesLike,
      version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeExtension(
      extensionId: BytesLike,
      newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateExtension(
      extensionId: BytesLike,
      deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uninstallExtension(
      extensionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _deprecated: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: BytesLike[],
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExpenditureCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTaskCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardInverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingPotCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenApproval(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
