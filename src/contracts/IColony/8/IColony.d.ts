/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface IColonyInterface extends Interface {
  functions: {
    approveExitRecovery: TypedFunctionDescription<{ encode([]: []): string }>;

    checkNotAdditionalProtectedVariable: TypedFunctionDescription<{
      encode([_slot]: [BigNumberish]): string;
    }>;

    enterRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    exitRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    isInRecoveryMode: TypedFunctionDescription<{ encode([]: []): string }>;

    numRecoveryRoles: TypedFunctionDescription<{ encode([]: []): string }>;

    removeRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setRecoveryRole: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setStorageSlotRecovery: TypedFunctionDescription<{
      encode([_slot, _value]: [BigNumberish, Arrayish]): string;
    }>;

    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    upgrade: TypedFunctionDescription<{
      encode([_newVersion]: [BigNumberish]): string;
    }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    getColonyNetwork: TypedFunctionDescription<{ encode([]: []): string }>;

    getToken: TypedFunctionDescription<{ encode([]: []): string }>;

    makeArbitraryTransaction: TypedFunctionDescription<{
      encode([_to, _action]: [string, Arrayish]): string;
    }>;

    makeArbitraryTransactions: TypedFunctionDescription<{
      encode([_targets, _actions, _strict]: [
        string[],
        Arrayish[],
        boolean
      ]): string;
    }>;

    makeSingleArbitraryTransaction: TypedFunctionDescription<{
      encode([_target, _action]: [string, Arrayish]): string;
    }>;

    annotateTransaction: TypedFunctionDescription<{
      encode([_txHash, _metadata]: [Arrayish, string]): string;
    }>;

    setRootRole: TypedFunctionDescription<{
      encode([_user, _setTo]: [string, boolean]): string;
    }>;

    setArbitrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setArchitectureRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setFundingRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setAdministrationRole: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _setTo,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    }>;

    setUserRoles: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _user,
        _domainId,
        _roles,
      ]: [BigNumberish, BigNumberish, string, BigNumberish, Arrayish]): string;
    }>;

    hasUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    hasInheritedUserRole: TypedFunctionDescription<{
      encode([_user, _domainId, _role, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    userCanSetRoles: TypedFunctionDescription<{
      encode([_user, _domainId, _childSkillIndex, _childDomainId]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getUserRoles: TypedFunctionDescription<{
      encode([_user, _domain]: [string, BigNumberish]): string;
    }>;

    getCapabilityRoles: TypedFunctionDescription<{
      encode([_sig]: [Arrayish]): string;
    }>;

    emitDomainReputationReward: TypedFunctionDescription<{
      encode([_domainId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitSkillReputationReward: TypedFunctionDescription<{
      encode([_skillId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitDomainReputationPenalty: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _domainId,
        _user,
        _amount,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    emitSkillReputationPenalty: TypedFunctionDescription<{
      encode([_skillId, _user, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    initialiseColony: TypedFunctionDescription<{
      encode([_colonyNetworkAddress, _token]: [string, string]): string;
    }>;

    editColony: TypedFunctionDescription<{
      encode([_metadata]: [string]): string;
    }>;

    bootstrapColony: TypedFunctionDescription<{
      encode([_users, _amount]: [string[], BigNumberish[]]): string;
    }>;

    mintTokens: TypedFunctionDescription<{
      encode([_wad]: [BigNumberish]): string;
    }>;

    mintTokensFor: TypedFunctionDescription<{
      encode([_guy, _wad]: [string, BigNumberish]): string;
    }>;

    lockToken: TypedFunctionDescription<{ encode([]: []): string }>;

    unlockTokenForUser: TypedFunctionDescription<{
      encode([user, lockId]: [string, BigNumberish]): string;
    }>;

    registerColonyLabel: TypedFunctionDescription<{
      encode([colonyName, orbitdb]: [string, string]): string;
    }>;

    updateColonyOrbitDB: TypedFunctionDescription<{
      encode([orbitdb]: [string]): string;
    }>;

    installExtension: TypedFunctionDescription<{
      encode([extensionId, version]: [Arrayish, BigNumberish]): string;
    }>;

    upgradeExtension: TypedFunctionDescription<{
      encode([extensionId, newVersion]: [Arrayish, BigNumberish]): string;
    }>;

    deprecateExtension: TypedFunctionDescription<{
      encode([extensionId, deprecated]: [Arrayish, boolean]): string;
    }>;

    uninstallExtension: TypedFunctionDescription<{
      encode([extensionId]: [Arrayish]): string;
    }>;

    addDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _parentDomainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    editDomain: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId, _metadata]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getDomain: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getDomainCount: TypedFunctionDescription<{ encode([]: []): string }>;

    verifyReputationProof: TypedFunctionDescription<{
      encode([key, value, branchMask, siblings]: [
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    setDefaultGlobalClaimDelay: TypedFunctionDescription<{
      encode([_globalClaimDelay]: [BigNumberish]): string;
    }>;

    makeExpenditure: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _domainId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    transferExpenditure: TypedFunctionDescription<{
      encode([_id, _newOwner]: [BigNumberish, string]): string;
    }>;

    transferExpenditureViaArbitration: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _newOwner]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    cancelExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    lockExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    finalizeExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    setExpenditureMetadata: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _metadata]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditureRecipient: TypedFunctionDescription<{
      encode([_id, _slot, _recipient]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setExpenditureRecipients: TypedFunctionDescription<{
      encode([_id, _slots, _recipients]: [
        BigNumberish,
        BigNumberish[],
        string[]
      ]): string;
    }>;

    setExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setExpenditurePayouts: TypedFunctionDescription<{
      encode([_id, _slots, _token, _amounts]: [
        BigNumberish,
        BigNumberish[],
        string,
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureSkill: TypedFunctionDescription<{
      encode([_id, _slot, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureSkills: TypedFunctionDescription<{
      encode([_id, _slots, _skillIds]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureClaimDelay: TypedFunctionDescription<{
      encode([_id, _slot, _claimDelay]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setExpenditureClaimDelays: TypedFunctionDescription<{
      encode([_id, _slots, _claimDelays]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditurePayoutModifiers: TypedFunctionDescription<{
      encode([_id, _slots, _payoutModifiers]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    setExpenditureState: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _id,
        _storageSlot,
        _mask,
        _keys,
        _value,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        boolean[],
        Arrayish[],
        Arrayish
      ]): string;
    }>;

    claimExpenditurePayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getExpenditureCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getExpenditure: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getExpenditureSlot: TypedFunctionDescription<{
      encode([_id, _slot]: [BigNumberish, BigNumberish]): string;
    }>;

    getExpenditureSlotPayout: TypedFunctionDescription<{
      encode([_id, _slot, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    addPayment: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _recipient,
        _token,
        _amount,
        _domainId,
        _skillId,
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    finalizePayment: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setPaymentRecipient: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _recipient]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setPaymentSkill: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _skillId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setPaymentPayout: TypedFunctionDescription<{
      encode([_permissionDomainId, _childSkillIndex, _id, _token, _amount]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    getPayment: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    claimPayment: TypedFunctionDescription<{
      encode([_id, _token]: [BigNumberish, string]): string;
    }>;

    getPaymentCount: TypedFunctionDescription<{ encode([]: []): string }>;

    makeTask: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _specificationHash,
        _domainId,
        _skillId,
        _dueDate,
      ]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getTaskCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskChangeNonce: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    executeTaskChange: TypedFunctionDescription<{
      encode([_sigV, _sigR, _sigS, _mode, _value, _data]: [
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    executeTaskRoleAssignment: TypedFunctionDescription<{
      encode([_sigV, _sigR, _sigS, _mode, _value, _data]: [
        BigNumberish[],
        Arrayish[],
        Arrayish[],
        BigNumberish[],
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    submitTaskWorkRating: TypedFunctionDescription<{
      encode([_id, _role, _ratingSecret]: [
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    revealTaskWorkRating: TypedFunctionDescription<{
      encode([_id, _role, _rating, _salt]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    generateSecret: TypedFunctionDescription<{
      encode([_salt, _value]: [Arrayish, BigNumberish]): string;
    }>;

    getTaskWorkRatingSecretsInfo: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskWorkRatingSecret: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    setTaskManagerRole: TypedFunctionDescription<{
      encode([_id, _user, _permissionDomainId, _childSkillIndex]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setTaskEvaluatorRole: TypedFunctionDescription<{
      encode([_id, _user]: [BigNumberish, string]): string;
    }>;

    setTaskWorkerRole: TypedFunctionDescription<{
      encode([_id, _user]: [BigNumberish, string]): string;
    }>;

    removeTaskEvaluatorRole: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    removeTaskWorkerRole: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    setTaskSkill: TypedFunctionDescription<{
      encode([_id, _skillId]: [BigNumberish, BigNumberish]): string;
    }>;

    setTaskBrief: TypedFunctionDescription<{
      encode([_id, _specificationHash]: [BigNumberish, Arrayish]): string;
    }>;

    setTaskDueDate: TypedFunctionDescription<{
      encode([_id, _dueDate]: [BigNumberish, BigNumberish]): string;
    }>;

    submitTaskDeliverable: TypedFunctionDescription<{
      encode([_id, _deliverableHash]: [BigNumberish, Arrayish]): string;
    }>;

    submitTaskDeliverableAndRating: TypedFunctionDescription<{
      encode([_id, _deliverableHash, _ratingSecret]: [
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    finalizeTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    cancelTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    completeTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTask: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getTaskRole: TypedFunctionDescription<{
      encode([_id, _role]: [BigNumberish, BigNumberish]): string;
    }>;

    setRewardInverse: TypedFunctionDescription<{
      encode([_rewardInverse]: [BigNumberish]): string;
    }>;

    getRewardInverse: TypedFunctionDescription<{ encode([]: []): string }>;

    getTaskPayout: TypedFunctionDescription<{
      encode([_id, _role, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    setTaskManagerPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setTaskEvaluatorPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setTaskWorkerPayout: TypedFunctionDescription<{
      encode([_id, _token, _amount]: [
        BigNumberish,
        string,
        BigNumberish
      ]): string;
    }>;

    setAllTaskPayouts: TypedFunctionDescription<{
      encode([_id, _token, _managerAmount, _evaluatorAmount, _workerAmount]: [
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    claimTaskPayout: TypedFunctionDescription<{
      encode([_id, _role, _token]: [
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    startNextRewardPayout: TypedFunctionDescription<{
      encode([_token, key, value, branchMask, siblings]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    claimRewardPayout: TypedFunctionDescription<{
      encode([_payoutId, _squareRoots, key, value, branchMask, siblings]: [
        BigNumberish,
        BigNumberish[],
        Arrayish,
        Arrayish,
        BigNumberish,
        Arrayish[]
      ]): string;
    }>;

    getRewardPayoutInfo: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    finalizeRewardPayout: TypedFunctionDescription<{
      encode([_payoutId]: [BigNumberish]): string;
    }>;

    getFundingPot: TypedFunctionDescription<{
      encode([_id]: [BigNumberish]): string;
    }>;

    getFundingPotCount: TypedFunctionDescription<{ encode([]: []): string }>;

    getFundingPotBalance: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    getFundingPotPayout: TypedFunctionDescription<{
      encode([_potId, _token]: [BigNumberish, string]): string;
    }>;

    moveFundsBetweenPots: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _domainId,
        _fromChildSkillIndex,
        _toChildSkillIndex,
        _fromPot,
        _toPot,
        _amount,
        _token,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    claimColonyFunds: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    getNonRewardPotsTotal: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    approveStake: TypedFunctionDescription<{
      encode([_approvee, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    obligateStake: TypedFunctionDescription<{
      encode([_user, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    deobligateStake: TypedFunctionDescription<{
      encode([_user, _domainId, _amount]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    transferStake: TypedFunctionDescription<{
      encode([
        _permissionDomainId,
        _childSkillIndex,
        _obligator,
        _user,
        _domainId,
        _amount,
        _recipient,
      ]: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    getApproval: TypedFunctionDescription<{
      encode([_user, _obligator, _domainId]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    getObligation: TypedFunctionDescription<{
      encode([_user, _obligator, _domainId]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    getDomainFromFundingPot: TypedFunctionDescription<{
      encode([_fundingPotId]: [BigNumberish]): string;
    }>;

    burnTokens: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    unlockToken: TypedFunctionDescription<{ encode([]: []): string }>;

    updateApprovalAmount: TypedFunctionDescription<{
      encode([token, spender]: [string, string]): string;
    }>;

    getTokenApproval: TypedFunctionDescription<{
      encode([token, spender]: [string, string]): string;
    }>;

    getTotalTokenApproval: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;
  };

  events: {
    Annotation: TypedEventDescription<{
      encodeTopics([agent, txHash, metadata]: [
        string | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    ArbitraryReputationUpdate: TypedEventDescription<{
      encodeTopics([agent, user, skillId, amount]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyBootstrapped: TypedEventDescription<{
      encodeTopics([agent, users, amounts]: [null, null, null]): string[];
    }>;

    ColonyFundsClaimed: TypedEventDescription<{
      encodeTopics([agent, token, fee, payoutRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ColonyFundsMovedBetweenFundingPots: TypedEventDescription<{
      encodeTopics([agent, fromPot, toPot, amount, token]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    ColonyInitialised: TypedEventDescription<{
      encodeTopics([agent, colonyNetwork, token]: [null, null, null]): string[];
    }>;

    ColonyMetadata: TypedEventDescription<{
      encodeTopics([agent, metadata]: [null, null]): string[];
    }>;

    ColonyRewardInverseSet: TypedEventDescription<{
      encodeTopics([agent, rewardInverse]: [null, null]): string[];
    }>;

    ColonyRoleSet: TypedEventDescription<{
      encodeTopics([agent, user, domainId, role, setTo]: [
        null,
        string | null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ColonyUpgraded: TypedEventDescription<{
      encodeTopics([agent, oldVersion, newVersion]: [
        null,
        null,
        null
      ]): string[];
    }>;

    DomainAdded: TypedEventDescription<{
      encodeTopics([agent, domainId]: [null, null]): string[];
    }>;

    DomainMetadata: TypedEventDescription<{
      encodeTopics([agent, domainId, metadata]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditureAdded: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [null, null]): string[];
    }>;

    ExpenditureCancelled: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureClaimDelaySet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, claimDelay]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditureFinalized: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureGlobalClaimDelaySet: TypedEventDescription<{
      encodeTopics([agent, globalClaimDelay]: [null, null]): string[];
    }>;

    ExpenditureLocked: TypedEventDescription<{
      encodeTopics([agent, expenditureId]: [
        null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureMetadataSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, metadata]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditurePayoutModifierSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, payoutModifier]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ExpenditurePayoutSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, token, amount]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    ExpenditureRecipientSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, recipient]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    ExpenditureSkillSet: TypedEventDescription<{
      encodeTopics([agent, expenditureId, slot, skillId]: [
        null,
        BigNumberish | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    ExpenditureTransferred: TypedEventDescription<{
      encodeTopics([agent, expenditureId, owner]: [
        null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    FundingPotAdded: TypedEventDescription<{
      encodeTopics([fundingPotId]: [null]): string[];
    }>;

    PaymentAdded: TypedEventDescription<{
      encodeTopics([agent, paymentId]: [null, null]): string[];
    }>;

    PaymentFinalized: TypedEventDescription<{
      encodeTopics([agent, paymentId]: [null, BigNumberish | null]): string[];
    }>;

    PaymentPayoutSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, token, amount]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    PaymentRecipientSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, recipient]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    PaymentSkillSet: TypedEventDescription<{
      encodeTopics([agent, paymentId, skillId]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    PayoutClaimed: TypedEventDescription<{
      encodeTopics([agent, fundingPotId, token, amount]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    RecoveryModeEntered: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExitApproved: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryModeExited: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    RecoveryRoleSet: TypedEventDescription<{
      encodeTopics([user, setTo]: [string | null, null]): string[];
    }>;

    RecoveryStorageSlotSet: TypedEventDescription<{
      encodeTopics([user, slot, fromValue, toValue]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RewardPayoutClaimed: TypedEventDescription<{
      encodeTopics([rewardPayoutId, user, fee, rewardRemainder]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    RewardPayoutCycleEnded: TypedEventDescription<{
      encodeTopics([agent, rewardPayoutId]: [null, null]): string[];
    }>;

    RewardPayoutCycleStarted: TypedEventDescription<{
      encodeTopics([agent, rewardPayoutId]: [null, null]): string[];
    }>;

    TaskAdded: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, null]): string[];
    }>;

    TaskBriefSet: TypedEventDescription<{
      encodeTopics([taskId, specificationHash]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskCanceled: TypedEventDescription<{
      encodeTopics([taskId]: [BigNumberish | null]): string[];
    }>;

    TaskChangedViaSignatures: TypedEventDescription<{
      encodeTopics([reviewerAddresses]: [null]): string[];
    }>;

    TaskCompleted: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, BigNumberish | null]): string[];
    }>;

    TaskDeliverableSubmitted: TypedEventDescription<{
      encodeTopics([agent, taskId, deliverableHash]: [
        null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    TaskDueDateSet: TypedEventDescription<{
      encodeTopics([taskId, dueDate]: [BigNumberish | null, null]): string[];
    }>;

    TaskFinalized: TypedEventDescription<{
      encodeTopics([agent, taskId]: [null, BigNumberish | null]): string[];
    }>;

    TaskPayoutSet: TypedEventDescription<{
      encodeTopics([taskId, role, token, amount]: [
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    TaskRoleUserSet: TypedEventDescription<{
      encodeTopics([taskId, role, user]: [
        BigNumberish | null,
        null,
        string | null
      ]): string[];
    }>;

    TaskSkillSet: TypedEventDescription<{
      encodeTopics([taskId, skillId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    TaskWorkRatingRevealed: TypedEventDescription<{
      encodeTopics([agent, taskId, role, rating]: [
        null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    TokenUnlocked: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    TokensBurned: TypedEventDescription<{
      encodeTopics([agent, token, amount]: [null, null, null]): string[];
    }>;

    TokensMinted: TypedEventDescription<{
      encodeTopics([agent, who, amount]: [null, null, null]): string[];
    }>;
  };
}

export class IColony extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IColony;
  attach(addressOrName: string): IColony;
  deployed(): Promise<IColony>;

  on(event: EventFilter | string, listener: Listener): IColony;
  once(event: EventFilter | string, listener: Listener): IColony;
  addListener(eventName: EventFilter | string, listener: Listener): IColony;
  removeAllListeners(eventName: EventFilter | string): IColony;
  removeListener(eventName: any, listener: Listener): IColony;

  interface: IColonyInterface;

  functions: {
    approveExitRecovery(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approveExitRecovery()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<void>;

    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<void>;

    enterRecoveryMode(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "enterRecoveryMode()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "exitRecoveryMode()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    isInRecoveryMode(overrides?: UnsignedTransaction): Promise<boolean>;

    "isInRecoveryMode()"(overrides?: UnsignedTransaction): Promise<boolean>;

    numRecoveryRoles(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "numRecoveryRoles()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setRecoveryRole(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    authority(overrides?: UnsignedTransaction): Promise<string>;

    "authority()"(overrides?: UnsignedTransaction): Promise<string>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    version(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "upgrade(uint256)"(
      _newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    finishUpgrade(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finishUpgrade()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getColonyNetwork(overrides?: UnsignedTransaction): Promise<string>;

    "getColonyNetwork()"(overrides?: UnsignedTransaction): Promise<string>;

    getToken(overrides?: UnsignedTransaction): Promise<string>;

    "getToken()"(overrides?: UnsignedTransaction): Promise<string>;

    makeArbitraryTransaction(
      _to: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makeArbitraryTransaction(address,bytes)"(
      _to: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makeArbitraryTransactions(address[],bytes[],bool)"(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makeSingleArbitraryTransaction(address,bytes)"(
      _target: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    annotateTransaction(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "annotateTransaction(bytes32,string)"(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setRootRole(address,bool)"(
      _user: string,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setFundingRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "hasUserRole(address,uint256,uint8)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "userCanSetRoles(address,uint256,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getUserRoles(address,uint256)"(
      _user: string,
      _domain: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "emitDomainReputationReward(uint256,address,int256)"(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "emitSkillReputationReward(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "emitSkillReputationPenalty(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "initialiseColony(address,address)"(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    editColony(
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "editColony(string)"(
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "bootstrapColony(address[],int256[])"(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mintTokens(uint256)"(
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mintTokensFor(address,uint256)"(
      _guy: string,
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    lockToken(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "lockToken()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "unlockTokenForUser(address,uint256)"(
      user: string,
      lockId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "registerColonyLabel(string,string)"(
      colonyName: string,
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateColonyOrbitDB(string)"(
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    installExtension(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "installExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    upgradeExtension(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "upgradeExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deprecateExtension(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "deprecateExtension(bytes32,bool)"(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    uninstallExtension(
      extensionId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "uninstallExtension(bytes32)"(
      extensionId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "editDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getDomain(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    "getDomain(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    getDomainCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getDomainCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setDefaultGlobalClaimDelay(uint256)"(
      _globalClaimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makeExpenditure(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferExpenditure(uint256,address)"(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "cancelExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "lockExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finalizeExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureMetadata(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureRecipient(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureRecipients(uint256,uint256[],address[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditurePayout(uint256,uint256,address,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureSkill(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureSkills(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureClaimDelay(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimExpenditurePayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getExpenditureCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getExpenditureCount()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
      }
    >;

    "getExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
      }
    >;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
      }
    >;

    "getExpenditureSlot(uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
      }
    >;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getExpenditureSlotPayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finalizePayment(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setPaymentRecipient(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setPaymentSkill(uint256,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setPaymentPayout(uint256,uint256,uint256,address,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getPayment(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    "getPayment(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimPayment(uint256,address)"(
      _id: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getPaymentCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getPaymentCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getTaskCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getTaskCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskChangeNonce(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "submitTaskWorkRating(uint256,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    generateSecret(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "generateSecret(bytes32,uint256)"(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    "getTaskWorkRatingSecretsInfo(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getTaskWorkRatingSecret(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskManagerRole(uint256,address,uint256,uint256)"(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskEvaluatorRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskWorkerRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeTaskEvaluatorRole(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeTaskWorkerRole(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskSkill(uint256,uint256)"(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskBrief(uint256,bytes32)"(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskDueDate(uint256,uint256)"(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "submitTaskDeliverable(uint256,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finalizeTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    cancelTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "cancelTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "completeTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    "getTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    "getTaskRole(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setRewardInverse(uint256)"(
      _rewardInverse: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getRewardInverse(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getRewardInverse()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskManagerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskEvaluatorPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setTaskWorkerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)"(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
      }
    >;

    "getRewardPayoutInfo(uint256)"(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
      }
    >;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finalizeRewardPayout(uint256)"(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    "getFundingPot(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    getFundingPotCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getFundingPotCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getFundingPotBalance(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getFundingPotPayout(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    claimColonyFunds(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "claimColonyFunds(address)"(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getNonRewardPotsTotal(address)"(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approveStake(address,uint256,uint256)"(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "obligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "deobligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getApproval(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getObligation(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getDomainFromFundingPot(uint256)"(
      _fundingPotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burnTokens(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    unlockToken(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "unlockToken()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateApprovalAmount(address,address)"(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTokenApproval(address,address)"(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTotalTokenApproval(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTotalTokenApproval(address)"(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };

  approveExitRecovery(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approveExitRecovery()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<void>;

  "checkNotAdditionalProtectedVariable(uint256)"(
    _slot: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<void>;

  enterRecoveryMode(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "enterRecoveryMode()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "exitRecoveryMode()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  isInRecoveryMode(overrides?: UnsignedTransaction): Promise<boolean>;

  "isInRecoveryMode()"(overrides?: UnsignedTransaction): Promise<boolean>;

  numRecoveryRoles(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "numRecoveryRoles()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  removeRecoveryRole(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeRecoveryRole(address)"(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setRecoveryRole(address)"(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setStorageSlotRecovery(uint256,bytes32)"(
    _slot: BigNumberish,
    _value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  authority(overrides?: UnsignedTransaction): Promise<string>;

  "authority()"(overrides?: UnsignedTransaction): Promise<string>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  version(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  upgrade(
    _newVersion: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "upgrade(uint256)"(
    _newVersion: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  finishUpgrade(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "finishUpgrade()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getColonyNetwork(overrides?: UnsignedTransaction): Promise<string>;

  "getColonyNetwork()"(overrides?: UnsignedTransaction): Promise<string>;

  getToken(overrides?: UnsignedTransaction): Promise<string>;

  "getToken()"(overrides?: UnsignedTransaction): Promise<string>;

  makeArbitraryTransaction(
    _to: string,
    _action: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makeArbitraryTransaction(address,bytes)"(
    _to: string,
    _action: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  makeArbitraryTransactions(
    _targets: string[],
    _actions: Arrayish[],
    _strict: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makeArbitraryTransactions(address[],bytes[],bool)"(
    _targets: string[],
    _actions: Arrayish[],
    _strict: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  makeSingleArbitraryTransaction(
    _target: string,
    _action: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makeSingleArbitraryTransaction(address,bytes)"(
    _target: string,
    _action: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  annotateTransaction(
    _txHash: Arrayish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "annotateTransaction(bytes32,string)"(
    _txHash: Arrayish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setRootRole(address,bool)"(
    _user: string,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setArbitrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setFundingRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setUserRoles(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _roles: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "hasUserRole(address,uint256,uint8)"(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  hasInheritedUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  userCanSetRoles(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "userCanSetRoles(address,uint256,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _childDomainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  getUserRoles(
    _user: string,
    _domain: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getUserRoles(address,uint256)"(
    _user: string,
    _domain: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getCapabilityRoles(
    _sig: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getCapabilityRoles(bytes4)"(
    _sig: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  emitDomainReputationReward(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "emitDomainReputationReward(uint256,address,int256)"(
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  emitSkillReputationReward(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "emitSkillReputationReward(uint256,address,int256)"(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  emitDomainReputationPenalty(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  emitSkillReputationPenalty(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "emitSkillReputationPenalty(uint256,address,int256)"(
    _skillId: BigNumberish,
    _user: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "initialiseColony(address,address)"(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  editColony(
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "editColony(string)"(
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "bootstrapColony(address[],int256[])"(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  mintTokens(
    _wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mintTokens(uint256)"(
    _wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  mintTokensFor(
    _guy: string,
    _wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mintTokensFor(address,uint256)"(
    _guy: string,
    _wad: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  lockToken(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "lockToken()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  unlockTokenForUser(
    user: string,
    lockId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "unlockTokenForUser(address,uint256)"(
    user: string,
    lockId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "registerColonyLabel(string,string)"(
    colonyName: string,
    orbitdb: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateColonyOrbitDB(
    orbitdb: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateColonyOrbitDB(string)"(
    orbitdb: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  installExtension(
    extensionId: Arrayish,
    version: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "installExtension(bytes32,uint256)"(
    extensionId: Arrayish,
    version: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  upgradeExtension(
    extensionId: Arrayish,
    newVersion: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "upgradeExtension(bytes32,uint256)"(
    extensionId: Arrayish,
    newVersion: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deprecateExtension(
    extensionId: Arrayish,
    deprecated: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "deprecateExtension(bytes32,bool)"(
    extensionId: Arrayish,
    deprecated: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  uninstallExtension(
    extensionId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "uninstallExtension(bytes32)"(
    extensionId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  addDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "addDomain(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "addDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  editDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "editDomain(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getDomain(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  "getDomain(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  getDomainCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getDomainCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  verifyReputationProof(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  setDefaultGlobalClaimDelay(
    _globalClaimDelay: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setDefaultGlobalClaimDelay(uint256)"(
    _globalClaimDelay: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  makeExpenditure(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makeExpenditure(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferExpenditure(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferExpenditure(uint256,address)"(
    _id: BigNumberish,
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferExpenditureViaArbitration(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  cancelExpenditure(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "cancelExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  lockExpenditure(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "lockExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  finalizeExpenditure(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "finalizeExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureMetadata(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureMetadata(uint256,uint256,uint256,string)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureMetadata(uint256,string)"(
    _id: BigNumberish,
    _metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureRecipient(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureRecipient(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _recipient: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureRecipients(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureRecipients(uint256,uint256[],address[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _recipients: string[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditurePayout(uint256,uint256,address,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditurePayouts(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _token: string,
    _amounts: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureSkill(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureSkill(uint256,uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureSkills(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureSkills(uint256,uint256[],uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _skillIds: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelay(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureClaimDelay(uint256,uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _claimDelay: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureClaimDelays(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _claimDelays: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditurePayoutModifiers(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
    _id: BigNumberish,
    _slots: BigNumberish[],
    _payoutModifiers: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setExpenditureState(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: Arrayish[],
    _value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _storageSlot: BigNumberish,
    _mask: boolean[],
    _keys: Arrayish[],
    _value: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  claimExpenditurePayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimExpenditurePayout(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getExpenditureCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getExpenditureCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getExpenditure(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
      globalClaimDelay: BigNumber;
    }
  >;

  "getExpenditure(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [number, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      owner: string;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      finalizedTimestamp: BigNumber;
      globalClaimDelay: BigNumber;
    }
  >;

  getExpenditureSlot(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }
  >;

  "getExpenditureSlot(uint256,uint256)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      claimDelay: BigNumber;
      payoutModifier: BigNumber;
      skills: BigNumber[];
    }
  >;

  getExpenditureSlotPayout(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getExpenditureSlotPayout(uint256,uint256,address)"(
    _id: BigNumberish,
    _slot: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  addPayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  finalizePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "finalizePayment(uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setPaymentRecipient(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setPaymentRecipient(uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setPaymentSkill(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setPaymentSkill(uint256,uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setPaymentPayout(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setPaymentPayout(uint256,uint256,uint256,address,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getPayment(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  "getPayment(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  claimPayment(
    _id: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimPayment(uint256,address)"(
    _id: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getPaymentCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getPaymentCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  makeTask(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: Arrayish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: Arrayish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getTaskCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getTaskCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getTaskChangeNonce(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getTaskChangeNonce(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  executeTaskChange(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  executeTaskRoleAssignment(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
    _sigV: BigNumberish[],
    _sigR: Arrayish[],
    _sigS: Arrayish[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  submitTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "submitTaskWorkRating(uint256,uint8,bytes32)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  revealTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "revealTaskWorkRating(uint256,uint8,uint8,bytes32)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  generateSecret(
    _salt: Arrayish,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "generateSecret(bytes32,uint256)"(
    _salt: Arrayish,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  "getTaskWorkRatingSecretsInfo(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getTaskWorkRatingSecret(uint256,uint8)"(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  setTaskManagerRole(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskManagerRole(uint256,address,uint256,uint256)"(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskEvaluatorRole(
    _id: BigNumberish,
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskEvaluatorRole(uint256,address)"(
    _id: BigNumberish,
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskWorkerRole(
    _id: BigNumberish,
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskWorkerRole(uint256,address)"(
    _id: BigNumberish,
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  removeTaskEvaluatorRole(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeTaskEvaluatorRole(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  removeTaskWorkerRole(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeTaskWorkerRole(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskSkill(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskSkill(uint256,uint256)"(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskBrief(
    _id: BigNumberish,
    _specificationHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskBrief(uint256,bytes32)"(
    _id: BigNumberish,
    _specificationHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskDueDate(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskDueDate(uint256,uint256)"(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  submitTaskDeliverable(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "submitTaskDeliverable(uint256,bytes32)"(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  submitTaskDeliverableAndRating(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    _ratingSecret: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)"(
    _id: BigNumberish,
    _deliverableHash: Arrayish,
    _ratingSecret: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  finalizeTask(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "finalizeTask(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  cancelTask(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "cancelTask(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  completeTask(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "completeTask(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getTask(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  "getTask(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  "getTaskRole(uint256,uint8)"(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setRewardInverse(uint256)"(
    _rewardInverse: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getRewardInverse(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getRewardInverse()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getTaskPayout(uint256,uint8,address)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  setTaskManagerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskManagerPayout(uint256,address,uint256)"(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskEvaluatorPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskEvaluatorPayout(uint256,address,uint256)"(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setTaskWorkerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setTaskWorkerPayout(uint256,address,uint256)"(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setAllTaskPayouts(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)"(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  claimTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimTaskPayout(uint256,uint8,address)"(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  startNextRewardPayout(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
    _token: string,
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: Arrayish,
    value: Arrayish,
    branchMask: BigNumberish,
    siblings: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getRewardPayoutInfo(
    _payoutId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }
  >;

  "getRewardPayoutInfo(uint256)"(
    _payoutId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
      amountRemaining: BigNumber;
      finalized: boolean;
    }
  >;

  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "finalizeRewardPayout(uint256)"(
    _payoutId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getFundingPot(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  "getFundingPot(uint256)"(
    _id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  getFundingPotCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getFundingPotCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getFundingPotBalance(uint256,address)"(
    _potId: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getFundingPotPayout(
    _potId: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getFundingPotPayout(uint256,address)"(
    _potId: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  moveFundsBetweenPots(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _domainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  claimColonyFunds(
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "claimColonyFunds(address)"(
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getNonRewardPotsTotal(
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getNonRewardPotsTotal(address)"(
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  approveStake(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approveStake(address,uint256,uint256)"(
    _approvee: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  obligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "obligateStake(address,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  deobligateStake(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "deobligateStake(address,uint256,uint256)"(
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferStake(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _obligator: string,
    _user: string,
    _domainId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getApproval(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getApproval(address,address,uint256)"(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getObligation(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getObligation(address,address,uint256)"(
    _user: string,
    _obligator: string,
    _domainId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getDomainFromFundingPot(
    _fundingPotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getDomainFromFundingPot(uint256)"(
    _fundingPotId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  burnTokens(
    token: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burnTokens(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  unlockToken(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "unlockToken()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateApprovalAmount(
    token: string,
    spender: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateApprovalAmount(address,address)"(
    token: string,
    spender: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getTokenApproval(
    token: string,
    spender: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getTokenApproval(address,address)"(
    token: string,
    spender: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  getTotalTokenApproval(
    token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getTotalTokenApproval(address)"(
    token: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  filters: {
    Annotation(
      agent: string | null,
      txHash: Arrayish | null,
      metadata: null
    ): EventFilter;

    ArbitraryReputationUpdate(
      agent: null,
      user: null,
      skillId: null,
      amount: null
    ): EventFilter;

    ColonyBootstrapped(agent: null, users: null, amounts: null): EventFilter;

    ColonyFundsClaimed(
      agent: null,
      token: null,
      fee: null,
      payoutRemainder: null
    ): EventFilter;

    ColonyFundsMovedBetweenFundingPots(
      agent: null,
      fromPot: BigNumberish | null,
      toPot: BigNumberish | null,
      amount: null,
      token: null
    ): EventFilter;

    ColonyInitialised(
      agent: null,
      colonyNetwork: null,
      token: null
    ): EventFilter;

    ColonyMetadata(agent: null, metadata: null): EventFilter;

    ColonyRewardInverseSet(agent: null, rewardInverse: null): EventFilter;

    ColonyRoleSet(
      agent: null,
      user: string | null,
      domainId: BigNumberish | null,
      role: BigNumberish | null,
      setTo: null
    ): EventFilter;

    ColonyUpgraded(
      agent: null,
      oldVersion: null,
      newVersion: null
    ): EventFilter;

    DomainAdded(agent: null, domainId: null): EventFilter;

    DomainMetadata(
      agent: null,
      domainId: BigNumberish | null,
      metadata: null
    ): EventFilter;

    ExpenditureAdded(agent: null, expenditureId: null): EventFilter;

    ExpenditureCancelled(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureClaimDelaySet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      claimDelay: null
    ): EventFilter;

    ExpenditureFinalized(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureGlobalClaimDelaySet(
      agent: null,
      globalClaimDelay: null
    ): EventFilter;

    ExpenditureLocked(
      agent: null,
      expenditureId: BigNumberish | null
    ): EventFilter;

    ExpenditureMetadataSet(
      agent: null,
      expenditureId: BigNumberish | null,
      metadata: null
    ): EventFilter;

    ExpenditurePayoutModifierSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      payoutModifier: null
    ): EventFilter;

    ExpenditurePayoutSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      token: string | null,
      amount: null
    ): EventFilter;

    ExpenditureRecipientSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      recipient: string | null
    ): EventFilter;

    ExpenditureSkillSet(
      agent: null,
      expenditureId: BigNumberish | null,
      slot: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    ExpenditureTransferred(
      agent: null,
      expenditureId: BigNumberish | null,
      owner: string | null
    ): EventFilter;

    FundingPotAdded(fundingPotId: null): EventFilter;

    PaymentAdded(agent: null, paymentId: null): EventFilter;

    PaymentFinalized(agent: null, paymentId: BigNumberish | null): EventFilter;

    PaymentPayoutSet(
      agent: null,
      paymentId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    PaymentRecipientSet(
      agent: null,
      paymentId: BigNumberish | null,
      recipient: null
    ): EventFilter;

    PaymentSkillSet(
      agent: null,
      paymentId: BigNumberish | null,
      skillId: null
    ): EventFilter;

    PayoutClaimed(
      agent: null,
      fundingPotId: BigNumberish | null,
      token: null,
      amount: null
    ): EventFilter;

    RecoveryModeEntered(user: null): EventFilter;

    RecoveryModeExitApproved(user: null): EventFilter;

    RecoveryModeExited(user: null): EventFilter;

    RecoveryRoleSet(user: string | null, setTo: null): EventFilter;

    RecoveryStorageSlotSet(
      user: null,
      slot: null,
      fromValue: null,
      toValue: null
    ): EventFilter;

    RewardPayoutClaimed(
      rewardPayoutId: null,
      user: null,
      fee: null,
      rewardRemainder: null
    ): EventFilter;

    RewardPayoutCycleEnded(agent: null, rewardPayoutId: null): EventFilter;

    RewardPayoutCycleStarted(agent: null, rewardPayoutId: null): EventFilter;

    TaskAdded(agent: null, taskId: null): EventFilter;

    TaskBriefSet(
      taskId: BigNumberish | null,
      specificationHash: null
    ): EventFilter;

    TaskCanceled(taskId: BigNumberish | null): EventFilter;

    TaskChangedViaSignatures(reviewerAddresses: null): EventFilter;

    TaskCompleted(agent: null, taskId: BigNumberish | null): EventFilter;

    TaskDeliverableSubmitted(
      agent: null,
      taskId: BigNumberish | null,
      deliverableHash: null
    ): EventFilter;

    TaskDueDateSet(taskId: BigNumberish | null, dueDate: null): EventFilter;

    TaskFinalized(agent: null, taskId: BigNumberish | null): EventFilter;

    TaskPayoutSet(
      taskId: BigNumberish | null,
      role: null,
      token: null,
      amount: null
    ): EventFilter;

    TaskRoleUserSet(
      taskId: BigNumberish | null,
      role: null,
      user: string | null
    ): EventFilter;

    TaskSkillSet(
      taskId: BigNumberish | null,
      skillId: BigNumberish | null
    ): EventFilter;

    TaskWorkRatingRevealed(
      agent: null,
      taskId: BigNumberish | null,
      role: null,
      rating: null
    ): EventFilter;

    TokenUnlocked(): EventFilter;

    TokensBurned(agent: null, token: null, amount: null): EventFilter;

    TokensMinted(agent: null, who: null, amount: null): EventFilter;
  };

  estimate: {
    approveExitRecovery(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "approveExitRecovery()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "checkNotAdditionalProtectedVariable(uint256)"(
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    enterRecoveryMode(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "enterRecoveryMode()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    exitRecoveryMode(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "exitRecoveryMode()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isInRecoveryMode(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "isInRecoveryMode()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    numRecoveryRoles(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "numRecoveryRoles()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeRecoveryRole(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setRecoveryRole(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setRecoveryRole(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setStorageSlotRecovery(uint256,bytes32)"(
      _slot: BigNumberish,
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    authority(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "authority()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    version(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "upgrade(uint256)"(
      _newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finishUpgrade(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "finishUpgrade()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getColonyNetwork(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getColonyNetwork()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getToken(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getToken()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    makeArbitraryTransaction(
      _to: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makeArbitraryTransaction(address,bytes)"(
      _to: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    makeArbitraryTransactions(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makeArbitraryTransactions(address[],bytes[],bool)"(
      _targets: string[],
      _actions: Arrayish[],
      _strict: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    makeSingleArbitraryTransaction(
      _target: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makeSingleArbitraryTransaction(address,bytes)"(
      _target: string,
      _action: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    annotateTransaction(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "annotateTransaction(bytes32,string)"(
      _txHash: Arrayish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setRootRole(address,bool)"(
      _user: string,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setArbitrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setFundingRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setUserRoles(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _roles: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "hasUserRole(address,uint256,uint8)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    hasInheritedUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    userCanSetRoles(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "userCanSetRoles(address,uint256,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _childDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getUserRoles(
      _user: string,
      _domain: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getUserRoles(address,uint256)"(
      _user: string,
      _domain: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    emitDomainReputationReward(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "emitDomainReputationReward(uint256,address,int256)"(
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    emitSkillReputationReward(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "emitSkillReputationReward(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    emitDomainReputationPenalty(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    emitSkillReputationPenalty(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "emitSkillReputationPenalty(uint256,address,int256)"(
      _skillId: BigNumberish,
      _user: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "initialiseColony(address,address)"(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    editColony(
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "editColony(string)"(
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "bootstrapColony(address[],int256[])"(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mintTokens(uint256)"(
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    mintTokensFor(
      _guy: string,
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mintTokensFor(address,uint256)"(
      _guy: string,
      _wad: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    lockToken(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "lockToken()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    unlockTokenForUser(
      user: string,
      lockId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "unlockTokenForUser(address,uint256)"(
      user: string,
      lockId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "registerColonyLabel(string,string)"(
      colonyName: string,
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateColonyOrbitDB(
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateColonyOrbitDB(string)"(
      orbitdb: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    installExtension(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "installExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      version: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    upgradeExtension(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "upgradeExtension(bytes32,uint256)"(
      extensionId: Arrayish,
      newVersion: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    deprecateExtension(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deprecateExtension(bytes32,bool)"(
      extensionId: Arrayish,
      deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    uninstallExtension(
      extensionId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "uninstallExtension(bytes32)"(
      extensionId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "addDomain(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "addDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    editDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "editDomain(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getDomain(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getDomain(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getDomainCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getDomainCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    verifyReputationProof(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setDefaultGlobalClaimDelay(
      _globalClaimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setDefaultGlobalClaimDelay(uint256)"(
      _globalClaimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    makeExpenditure(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makeExpenditure(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferExpenditure(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferExpenditure(uint256,address)"(
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferExpenditureViaArbitration(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    lockExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "lockExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finalizeExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "finalizeExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureMetadata(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureMetadata(uint256,uint256,uint256,string)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureMetadata(uint256,string)"(
      _id: BigNumberish,
      _metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureRecipient(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureRecipient(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureRecipients(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureRecipients(uint256,uint256[],address[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _recipients: string[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditurePayout(uint256,uint256,address,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditurePayouts(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _token: string,
      _amounts: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureSkill(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureSkill(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureSkills(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureSkills(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _skillIds: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureClaimDelay(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureClaimDelay(uint256,uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _claimDelay: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureClaimDelays(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _claimDelays: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditurePayoutModifiers(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(
      _id: BigNumberish,
      _slots: BigNumberish[],
      _payoutModifiers: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setExpenditureState(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _storageSlot: BigNumberish,
      _mask: boolean[],
      _keys: Arrayish[],
      _value: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimExpenditurePayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimExpenditurePayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getExpenditureCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getExpenditureCount()"(
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getExpenditure(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getExpenditure(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getExpenditureSlot(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getExpenditureSlot(uint256,uint256)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getExpenditureSlotPayout(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getExpenditureSlotPayout(uint256,uint256,address)"(
      _id: BigNumberish,
      _slot: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "finalizePayment(uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setPaymentRecipient(uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setPaymentSkill(uint256,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setPaymentPayout(uint256,uint256,uint256,address,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getPayment(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getPayment(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimPayment(uint256,address)"(
      _id: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getPaymentCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getPaymentCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: Arrayish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTaskCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getTaskCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskChangeNonce(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)"(
      _sigV: BigNumberish[],
      _sigR: Arrayish[],
      _sigS: Arrayish[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "submitTaskWorkRating(uint256,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    generateSecret(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "generateSecret(bytes32,uint256)"(
      _salt: Arrayish,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskWorkRatingSecretsInfo(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskWorkRatingSecret(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskManagerRole(uint256,address,uint256,uint256)"(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskEvaluatorRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskWorkerRole(uint256,address)"(
      _id: BigNumberish,
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeTaskEvaluatorRole(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeTaskWorkerRole(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskSkill(uint256,uint256)"(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskBrief(uint256,bytes32)"(
      _id: BigNumberish,
      _specificationHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskDueDate(uint256,uint256)"(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "submitTaskDeliverable(uint256,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)"(
      _id: BigNumberish,
      _deliverableHash: Arrayish,
      _ratingSecret: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "finalizeTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    cancelTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "cancelTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    completeTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "completeTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTask(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTask(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskRole(uint256,uint8)"(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setRewardInverse(uint256)"(
      _rewardInverse: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getRewardInverse(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getRewardInverse()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskManagerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskEvaluatorPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setTaskWorkerPayout(uint256,address,uint256)"(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)"(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimTaskPayout(uint256,uint8,address)"(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    startNextRewardPayout(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(
      _token: string,
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: Arrayish,
      value: Arrayish,
      branchMask: BigNumberish,
      siblings: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getRewardPayoutInfo(uint256)"(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "finalizeRewardPayout(uint256)"(
      _payoutId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getFundingPot(uint256)"(
      _id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getFundingPotCount(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getFundingPotCount()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getFundingPotBalance(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getFundingPotPayout(uint256,address)"(
      _potId: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _domainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    claimColonyFunds(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "claimColonyFunds(address)"(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getNonRewardPotsTotal(address)"(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approveStake(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approveStake(address,uint256,uint256)"(
      _approvee: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    obligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "obligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    deobligateStake(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "deobligateStake(address,uint256,uint256)"(
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferStake(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _obligator: string,
      _user: string,
      _domainId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getApproval(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getApproval(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getObligation(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getObligation(address,address,uint256)"(
      _user: string,
      _obligator: string,
      _domainId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getDomainFromFundingPot(
      _fundingPotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getDomainFromFundingPot(uint256)"(
      _fundingPotId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burnTokens(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burnTokens(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    unlockToken(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "unlockToken()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    updateApprovalAmount(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateApprovalAmount(address,address)"(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTokenApproval(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTokenApproval(address,address)"(
      token: string,
      spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTotalTokenApproval(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTotalTokenApproval(address)"(
      token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
