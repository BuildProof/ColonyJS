/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IColonyInterface extends utils.Interface {
  contractName: "IColony";
  functions: {
    "approveExitRecovery()": FunctionFragment;
    "exitRecoveryMode()": FunctionFragment;
    "numRecoveryRoles()": FunctionFragment;
    "setStorageSlotRecovery(uint256,bytes32)": FunctionFragment;
    "isInRecoveryMode()": FunctionFragment;
    "checkNotAdditionalProtectedVariable(uint256)": FunctionFragment;
    "removeRecoveryRole(address)": FunctionFragment;
    "setRecoveryRole(address)": FunctionFragment;
    "enterRecoveryMode()": FunctionFragment;
    "authority()": FunctionFragment;
    "owner()": FunctionFragment;
    "version()": FunctionFragment;
    "upgrade(uint256)": FunctionFragment;
    "getColonyNetwork()": FunctionFragment;
    "getToken()": FunctionFragment;
    "setRootRole(address,bool)": FunctionFragment;
    "setArchitectureRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setFundingRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "setAdministrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
    "hasUserRole(address,uint256,uint8)": FunctionFragment;
    "initialiseColony(address,address)": FunctionFragment;
    "bootstrapColony(address[],int256[])": FunctionFragment;
    "mintTokens(uint256)": FunctionFragment;
    "registerColonyLabel(string,string)": FunctionFragment;
    "addDomain(uint256,uint256,uint256)": FunctionFragment;
    "getDomain(uint256)": FunctionFragment;
    "getDomainCount()": FunctionFragment;
    "verifyReputationProof(bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)": FunctionFragment;
    "finalizePayment(uint256,uint256,uint256)": FunctionFragment;
    "setPaymentRecipient(uint256,uint256,uint256,address)": FunctionFragment;
    "setPaymentDomain(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPaymentSkill(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPaymentPayout(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getPayment(uint256)": FunctionFragment;
    "claimPayment(uint256,address)": FunctionFragment;
    "getPaymentCount()": FunctionFragment;
    "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "getTaskCount()": FunctionFragment;
    "getTaskChangeNonce(uint256)": FunctionFragment;
    "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": FunctionFragment;
    "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": FunctionFragment;
    "submitTaskWorkRating(uint256,uint8,bytes32)": FunctionFragment;
    "revealTaskWorkRating(uint256,uint8,uint8,bytes32)": FunctionFragment;
    "generateSecret(bytes32,uint256)": FunctionFragment;
    "getTaskWorkRatingSecretsInfo(uint256)": FunctionFragment;
    "getTaskWorkRatingSecret(uint256,uint8)": FunctionFragment;
    "setTaskManagerRole(uint256,address,uint256,uint256)": FunctionFragment;
    "setTaskEvaluatorRole(uint256,address)": FunctionFragment;
    "setTaskWorkerRole(uint256,address)": FunctionFragment;
    "removeTaskEvaluatorRole(uint256)": FunctionFragment;
    "removeTaskWorkerRole(uint256)": FunctionFragment;
    "setTaskSkill(uint256,uint256)": FunctionFragment;
    "setTaskDomain(uint256,uint256)": FunctionFragment;
    "setTaskBrief(uint256,bytes32)": FunctionFragment;
    "setTaskDueDate(uint256,uint256)": FunctionFragment;
    "submitTaskDeliverable(uint256,bytes32)": FunctionFragment;
    "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)": FunctionFragment;
    "finalizeTask(uint256)": FunctionFragment;
    "cancelTask(uint256)": FunctionFragment;
    "completeTask(uint256)": FunctionFragment;
    "getTask(uint256)": FunctionFragment;
    "getTaskRole(uint256,uint8)": FunctionFragment;
    "setRewardInverse(uint256)": FunctionFragment;
    "getRewardInverse()": FunctionFragment;
    "getTaskPayout(uint256,uint8,address)": FunctionFragment;
    "setTaskManagerPayout(uint256,address,uint256)": FunctionFragment;
    "setTaskEvaluatorPayout(uint256,address,uint256)": FunctionFragment;
    "setTaskWorkerPayout(uint256,address,uint256)": FunctionFragment;
    "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "claimTaskPayout(uint256,uint8,address)": FunctionFragment;
    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])": FunctionFragment;
    "getRewardPayoutInfo(uint256)": FunctionFragment;
    "finalizeRewardPayout(uint256)": FunctionFragment;
    "getFundingPot(uint256)": FunctionFragment;
    "getFundingPotCount()": FunctionFragment;
    "getFundingPotBalance(uint256,address)": FunctionFragment;
    "getFundingPotPayout(uint256,address)": FunctionFragment;
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "claimColonyFunds(address)": FunctionFragment;
    "getNonRewardPotsTotal(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveExitRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numRecoveryRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageSlotRecovery",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkNotAdditionalProtectedVariable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColonyNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRootRole",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArchitectureRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdministrationRole",
    values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserRole",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseColony",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapColony",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerColonyLabel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDomain",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReputationProof",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPayment",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePayment",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentRecipient",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentDomain",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentSkill",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentPayout",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeTask",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskChangeNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTaskChange",
    values: [
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTaskRoleAssignment",
    values: [
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskWorkRating",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealTaskWorkRating",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSecret",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskWorkRatingSecretsInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskWorkRatingSecret",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskManagerRole",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskEvaluatorRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskWorkerRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTaskEvaluatorRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTaskWorkerRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskSkill",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskDomain",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskBrief",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskDueDate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskDeliverable",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskDeliverableAndRating",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskRole",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardInverse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardInverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskManagerPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskEvaluatorPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaskWorkerPayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllTaskPayouts",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTaskPayout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startNextRewardPayout",
    values: [string, BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardPayout",
    values: [
      BigNumberish,
      BigNumberish[],
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPayoutInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRewardPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingPotPayout",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveFundsBetweenPots",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimColonyFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonRewardPotsTotal",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveExitRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRecoveryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageSlotRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNotAdditionalProtectedVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getColonyNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRootRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArchitectureRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdministrationRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialiseColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapColony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerColonyLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDomain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReputationProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskChangeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTaskChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTaskRoleAssignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskWorkRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealTaskWorkRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskWorkRatingSecretsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskWorkRatingSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskManagerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskEvaluatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTaskEvaluatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTaskWorkerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskBrief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskDueDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskDeliverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskDeliverableAndRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardInverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskManagerPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskEvaluatorPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaskWorkerPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllTaskPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTaskPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNextRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPayoutInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRewardPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingPotPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveFundsBetweenPots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimColonyFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonRewardPotsTotal",
    data: BytesLike
  ): Result;

  events: {
    "ColonyInitialised(address,address)": EventFragment;
    "ColonyBootstrapped(address[],int256[])": EventFragment;
    "ColonyUpgraded(uint256,uint256)": EventFragment;
    "ColonyRoleSet(address,uint256,uint8,bool)": EventFragment;
    "ColonyFundsMovedBetweenFundingPots(uint256,uint256,uint256,address)": EventFragment;
    "ColonyFundsClaimed(address,uint256,uint256)": EventFragment;
    "RewardPayoutCycleStarted(uint256)": EventFragment;
    "RewardPayoutCycleEnded(uint256)": EventFragment;
    "RewardPayoutClaimed(uint256,address,uint256,uint256)": EventFragment;
    "ColonyRewardInverseSet(uint256)": EventFragment;
    "PaymentAdded(uint256)": EventFragment;
    "TaskAdded(uint256)": EventFragment;
    "TaskBriefSet(uint256,bytes32)": EventFragment;
    "TaskDueDateSet(uint256,uint256)": EventFragment;
    "TaskDomainSet(uint256,uint256)": EventFragment;
    "TaskSkillSet(uint256,uint256)": EventFragment;
    "TaskRoleUserSet(uint256,uint8,address)": EventFragment;
    "TaskPayoutSet(uint256,uint8,address,uint256)": EventFragment;
    "TaskDeliverableSubmitted(uint256,bytes32)": EventFragment;
    "TaskCompleted(uint256)": EventFragment;
    "TaskWorkRatingRevealed(uint256,uint8,uint8)": EventFragment;
    "TaskFinalized(uint256)": EventFragment;
    "PayoutClaimed(uint256,address,uint256)": EventFragment;
    "TaskCanceled(uint256)": EventFragment;
    "DomainAdded(uint256)": EventFragment;
    "FundingPotAdded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ColonyInitialised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyBootstrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRoleSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ColonyFundsMovedBetweenFundingPots"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyFundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ColonyRewardInverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskBriefSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDueDateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDomainSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSkillSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRoleUserSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskPayoutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDeliverableSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskWorkRatingRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingPotAdded"): EventFragment;
}

export type ColonyInitialisedEvent = TypedEvent<
  [string, string],
  { colonyNetwork: string; token: string }
>;

export type ColonyInitialisedEventFilter =
  TypedEventFilter<ColonyInitialisedEvent>;

export type ColonyBootstrappedEvent = TypedEvent<
  [string[], BigNumber[]],
  { users: string[]; amounts: BigNumber[] }
>;

export type ColonyBootstrappedEventFilter =
  TypedEventFilter<ColonyBootstrappedEvent>;

export type ColonyUpgradedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldVersion: BigNumber; newVersion: BigNumber }
>;

export type ColonyUpgradedEventFilter = TypedEventFilter<ColonyUpgradedEvent>;

export type ColonyRoleSetEvent = TypedEvent<
  [string, BigNumber, number, boolean],
  { user: string; domainId: BigNumber; role: number; setTo: boolean }
>;

export type ColonyRoleSetEventFilter = TypedEventFilter<ColonyRoleSetEvent>;

export type ColonyFundsMovedBetweenFundingPotsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  { fromPot: BigNumber; toPot: BigNumber; amount: BigNumber; token: string }
>;

export type ColonyFundsMovedBetweenFundingPotsEventFilter =
  TypedEventFilter<ColonyFundsMovedBetweenFundingPotsEvent>;

export type ColonyFundsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { token: string; fee: BigNumber; payoutRemainder: BigNumber }
>;

export type ColonyFundsClaimedEventFilter =
  TypedEventFilter<ColonyFundsClaimedEvent>;

export type RewardPayoutCycleStartedEvent = TypedEvent<
  [BigNumber],
  { rewardPayoutId: BigNumber }
>;

export type RewardPayoutCycleStartedEventFilter =
  TypedEventFilter<RewardPayoutCycleStartedEvent>;

export type RewardPayoutCycleEndedEvent = TypedEvent<
  [BigNumber],
  { rewardPayoutId: BigNumber }
>;

export type RewardPayoutCycleEndedEventFilter =
  TypedEventFilter<RewardPayoutCycleEndedEvent>;

export type RewardPayoutClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    rewardPayoutId: BigNumber;
    user: string;
    fee: BigNumber;
    rewardRemainder: BigNumber;
  }
>;

export type RewardPayoutClaimedEventFilter =
  TypedEventFilter<RewardPayoutClaimedEvent>;

export type ColonyRewardInverseSetEvent = TypedEvent<
  [BigNumber],
  { rewardInverse: BigNumber }
>;

export type ColonyRewardInverseSetEventFilter =
  TypedEventFilter<ColonyRewardInverseSetEvent>;

export type PaymentAddedEvent = TypedEvent<
  [BigNumber],
  { paymentId: BigNumber }
>;

export type PaymentAddedEventFilter = TypedEventFilter<PaymentAddedEvent>;

export type TaskAddedEvent = TypedEvent<[BigNumber], { taskId: BigNumber }>;

export type TaskAddedEventFilter = TypedEventFilter<TaskAddedEvent>;

export type TaskBriefSetEvent = TypedEvent<
  [BigNumber, string],
  { taskId: BigNumber; specificationHash: string }
>;

export type TaskBriefSetEventFilter = TypedEventFilter<TaskBriefSetEvent>;

export type TaskDueDateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { taskId: BigNumber; dueDate: BigNumber }
>;

export type TaskDueDateSetEventFilter = TypedEventFilter<TaskDueDateSetEvent>;

export type TaskDomainSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { taskId: BigNumber; domainId: BigNumber }
>;

export type TaskDomainSetEventFilter = TypedEventFilter<TaskDomainSetEvent>;

export type TaskSkillSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { taskId: BigNumber; skillId: BigNumber }
>;

export type TaskSkillSetEventFilter = TypedEventFilter<TaskSkillSetEvent>;

export type TaskRoleUserSetEvent = TypedEvent<
  [BigNumber, number, string],
  { taskId: BigNumber; role: number; user: string }
>;

export type TaskRoleUserSetEventFilter = TypedEventFilter<TaskRoleUserSetEvent>;

export type TaskPayoutSetEvent = TypedEvent<
  [BigNumber, number, string, BigNumber],
  { taskId: BigNumber; role: number; token: string; amount: BigNumber }
>;

export type TaskPayoutSetEventFilter = TypedEventFilter<TaskPayoutSetEvent>;

export type TaskDeliverableSubmittedEvent = TypedEvent<
  [BigNumber, string],
  { taskId: BigNumber; deliverableHash: string }
>;

export type TaskDeliverableSubmittedEventFilter =
  TypedEventFilter<TaskDeliverableSubmittedEvent>;

export type TaskCompletedEvent = TypedEvent<[BigNumber], { taskId: BigNumber }>;

export type TaskCompletedEventFilter = TypedEventFilter<TaskCompletedEvent>;

export type TaskWorkRatingRevealedEvent = TypedEvent<
  [BigNumber, number, number],
  { taskId: BigNumber; role: number; rating: number }
>;

export type TaskWorkRatingRevealedEventFilter =
  TypedEventFilter<TaskWorkRatingRevealedEvent>;

export type TaskFinalizedEvent = TypedEvent<[BigNumber], { taskId: BigNumber }>;

export type TaskFinalizedEventFilter = TypedEventFilter<TaskFinalizedEvent>;

export type PayoutClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { fundingPotId: BigNumber; token: string; amount: BigNumber }
>;

export type PayoutClaimedEventFilter = TypedEventFilter<PayoutClaimedEvent>;

export type TaskCanceledEvent = TypedEvent<[BigNumber], { taskId: BigNumber }>;

export type TaskCanceledEventFilter = TypedEventFilter<TaskCanceledEvent>;

export type DomainAddedEvent = TypedEvent<[BigNumber], { domainId: BigNumber }>;

export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;

export type FundingPotAddedEvent = TypedEvent<
  [BigNumber],
  { fundingPotId: BigNumber }
>;

export type FundingPotAddedEventFilter = TypedEventFilter<FundingPotAddedEvent>;

export interface IColony extends BaseContract {
  contractName: "IColony";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IColonyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numRecoveryRoles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numRoles: BigNumber }>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInRecoveryMode(
      overrides?: CallOverrides
    ): Promise<[boolean] & { inRecoveryMode: boolean }>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyAuthority: string }>;

    owner(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyOwner: string }>;

    version(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { colonyVersion: BigNumber }>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getColonyNetwork(
      overrides?: CallOverrides
    ): Promise<[string] & { colonyNetwork: string }>;

    getToken(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenAddress: string }>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasRole: boolean }>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
      ] & {
        domain: [BigNumber, BigNumber] & {
          skillId: BigNumber;
          fundingPotId: BigNumber;
        };
      }
    >;

    getDomainCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
          recipient: string;
          finalized: boolean;
          fundingPotId: BigNumber;
          domainId: BigNumber;
          skills: BigNumber[];
        }
      ] & {
        payment: [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
          recipient: string;
          finalized: boolean;
          fundingPotId: BigNumber;
          domainId: BigNumber;
          skills: BigNumber[];
        };
      }
    >;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPaymentCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTaskCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { secret: string }>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { secret: string }>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, boolean, number] & {
          user: string;
          rateFail: boolean;
          rating: number;
        }
      ] & {
        role: [string, boolean, number] & {
          user: string;
          rateFail: boolean;
          rating: number;
        };
      }
    >;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardInverse(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardInverse: BigNumber }>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
          reputationState: string;
          colonyWideReputation: BigNumber;
          totalTokens: BigNumber;
          amount: BigNumber;
          tokenAddress: string;
          blockTimestamp: BigNumber;
        }
      ] & {
        rewardPayoutCycle: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber
        ] & {
          reputationState: string;
          colonyWideReputation: BigNumber;
          totalTokens: BigNumber;
          amount: BigNumber;
          tokenAddress: string;
          blockTimestamp: BigNumber;
        };
      }
    >;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    getFundingPotCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payout: BigNumber }>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  approveExitRecovery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

  setStorageSlotRecovery(
    _slot: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

  checkNotAdditionalProtectedVariable(
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  removeRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoveryRole(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  upgrade(
    _newVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getColonyNetwork(overrides?: CallOverrides): Promise<string>;

  getToken(overrides?: CallOverrides): Promise<string>;

  setRootRole(
    _user: string,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArchitectureRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdministrationRole(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _user: string,
    _domainId: BigNumberish,
    _setTo: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasUserRole(
    _user: string,
    _domainId: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialiseColony(
    _colonyNetworkAddress: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bootstrapColony(
    _users: string[],
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTokens(
    _wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerColonyLabel(
    colonyName: string,
    orbitdb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _parentDomainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDomain(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
  >;

  getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

  verifyReputationProof(
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  addPayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _recipient: string,
    _token: string,
    _amount: BigNumberish,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizePayment(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentRecipient(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentDomain(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _domainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentSkill(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentPayout(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPayment(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
      recipient: string;
      finalized: boolean;
      fundingPotId: BigNumber;
      domainId: BigNumber;
      skills: BigNumber[];
    }
  >;

  claimPayment(
    _id: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

  makeTask(
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    _specificationHash: BytesLike,
    _domainId: BigNumberish,
    _skillId: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTaskChangeNonce(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeTaskChange(
    _sigV: BigNumberish[],
    _sigR: BytesLike[],
    _sigS: BytesLike[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeTaskRoleAssignment(
    _sigV: BigNumberish[],
    _sigR: BytesLike[],
    _sigS: BytesLike[],
    _mode: BigNumberish[],
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _ratingSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealTaskWorkRating(
    _id: BigNumberish,
    _role: BigNumberish,
    _rating: BigNumberish,
    _salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateSecret(
    _salt: BytesLike,
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTaskWorkRatingSecretsInfo(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nSecrets: BigNumber; lastSubmittedAt: BigNumber }
  >;

  getTaskWorkRatingSecret(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setTaskManagerRole(
    _id: BigNumberish,
    _user: string,
    _permissionDomainId: BigNumberish,
    _childSkillIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskEvaluatorRole(
    _id: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskWorkerRole(
    _id: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTaskEvaluatorRole(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTaskWorkerRole(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskSkill(
    _id: BigNumberish,
    _skillId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskDomain(
    _id: BigNumberish,
    _domainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskBrief(
    _id: BigNumberish,
    _specificationHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskDueDate(
    _id: BigNumberish,
    _dueDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskDeliverable(
    _id: BigNumberish,
    _deliverableHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskDeliverableAndRating(
    _id: BigNumberish,
    _deliverableHash: BytesLike,
    _ratingSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTask(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      specificationHash: string;
      deliverableHash: string;
      status: number;
      dueDate: BigNumber;
      fundingPotId: BigNumber;
      completionTimestamp: BigNumber;
      domainId: BigNumber;
      skillIds: BigNumber[];
    }
  >;

  getTaskRole(
    _id: BigNumberish,
    _role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, number] & {
      user: string;
      rateFail: boolean;
      rating: number;
    }
  >;

  setRewardInverse(
    _rewardInverse: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

  getTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setTaskManagerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskEvaluatorPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaskWorkerPayout(
    _id: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllTaskPayouts(
    _id: BigNumberish,
    _token: string,
    _managerAmount: BigNumberish,
    _evaluatorAmount: BigNumberish,
    _workerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTaskPayout(
    _id: BigNumberish,
    _role: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNextRewardPayout(
    _token: string,
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewardPayout(
    _payoutId: BigNumberish,
    _squareRoots: BigNumberish[],
    key: BytesLike,
    value: BytesLike,
    branchMask: BigNumberish,
    siblings: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardPayoutInfo(
    _payoutId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      reputationState: string;
      colonyWideReputation: BigNumber;
      totalTokens: BigNumber;
      amount: BigNumber;
      tokenAddress: string;
      blockTimestamp: BigNumber;
    }
  >;

  finalizeRewardPayout(
    _payoutId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFundingPot(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      associatedType: number;
      associatedTypeId: BigNumber;
      payoutsWeCannotMake: BigNumber;
    }
  >;

  getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

  getFundingPotBalance(
    _potId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingPotPayout(
    _potId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moveFundsBetweenPots(
    _permissionDomainId: BigNumberish,
    _fromChildSkillIndex: BigNumberish,
    _toChildSkillIndex: BigNumberish,
    _fromPot: BigNumberish,
    _toPot: BigNumberish,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimColonyFunds(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonRewardPotsTotal(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    approveExitRecovery(overrides?: CallOverrides): Promise<void>;

    exitRecoveryMode(overrides?: CallOverrides): Promise<void>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    setRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;

    enterRecoveryMode(overrides?: CallOverrides): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getColonyNetwork(overrides?: CallOverrides): Promise<string>;

    getToken(overrides?: CallOverrides): Promise<string>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintTokens(_wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { skillId: BigNumber; fundingPotId: BigNumber }
    >;

    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber[]] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
      }
    >;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
      }
    >;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
      }
    >;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
      }
    >;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
      }
    >;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
      }
    >;

    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimColonyFunds(_token: string, overrides?: CallOverrides): Promise<void>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ColonyInitialised(address,address)"(
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;
    ColonyInitialised(
      colonyNetwork?: null,
      token?: null
    ): ColonyInitialisedEventFilter;

    "ColonyBootstrapped(address[],int256[])"(
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;
    ColonyBootstrapped(
      users?: null,
      amounts?: null
    ): ColonyBootstrappedEventFilter;

    "ColonyUpgraded(uint256,uint256)"(
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;
    ColonyUpgraded(
      oldVersion?: null,
      newVersion?: null
    ): ColonyUpgradedEventFilter;

    "ColonyRoleSet(address,uint256,uint8,bool)"(
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;
    ColonyRoleSet(
      user?: string | null,
      domainId?: BigNumberish | null,
      role?: BigNumberish | null,
      setTo?: null
    ): ColonyRoleSetEventFilter;

    "ColonyFundsMovedBetweenFundingPots(uint256,uint256,uint256,address)"(
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;
    ColonyFundsMovedBetweenFundingPots(
      fromPot?: BigNumberish | null,
      toPot?: BigNumberish | null,
      amount?: null,
      token?: null
    ): ColonyFundsMovedBetweenFundingPotsEventFilter;

    "ColonyFundsClaimed(address,uint256,uint256)"(
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;
    ColonyFundsClaimed(
      token?: null,
      fee?: null,
      payoutRemainder?: null
    ): ColonyFundsClaimedEventFilter;

    "RewardPayoutCycleStarted(uint256)"(
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;
    RewardPayoutCycleStarted(
      rewardPayoutId?: null
    ): RewardPayoutCycleStartedEventFilter;

    "RewardPayoutCycleEnded(uint256)"(
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;
    RewardPayoutCycleEnded(
      rewardPayoutId?: null
    ): RewardPayoutCycleEndedEventFilter;

    "RewardPayoutClaimed(uint256,address,uint256,uint256)"(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;
    RewardPayoutClaimed(
      rewardPayoutId?: null,
      user?: null,
      fee?: null,
      rewardRemainder?: null
    ): RewardPayoutClaimedEventFilter;

    "ColonyRewardInverseSet(uint256)"(
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;
    ColonyRewardInverseSet(
      rewardInverse?: null
    ): ColonyRewardInverseSetEventFilter;

    "PaymentAdded(uint256)"(paymentId?: null): PaymentAddedEventFilter;
    PaymentAdded(paymentId?: null): PaymentAddedEventFilter;

    "TaskAdded(uint256)"(taskId?: null): TaskAddedEventFilter;
    TaskAdded(taskId?: null): TaskAddedEventFilter;

    "TaskBriefSet(uint256,bytes32)"(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;
    TaskBriefSet(
      taskId?: BigNumberish | null,
      specificationHash?: null
    ): TaskBriefSetEventFilter;

    "TaskDueDateSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;
    TaskDueDateSet(
      taskId?: BigNumberish | null,
      dueDate?: null
    ): TaskDueDateSetEventFilter;

    "TaskDomainSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      domainId?: BigNumberish | null
    ): TaskDomainSetEventFilter;
    TaskDomainSet(
      taskId?: BigNumberish | null,
      domainId?: BigNumberish | null
    ): TaskDomainSetEventFilter;

    "TaskSkillSet(uint256,uint256)"(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;
    TaskSkillSet(
      taskId?: BigNumberish | null,
      skillId?: BigNumberish | null
    ): TaskSkillSetEventFilter;

    "TaskRoleUserSet(uint256,uint8,address)"(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;
    TaskRoleUserSet(
      taskId?: BigNumberish | null,
      role?: null,
      user?: string | null
    ): TaskRoleUserSetEventFilter;

    "TaskPayoutSet(uint256,uint8,address,uint256)"(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;
    TaskPayoutSet(
      taskId?: BigNumberish | null,
      role?: null,
      token?: null,
      amount?: null
    ): TaskPayoutSetEventFilter;

    "TaskDeliverableSubmitted(uint256,bytes32)"(
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;
    TaskDeliverableSubmitted(
      taskId?: BigNumberish | null,
      deliverableHash?: null
    ): TaskDeliverableSubmittedEventFilter;

    "TaskCompleted(uint256)"(
      taskId?: BigNumberish | null
    ): TaskCompletedEventFilter;
    TaskCompleted(taskId?: BigNumberish | null): TaskCompletedEventFilter;

    "TaskWorkRatingRevealed(uint256,uint8,uint8)"(
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;
    TaskWorkRatingRevealed(
      taskId?: BigNumberish | null,
      role?: null,
      rating?: null
    ): TaskWorkRatingRevealedEventFilter;

    "TaskFinalized(uint256)"(
      taskId?: BigNumberish | null
    ): TaskFinalizedEventFilter;
    TaskFinalized(taskId?: BigNumberish | null): TaskFinalizedEventFilter;

    "PayoutClaimed(uint256,address,uint256)"(
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimedEventFilter;
    PayoutClaimed(
      fundingPotId?: BigNumberish | null,
      token?: null,
      amount?: null
    ): PayoutClaimedEventFilter;

    "TaskCanceled(uint256)"(
      taskId?: BigNumberish | null
    ): TaskCanceledEventFilter;
    TaskCanceled(taskId?: BigNumberish | null): TaskCanceledEventFilter;

    "DomainAdded(uint256)"(domainId?: null): DomainAddedEventFilter;
    DomainAdded(domainId?: null): DomainAddedEventFilter;

    "FundingPotAdded(uint256)"(fundingPotId?: null): FundingPotAddedEventFilter;
    FundingPotAdded(fundingPotId?: null): FundingPotAddedEventFilter;
  };

  estimateGas: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getColonyNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveExitRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numRecoveryRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStorageSlotRecovery(
      _slot: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkNotAdditionalProtectedVariable(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryRole(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getColonyNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRootRole(
      _user: string,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArchitectureRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdministrationRole(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _user: string,
      _domainId: BigNumberish,
      _setTo: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasUserRole(
      _user: string,
      _domainId: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialiseColony(
      _colonyNetworkAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bootstrapColony(
      _users: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTokens(
      _wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerColonyLabel(
      colonyName: string,
      orbitdb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _parentDomainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDomain(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyReputationProof(
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _recipient: string,
      _token: string,
      _amount: BigNumberish,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizePayment(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentRecipient(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentDomain(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentSkill(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentPayout(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPayment(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPayment(
      _id: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeTask(
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      _specificationHash: BytesLike,
      _domainId: BigNumberish,
      _skillId: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTaskCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaskChangeNonce(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTaskChange(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeTaskRoleAssignment(
      _sigV: BigNumberish[],
      _sigR: BytesLike[],
      _sigS: BytesLike[],
      _mode: BigNumberish[],
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealTaskWorkRating(
      _id: BigNumberish,
      _role: BigNumberish,
      _rating: BigNumberish,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateSecret(
      _salt: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskWorkRatingSecretsInfo(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskWorkRatingSecret(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTaskManagerRole(
      _id: BigNumberish,
      _user: string,
      _permissionDomainId: BigNumberish,
      _childSkillIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskEvaluatorRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskWorkerRole(
      _id: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTaskEvaluatorRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTaskWorkerRole(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskSkill(
      _id: BigNumberish,
      _skillId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskDomain(
      _id: BigNumberish,
      _domainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskBrief(
      _id: BigNumberish,
      _specificationHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskDueDate(
      _id: BigNumberish,
      _dueDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskDeliverable(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskDeliverableAndRating(
      _id: BigNumberish,
      _deliverableHash: BytesLike,
      _ratingSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskRole(
      _id: BigNumberish,
      _role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardInverse(
      _rewardInverse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardInverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTaskManagerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskEvaluatorPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaskWorkerPayout(
      _id: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllTaskPayouts(
      _id: BigNumberish,
      _token: string,
      _managerAmount: BigNumberish,
      _evaluatorAmount: BigNumberish,
      _workerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTaskPayout(
      _id: BigNumberish,
      _role: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNextRewardPayout(
      _token: string,
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardPayout(
      _payoutId: BigNumberish,
      _squareRoots: BigNumberish[],
      key: BytesLike,
      value: BytesLike,
      branchMask: BigNumberish,
      siblings: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardPayoutInfo(
      _payoutId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeRewardPayout(
      _payoutId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFundingPot(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingPotCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingPotBalance(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingPotPayout(
      _potId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveFundsBetweenPots(
      _permissionDomainId: BigNumberish,
      _fromChildSkillIndex: BigNumberish,
      _toChildSkillIndex: BigNumberish,
      _fromPot: BigNumberish,
      _toPot: BigNumberish,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimColonyFunds(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonRewardPotsTotal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
