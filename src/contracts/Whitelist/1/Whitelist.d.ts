/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface WhitelistInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    executeMetaTransaction: TypedFunctionDescription<{
      encode([_user, _payload, _sigR, _sigS, _sigV]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    getCapabilityRoles: TypedFunctionDescription<{
      encode([_sig]: [Arrayish]): string;
    }>;

    getChainId: TypedFunctionDescription<{ encode([]: []): string }>;

    getColony: TypedFunctionDescription<{ encode([]: []): string }>;

    getDeprecated: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    verify: TypedFunctionDescription<{
      encode([_owner, _nonce, _chainId, _payload, _sigR, _sigS, _sigV]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    getMetatransactionNonce: TypedFunctionDescription<{
      encode([userAddress]: [string]): string;
    }>;

    identifier: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    install: TypedFunctionDescription<{ encode([_colony]: [string]): string }>;

    finishUpgrade: TypedFunctionDescription<{ encode([]: []): string }>;

    deprecate: TypedFunctionDescription<{
      encode([_deprecated]: [boolean]): string;
    }>;

    uninstall: TypedFunctionDescription<{ encode([]: []): string }>;

    initialise: TypedFunctionDescription<{
      encode([_useApprovals, _agreementHash]: [boolean, string]): string;
    }>;

    approveUsers: TypedFunctionDescription<{
      encode([_users, _status]: [string[], boolean]): string;
    }>;

    signAgreement: TypedFunctionDescription<{
      encode([_agreementHash]: [string]): string;
    }>;

    isApproved: TypedFunctionDescription<{ encode([_user]: [string]): string }>;

    getUseApprovals: TypedFunctionDescription<{ encode([]: []): string }>;

    getAgreementHash: TypedFunctionDescription<{ encode([]: []): string }>;

    getApproval: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    getSignature: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;
  };

  events: {
    AgreementSigned: TypedEventDescription<{
      encodeTopics([_user]: [string | null]): string[];
    }>;

    ExtensionInitialised: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    MetaTransactionExecuted: TypedEventDescription<{
      encodeTopics([user, relayerAddress, functionSignature]: [
        null,
        null,
        null
      ]): string[];
    }>;

    UserApproved: TypedEventDescription<{
      encodeTopics([_user, _status]: [string | null, null]): string[];
    }>;
  };
}

export class Whitelist extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Whitelist;
  attach(addressOrName: string): Whitelist;
  deployed(): Promise<Whitelist>;

  on(event: EventFilter | string, listener: Listener): Whitelist;
  once(event: EventFilter | string, listener: Listener): Whitelist;
  addListener(eventName: EventFilter | string, listener: Listener): Whitelist;
  removeAllListeners(eventName: EventFilter | string): Whitelist;
  removeListener(eventName: any, listener: Listener): Whitelist;

  interface: WhitelistInterface;

  functions: {
    authority(overrides?: UnsignedTransaction): Promise<string>;

    "authority()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getChainId(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getChainId()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getColony(overrides?: UnsignedTransaction): Promise<string>;

    "getColony()"(overrides?: UnsignedTransaction): Promise<string>;

    getDeprecated(overrides?: UnsignedTransaction): Promise<boolean>;

    "getDeprecated()"(overrides?: UnsignedTransaction): Promise<boolean>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * Returns the identifier of the extension
     */
    "identifier()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Returns the version of the extension
     */
    "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    "install(address)"(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Called when upgrading the extension
     */
    "finishUpgrade()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    /**
     * Called when uninstalling the extension
     */
    "uninstall()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Initialise the extension
     * @param _agreementHash An agreement hash (such as an IPFS URI)
     * @param _useApprovals Whether or not to require administrative approval
     */
    initialise(
      _useApprovals: boolean,
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Initialise the extension
     * @param _agreementHash An agreement hash (such as an IPFS URI)
     * @param _useApprovals Whether or not to require administrative approval
     */
    "initialise(bool,string)"(
      _useApprovals: boolean,
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Sets user statuses in the whitelist
     * @param _status The whitelist status to set
     * @param _users An array of user addresses
     */
    approveUsers(
      _users: string[],
      _status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Sets user statuses in the whitelist
     * @param _status The whitelist status to set
     * @param _users An array of user addresses
     */
    "approveUsers(address[],bool)"(
      _users: string[],
      _status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * The user's signature on the agreement
     * @param _agreementHash The agreement hash being signed
     */
    signAgreement(
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * The user's signature on the agreement
     * @param _agreementHash The agreement hash being signed
     */
    "signAgreement(string)"(
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    /**
     * Get the user's overall whitelist status
     * @param _user The address of the user
     */
    isApproved(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Get the user's overall whitelist status
     * @param _user The address of the user
     */
    "isApproved(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Get the useApprovals boolean
     */
    getUseApprovals(overrides?: UnsignedTransaction): Promise<boolean>;

    /**
     * Get the useApprovals boolean
     */
    "getUseApprovals()"(overrides?: UnsignedTransaction): Promise<boolean>;

    /**
     * Get the agreementHash
     */
    getAgreementHash(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * Get the agreementHash
     */
    "getAgreementHash()"(overrides?: UnsignedTransaction): Promise<string>;

    /**
     * Get the user's approval status
     * @param _user The address of the user
     */
    getApproval(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Get the user's approval status
     * @param _user The address of the user
     */
    "getApproval(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Get the user's signature status
     * @param _user The address of the user
     */
    getSignature(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    /**
     * Get the user's signature status
     * @param _user The address of the user
     */
    "getSignature(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;
  };

  authority(overrides?: UnsignedTransaction): Promise<string>;

  "authority()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
   * @param _payload Function call to make via meta transaction
   * @param _sigR R part of the signature
   * @param _sigS S part of the signature
   * @param _sigV V part of the signature
   * @param _user Address of user trying to do meta transaction
   */
  executeMetaTransaction(
    _user: string,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
   * @param _payload Function call to make via meta transaction
   * @param _sigR R part of the signature
   * @param _sigS S part of the signature
   * @param _sigV V part of the signature
   * @param _user Address of user trying to do meta transaction
   */
  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    _user: string,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getCapabilityRoles(
    _sig: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getCapabilityRoles(bytes4)"(
    _sig: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getChainId(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getChainId()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getColony(overrides?: UnsignedTransaction): Promise<string>;

  "getColony()"(overrides?: UnsignedTransaction): Promise<string>;

  getDeprecated(overrides?: UnsignedTransaction): Promise<boolean>;

  "getDeprecated()"(overrides?: UnsignedTransaction): Promise<boolean>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  verify(
    _owner: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
    _owner: string,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _payload: Arrayish,
    _sigR: Arrayish,
    _sigS: Arrayish,
    _sigV: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  getMetatransactionNonce(
    userAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getMetatransactionNonce(address)"(
    userAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  /**
   * Returns the identifier of the extension
   */
  identifier(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * Returns the identifier of the extension
   */
  "identifier()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * Returns the version of the extension
   */
  version(overrides?: UnsignedTransaction): Promise<BigNumber>;

  /**
   * Returns the version of the extension
   */
  "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  /**
   * Configures the extension
   * @param _colony The colony in which the extension holds permissions
   */
  install(
    _colony: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Configures the extension
   * @param _colony The colony in which the extension holds permissions
   */
  "install(address)"(
    _colony: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  finishUpgrade(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  /**
   * Called when upgrading the extension
   */
  "finishUpgrade()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   */
  deprecate(
    _deprecated: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Called when deprecating (or undeprecating) the extension
   */
  "deprecate(bool)"(
    _deprecated: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  uninstall(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  /**
   * Called when uninstalling the extension
   */
  "uninstall()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  /**
   * Initialise the extension
   * @param _agreementHash An agreement hash (such as an IPFS URI)
   * @param _useApprovals Whether or not to require administrative approval
   */
  initialise(
    _useApprovals: boolean,
    _agreementHash: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Initialise the extension
   * @param _agreementHash An agreement hash (such as an IPFS URI)
   * @param _useApprovals Whether or not to require administrative approval
   */
  "initialise(bool,string)"(
    _useApprovals: boolean,
    _agreementHash: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Sets user statuses in the whitelist
   * @param _status The whitelist status to set
   * @param _users An array of user addresses
   */
  approveUsers(
    _users: string[],
    _status: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Sets user statuses in the whitelist
   * @param _status The whitelist status to set
   * @param _users An array of user addresses
   */
  "approveUsers(address[],bool)"(
    _users: string[],
    _status: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * The user's signature on the agreement
   * @param _agreementHash The agreement hash being signed
   */
  signAgreement(
    _agreementHash: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * The user's signature on the agreement
   * @param _agreementHash The agreement hash being signed
   */
  "signAgreement(string)"(
    _agreementHash: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  /**
   * Get the user's overall whitelist status
   * @param _user The address of the user
   */
  isApproved(_user: string, overrides?: UnsignedTransaction): Promise<boolean>;

  /**
   * Get the user's overall whitelist status
   * @param _user The address of the user
   */
  "isApproved(address)"(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Get the useApprovals boolean
   */
  getUseApprovals(overrides?: UnsignedTransaction): Promise<boolean>;

  /**
   * Get the useApprovals boolean
   */
  "getUseApprovals()"(overrides?: UnsignedTransaction): Promise<boolean>;

  /**
   * Get the agreementHash
   */
  getAgreementHash(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * Get the agreementHash
   */
  "getAgreementHash()"(overrides?: UnsignedTransaction): Promise<string>;

  /**
   * Get the user's approval status
   * @param _user The address of the user
   */
  getApproval(_user: string, overrides?: UnsignedTransaction): Promise<boolean>;

  /**
   * Get the user's approval status
   * @param _user The address of the user
   */
  "getApproval(address)"(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Get the user's signature status
   * @param _user The address of the user
   */
  getSignature(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  /**
   * Get the user's signature status
   * @param _user The address of the user
   */
  "getSignature(address)"(
    _user: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  filters: {
    AgreementSigned(_user: string | null): EventFilter;

    ExtensionInitialised(): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    MetaTransactionExecuted(
      user: null,
      relayerAddress: null,
      functionSignature: null
    ): EventFilter;

    UserApproved(_user: string | null, _status: null): EventFilter;
  };

  estimate: {
    authority(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "authority()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param _payload Function call to make via meta transaction
     * @param _sigR R part of the signature
     * @param _sigS S part of the signature
     * @param _sigV V part of the signature
     * @param _user Address of user trying to do meta transaction
     */
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      _user: string,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getCapabilityRoles(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getCapabilityRoles(bytes4)"(
      _sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getChainId(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getChainId()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getColony(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getColony()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getDeprecated(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getDeprecated()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    verify(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(
      _owner: string,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _payload: Arrayish,
      _sigR: Arrayish,
      _sigS: Arrayish,
      _sigV: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getMetatransactionNonce(
      userAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getMetatransactionNonce(address)"(
      userAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    identifier(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Returns the identifier of the extension
     */
    "identifier()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Returns the version of the extension
     */
    version(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Returns the version of the extension
     */
    "version()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    install(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Configures the extension
     * @param _colony The colony in which the extension holds permissions
     */
    "install(address)"(
      _colony: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Called when upgrading the extension
     */
    finishUpgrade(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Called when upgrading the extension
     */
    "finishUpgrade()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    deprecate(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Called when deprecating (or undeprecating) the extension
     */
    "deprecate(bool)"(
      _deprecated: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    uninstall(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Called when uninstalling the extension
     */
    "uninstall()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Initialise the extension
     * @param _agreementHash An agreement hash (such as an IPFS URI)
     * @param _useApprovals Whether or not to require administrative approval
     */
    initialise(
      _useApprovals: boolean,
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Initialise the extension
     * @param _agreementHash An agreement hash (such as an IPFS URI)
     * @param _useApprovals Whether or not to require administrative approval
     */
    "initialise(bool,string)"(
      _useApprovals: boolean,
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Sets user statuses in the whitelist
     * @param _status The whitelist status to set
     * @param _users An array of user addresses
     */
    approveUsers(
      _users: string[],
      _status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Sets user statuses in the whitelist
     * @param _status The whitelist status to set
     * @param _users An array of user addresses
     */
    "approveUsers(address[],bool)"(
      _users: string[],
      _status: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * The user's signature on the agreement
     * @param _agreementHash The agreement hash being signed
     */
    signAgreement(
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * The user's signature on the agreement
     * @param _agreementHash The agreement hash being signed
     */
    "signAgreement(string)"(
      _agreementHash: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Get the user's overall whitelist status
     * @param _user The address of the user
     */
    isApproved(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Get the user's overall whitelist status
     * @param _user The address of the user
     */
    "isApproved(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Get the useApprovals boolean
     */
    getUseApprovals(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Get the useApprovals boolean
     */
    "getUseApprovals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Get the agreementHash
     */
    getAgreementHash(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Get the agreementHash
     */
    "getAgreementHash()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    /**
     * Get the user's approval status
     * @param _user The address of the user
     */
    getApproval(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Get the user's approval status
     * @param _user The address of the user
     */
    "getApproval(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Get the user's signature status
     * @param _user The address of the user
     */
    getSignature(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    /**
     * Get the user's signature status
     * @param _user The address of the user
     */
    "getSignature(address)"(
      _user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
