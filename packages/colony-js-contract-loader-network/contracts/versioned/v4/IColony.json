{
  "contractName": "IColony",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "approveExitRecovery",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "exitRecoveryMode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numRecoveryRoles",
      "outputs": [
        {
          "name": "numRoles",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "setStorageSlotRecovery",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isInRecoveryMode",
      "outputs": [
        {
          "name": "inRecoveryMode",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_slot",
          "type": "uint256"
        }
      ],
      "name": "checkNotAdditionalProtectedVariable",
      "outputs": [],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeRecoveryRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "setRecoveryRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "enterRecoveryMode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "setTo",
          "type": "bool"
        }
      ],
      "name": "RecoveryRoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "colonyNetwork",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ColonyInitialised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "users",
          "type": "address[]"
        },
        {
          "indexed": false,
          "name": "amounts",
          "type": "int256[]"
        }
      ],
      "name": "ColonyBootstrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "newVersion",
          "type": "uint256"
        }
      ],
      "name": "ColonyUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "domainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "setTo",
          "type": "bool"
        }
      ],
      "name": "ColonyRoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "fromPot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "toPot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ColonyFundsMovedBetweenFundingPots",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "payoutRemainder",
          "type": "uint256"
        }
      ],
      "name": "ColonyFundsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "rewardPayoutId",
          "type": "uint256"
        }
      ],
      "name": "RewardPayoutCycleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "rewardPayoutId",
          "type": "uint256"
        }
      ],
      "name": "RewardPayoutCycleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "rewardPayoutId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "rewardRemainder",
          "type": "uint256"
        }
      ],
      "name": "RewardPayoutClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "rewardInverse",
          "type": "uint256"
        }
      ],
      "name": "ColonyRewardInverseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "expenditureId",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "expenditureId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ExpenditureTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "expenditureId",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "expenditureId",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "expenditureId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ExpenditureRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "expenditureId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "skillId",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureSkillSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "expenditureId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExpenditurePayoutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "name": "PaymentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "specificationHash",
          "type": "bytes32"
        }
      ],
      "name": "TaskBriefSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "dueDate",
          "type": "uint256"
        }
      ],
      "name": "TaskDueDateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "skillId",
          "type": "uint256"
        }
      ],
      "name": "TaskSkillSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        }
      ],
      "name": "TaskRoleUserSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TaskPayoutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deliverableHash",
          "type": "bytes32"
        }
      ],
      "name": "TaskDeliverableSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "rating",
          "type": "uint8"
        }
      ],
      "name": "TaskWorkRatingRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "fundingPotId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayoutClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "domainId",
          "type": "uint256"
        }
      ],
      "name": "DomainAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "fundingPotId",
          "type": "uint256"
        }
      ],
      "name": "FundingPotAdded",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "name": "colonyAuthority",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "colonyOwner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "name": "colonyVersion",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newVersion",
          "type": "uint256"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finishUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getColonyNetwork",
      "outputs": [
        {
          "name": "colonyNetwork",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_setTo",
          "type": "bool"
        }
      ],
      "name": "setRootRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_setTo",
          "type": "bool"
        }
      ],
      "name": "setArbitrationRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_setTo",
          "type": "bool"
        }
      ],
      "name": "setArchitectureRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_setTo",
          "type": "bool"
        }
      ],
      "name": "setFundingRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_setTo",
          "type": "bool"
        }
      ],
      "name": "setAdministrationRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "hasUserRole",
      "outputs": [
        {
          "name": "hasRole",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_childDomainId",
          "type": "uint256"
        }
      ],
      "name": "hasInheritedUserRole",
      "outputs": [
        {
          "name": "hasRole",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "who",
          "type": "address"
        },
        {
          "name": "where",
          "type": "uint256"
        }
      ],
      "name": "getUserRoles",
      "outputs": [
        {
          "name": "roles",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_colonyNetworkAddress",
          "type": "address"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialiseColony",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_users",
          "type": "address[]"
        },
        {
          "name": "_amount",
          "type": "int256[]"
        }
      ],
      "name": "bootstrapColony",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_wad",
          "type": "uint256"
        }
      ],
      "name": "mintTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "colonyName",
          "type": "string"
        },
        {
          "name": "orbitdb",
          "type": "string"
        }
      ],
      "name": "registerColonyLabel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "orbitdb",
          "type": "string"
        }
      ],
      "name": "updateColonyOrbitDB",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_parentDomainId",
          "type": "uint256"
        }
      ],
      "name": "addDomain",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getDomain",
      "outputs": [
        {
          "components": [
            {
              "name": "skillId",
              "type": "uint256"
            },
            {
              "name": "fundingPotId",
              "type": "uint256"
            }
          ],
          "name": "domain",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDomainCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "key",
          "type": "bytes"
        },
        {
          "name": "value",
          "type": "bytes"
        },
        {
          "name": "branchMask",
          "type": "uint256"
        },
        {
          "name": "siblings",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyReputationProof",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        }
      ],
      "name": "makeExpenditure",
      "outputs": [
        {
          "name": "expenditureId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferExpenditure",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferExpenditureViaArbitration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelExpenditure",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "finalizeExpenditure",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setExpenditureRecipient",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setExpenditurePayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "setExpenditureSkill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_payoutModifier",
          "type": "int256"
        }
      ],
      "name": "setExpenditurePayoutModifier",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_claimDelay",
          "type": "uint256"
        }
      ],
      "name": "setExpenditureClaimDelay",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimExpenditurePayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getExpenditureCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getExpenditure",
      "outputs": [
        {
          "components": [
            {
              "name": "status",
              "type": "uint8"
            },
            {
              "name": "owner",
              "type": "address"
            },
            {
              "name": "fundingPotId",
              "type": "uint256"
            },
            {
              "name": "domainId",
              "type": "uint256"
            },
            {
              "name": "finalizedTimestamp",
              "type": "uint256"
            }
          ],
          "name": "expenditure",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        }
      ],
      "name": "getExpenditureSlot",
      "outputs": [
        {
          "components": [
            {
              "name": "recipient",
              "type": "address"
            },
            {
              "name": "claimDelay",
              "type": "uint256"
            },
            {
              "name": "payoutModifier",
              "type": "int256"
            },
            {
              "name": "skills",
              "type": "uint256[]"
            }
          ],
          "name": "expenditureSlot",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_slot",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getExpenditureSlotPayout",
      "outputs": [
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_recipient",
          "type": "address"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "addPayment",
      "outputs": [
        {
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "finalizePayment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setPaymentRecipient",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "setPaymentSkill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setPaymentPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPayment",
      "outputs": [
        {
          "components": [
            {
              "name": "recipient",
              "type": "address"
            },
            {
              "name": "finalized",
              "type": "bool"
            },
            {
              "name": "fundingPotId",
              "type": "uint256"
            },
            {
              "name": "domainId",
              "type": "uint256"
            },
            {
              "name": "skills",
              "type": "uint256[]"
            }
          ],
          "name": "payment",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimPayment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getPaymentCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_specificationHash",
          "type": "bytes32"
        },
        {
          "name": "_domainId",
          "type": "uint256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        },
        {
          "name": "_dueDate",
          "type": "uint256"
        }
      ],
      "name": "makeTask",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTaskCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTaskChangeNonce",
      "outputs": [
        {
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sigV",
          "type": "uint8[]"
        },
        {
          "name": "_sigR",
          "type": "bytes32[]"
        },
        {
          "name": "_sigS",
          "type": "bytes32[]"
        },
        {
          "name": "_mode",
          "type": "uint8[]"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeTaskChange",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sigV",
          "type": "uint8[]"
        },
        {
          "name": "_sigR",
          "type": "bytes32[]"
        },
        {
          "name": "_sigS",
          "type": "bytes32[]"
        },
        {
          "name": "_mode",
          "type": "uint8[]"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeTaskRoleAssignment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        },
        {
          "name": "_ratingSecret",
          "type": "bytes32"
        }
      ],
      "name": "submitTaskWorkRating",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        },
        {
          "name": "_rating",
          "type": "uint8"
        },
        {
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "revealTaskWorkRating",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "generateSecret",
      "outputs": [
        {
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTaskWorkRatingSecretsInfo",
      "outputs": [
        {
          "name": "nSecrets",
          "type": "uint256"
        },
        {
          "name": "lastSubmittedAt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "getTaskWorkRatingSecret",
      "outputs": [
        {
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_childSkillIndex",
          "type": "uint256"
        }
      ],
      "name": "setTaskManagerRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "setTaskEvaluatorRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "setTaskWorkerRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "removeTaskEvaluatorRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "removeTaskWorkerRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_skillId",
          "type": "uint256"
        }
      ],
      "name": "setTaskSkill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_specificationHash",
          "type": "bytes32"
        }
      ],
      "name": "setTaskBrief",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_dueDate",
          "type": "uint256"
        }
      ],
      "name": "setTaskDueDate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_deliverableHash",
          "type": "bytes32"
        }
      ],
      "name": "submitTaskDeliverable",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_deliverableHash",
          "type": "bytes32"
        },
        {
          "name": "_ratingSecret",
          "type": "bytes32"
        }
      ],
      "name": "submitTaskDeliverableAndRating",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "finalizeTask",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "completeTask",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "name": "specificationHash",
          "type": "bytes32"
        },
        {
          "name": "deliverableHash",
          "type": "bytes32"
        },
        {
          "name": "status",
          "type": "uint8"
        },
        {
          "name": "dueDate",
          "type": "uint256"
        },
        {
          "name": "fundingPotId",
          "type": "uint256"
        },
        {
          "name": "completionTimestamp",
          "type": "uint256"
        },
        {
          "name": "domainId",
          "type": "uint256"
        },
        {
          "name": "skillIds",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "getTaskRole",
      "outputs": [
        {
          "components": [
            {
              "name": "user",
              "type": "address"
            },
            {
              "name": "rateFail",
              "type": "bool"
            },
            {
              "name": "rating",
              "type": "uint8"
            }
          ],
          "name": "role",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_rewardInverse",
          "type": "uint256"
        }
      ],
      "name": "setRewardInverse",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRewardInverse",
      "outputs": [
        {
          "name": "rewardInverse",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTaskPayout",
      "outputs": [
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTaskManagerPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTaskEvaluatorPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTaskWorkerPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_managerAmount",
          "type": "uint256"
        },
        {
          "name": "_evaluatorAmount",
          "type": "uint256"
        },
        {
          "name": "_workerAmount",
          "type": "uint256"
        }
      ],
      "name": "setAllTaskPayouts",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        },
        {
          "name": "_role",
          "type": "uint8"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimTaskPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "key",
          "type": "bytes"
        },
        {
          "name": "value",
          "type": "bytes"
        },
        {
          "name": "branchMask",
          "type": "uint256"
        },
        {
          "name": "siblings",
          "type": "bytes32[]"
        }
      ],
      "name": "startNextRewardPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_payoutId",
          "type": "uint256"
        },
        {
          "name": "_squareRoots",
          "type": "uint256[7]"
        },
        {
          "name": "key",
          "type": "bytes"
        },
        {
          "name": "value",
          "type": "bytes"
        },
        {
          "name": "branchMask",
          "type": "uint256"
        },
        {
          "name": "siblings",
          "type": "bytes32[]"
        }
      ],
      "name": "claimRewardPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_payoutId",
          "type": "uint256"
        }
      ],
      "name": "getRewardPayoutInfo",
      "outputs": [
        {
          "components": [
            {
              "name": "reputationState",
              "type": "bytes32"
            },
            {
              "name": "colonyWideReputation",
              "type": "uint256"
            },
            {
              "name": "totalTokens",
              "type": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256"
            },
            {
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "name": "blockTimestamp",
              "type": "uint256"
            },
            {
              "name": "amountRemaining",
              "type": "uint256"
            },
            {
              "name": "finalized",
              "type": "bool"
            }
          ],
          "name": "rewardPayoutCycle",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_payoutId",
          "type": "uint256"
        }
      ],
      "name": "finalizeRewardPayout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getFundingPot",
      "outputs": [
        {
          "name": "associatedType",
          "type": "uint8"
        },
        {
          "name": "associatedTypeId",
          "type": "uint256"
        },
        {
          "name": "payoutsWeCannotMake",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFundingPotCount",
      "outputs": [
        {
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_potId",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getFundingPotBalance",
      "outputs": [
        {
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_potId",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getFundingPotPayout",
      "outputs": [
        {
          "name": "payout",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionDomainId",
          "type": "uint256"
        },
        {
          "name": "_fromChildSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_toChildSkillIndex",
          "type": "uint256"
        },
        {
          "name": "_fromPot",
          "type": "uint256"
        },
        {
          "name": "_toPot",
          "type": "uint256"
        },
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "moveFundsBetweenPots",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimColonyFunds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getNonRewardPotsTotal",
      "outputs": [
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTaskWorkRatingSecretsInfo\",\"outputs\":[{\"name\":\"nSecrets\",\"type\":\"uint256\"},{\"name\":\"lastSubmittedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTaskPayout\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDomainCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setExpenditureRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_deliverableHash\",\"type\":\"bytes32\"},{\"name\":\"_ratingSecret\",\"type\":\"bytes32\"}],\"name\":\"submitTaskDeliverableAndRating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"components\":[{\"name\":\"skillId\",\"type\":\"uint256\"},{\"name\":\"fundingPotId\",\"type\":\"uint256\"}],\"name\":\"domain\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_salt\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"generateSecret\",\"outputs\":[{\"name\":\"secret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"name\":\"specificationHash\",\"type\":\"bytes32\"},{\"name\":\"deliverableHash\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"dueDate\",\"type\":\"uint256\"},{\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"name\":\"completionTimestamp\",\"type\":\"uint256\"},{\"name\":\"domainId\",\"type\":\"uint256\"},{\"name\":\"skillIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"getTaskRole\",\"outputs\":[{\"components\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"rateFail\",\"type\":\"bool\"},{\"name\":\"rating\",\"type\":\"uint8\"}],\"name\":\"role\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_parentDomainId\",\"type\":\"uint256\"}],\"name\":\"addDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sigV\",\"type\":\"uint8[]\"},{\"name\":\"_sigR\",\"type\":\"bytes32[]\"},{\"name\":\"_sigS\",\"type\":\"bytes32[]\"},{\"name\":\"_mode\",\"type\":\"uint8[]\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeTaskRoleAssignment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"setPaymentSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundingPotCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"updateColonyOrbitDB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getExpenditureSlotPayout\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardInverse\",\"type\":\"uint256\"}],\"name\":\"setRewardInverse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferExpenditureViaArbitration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaskWorkerPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimExpenditurePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveExitRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"components\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"finalized\",\"type\":\"bool\"},{\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"name\":\"domainId\",\"type\":\"uint256\"},{\"name\":\"skills\",\"type\":\"uint256[]\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_childDomainId\",\"type\":\"uint256\"}],\"name\":\"hasInheritedUserRole\",\"outputs\":[{\"name\":\"hasRole\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNonRewardPotsTotal\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_payoutId\",\"type\":\"uint256\"}],\"name\":\"getRewardPayoutInfo\",\"outputs\":[{\"components\":[{\"name\":\"reputationState\",\"type\":\"bytes32\"},{\"name\":\"colonyWideReputation\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"name\":\"amountRemaining\",\"type\":\"uint256\"},{\"name\":\"finalized\",\"type\":\"bool\"}],\"name\":\"rewardPayoutCycle\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitRecoveryMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelExpenditure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_ratingSecret\",\"type\":\"bytes32\"}],\"name\":\"submitTaskWorkRating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeTaskWorkerRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setExpenditurePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardInverse\",\"outputs\":[{\"name\":\"rewardInverse\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getColonyNetwork\",\"outputs\":[{\"name\":\"colonyNetwork\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"addPayment\",\"outputs\":[{\"name\":\"paymentId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"submitTaskDeliverable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payoutId\",\"type\":\"uint256\"}],\"name\":\"finalizeRewardPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRecoveryRoles\",\"outputs\":[{\"name\":\"numRoles\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPaymentPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_claimDelay\",\"type\":\"uint256\"}],\"name\":\"setExpenditureClaimDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"colonyVersion\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setStorageSlotRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"where\",\"type\":\"uint256\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"name\":\"roles\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_managerAmount\",\"type\":\"uint256\"},{\"name\":\"_evaluatorAmount\",\"type\":\"uint256\"},{\"name\":\"_workerAmount\",\"type\":\"uint256\"}],\"name\":\"setAllTaskPayouts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setAdministrationRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_specificationHash\",\"type\":\"bytes32\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"},{\"name\":\"_dueDate\",\"type\":\"uint256\"}],\"name\":\"makeTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaskManagerPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTaskEvaluatorPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payoutId\",\"type\":\"uint256\"},{\"name\":\"_squareRoots\",\"type\":\"uint256[7]\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"branchMask\",\"type\":\"uint256\"},{\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewardPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setTaskWorkerRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sigV\",\"type\":\"uint8[]\"},{\"name\":\"_sigR\",\"type\":\"bytes32[]\"},{\"name\":\"_sigS\",\"type\":\"bytes32[]\"},{\"name\":\"_mode\",\"type\":\"uint8[]\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeTaskChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colonyNetworkAddress\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialiseColony\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExpenditureCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFundingPot\",\"outputs\":[{\"name\":\"associatedType\",\"type\":\"uint8\"},{\"name\":\"associatedTypeId\",\"type\":\"uint256\"},{\"name\":\"payoutsWeCannotMake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTaskPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInRecoveryMode\",\"outputs\":[{\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_payoutModifier\",\"type\":\"int256\"}],\"name\":\"setExpenditurePayoutModifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"checkNotAdditionalProtectedVariable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizeTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setPaymentRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimColonyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"colonyOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_rating\",\"type\":\"uint8\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"revealTaskWorkRating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setFundingRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"branchMask\",\"type\":\"uint256\"},{\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"verifyReputationProof\",\"outputs\":[{\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getExpenditureSlot\",\"outputs\":[{\"components\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"claimDelay\",\"type\":\"uint256\"},{\"name\":\"payoutModifier\",\"type\":\"int256\"},{\"name\":\"skills\",\"type\":\"uint256[]\"}],\"name\":\"expenditureSlot\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeRecoveryRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeTaskEvaluatorRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_domainId\",\"type\":\"uint256\"}],\"name\":\"makeExpenditure\",\"outputs\":[{\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_potId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFundingPotBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"hasUserRole\",\"outputs\":[{\"name\":\"hasRole\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"getTaskWorkRatingSecret\",\"outputs\":[{\"name\":\"secret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaymentCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"}],\"name\":\"setTaskManagerRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizeExpenditure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setArbitrationRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"setTaskSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"colonyAuthority\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTaskCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_potId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFundingPotPayout\",\"outputs\":[{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_fromChildSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_toChildSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_fromPot\",\"type\":\"uint256\"},{\"name\":\"_toPot\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"moveFundsBetweenPots\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dueDate\",\"type\":\"uint256\"}],\"name\":\"setTaskDueDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTaskChangeNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setRecoveryRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"finalizePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_specificationHash\",\"type\":\"bytes32\"}],\"name\":\"setTaskBrief\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setTaskEvaluatorRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setRootRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"completeTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colonyName\",\"type\":\"string\"},{\"name\":\"orbitdb\",\"type\":\"string\"}],\"name\":\"registerColonyLabel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"branchMask\",\"type\":\"uint256\"},{\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"startNextRewardPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"int256[]\"}],\"name\":\"bootstrapColony\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enterRecoveryMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getExpenditure\",\"outputs\":[{\"components\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"name\":\"domainId\",\"type\":\"uint256\"},{\"name\":\"finalizedTimestamp\",\"type\":\"uint256\"}],\"name\":\"expenditure\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionDomainId\",\"type\":\"uint256\"},{\"name\":\"_childSkillIndex\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_domainId\",\"type\":\"uint256\"},{\"name\":\"_setTo\",\"type\":\"bool\"}],\"name\":\"setArchitectureRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_slot\",\"type\":\"uint256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"setExpenditureSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferExpenditure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"RecoveryRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"colonyNetwork\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ColonyInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"int256[]\"}],\"name\":\"ColonyBootstrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"uint256\"}],\"name\":\"ColonyUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"domainId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"setTo\",\"type\":\"bool\"}],\"name\":\"ColonyRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromPot\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ColonyFundsMovedBetweenFundingPots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payoutRemainder\",\"type\":\"uint256\"}],\"name\":\"ColonyFundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardPayoutId\",\"type\":\"uint256\"}],\"name\":\"RewardPayoutCycleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardPayoutId\",\"type\":\"uint256\"}],\"name\":\"RewardPayoutCycleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardPayoutId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardRemainder\",\"type\":\"uint256\"}],\"name\":\"RewardPayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardInverse\",\"type\":\"uint256\"}],\"name\":\"ColonyRewardInverseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ExpenditureTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"expenditureId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ExpenditureRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"ExpenditureSkillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"expenditureId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExpenditurePayoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"PaymentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"specificationHash\",\"type\":\"bytes32\"}],\"name\":\"TaskBriefSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dueDate\",\"type\":\"uint256\"}],\"name\":\"TaskDueDateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"TaskSkillSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TaskRoleUserSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TaskPayoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"TaskDeliverableSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rating\",\"type\":\"uint8\"}],\"name\":\"TaskWorkRatingRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fundingPotId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"domainId\",\"type\":\"uint256\"}],\"name\":\"DomainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fundingPotId\",\"type\":\"uint256\"}],\"name\":\"FundingPotAdded\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addDomain(uint256,uint256,uint256)\":{\"details\":\"Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_parentDomainId\":\"Id of the domain under which the new one will be added\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"addPayment(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_domainId\":\"The domain where the payment belongs\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_recipient\":\"Address of the payment recipient\",\"_skillId\":\"The skill associated with the payment\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"return\":\"paymentId Identifier of the newly created payment\"},\"authority()\":{\"return\":\"colonyAuthority The `ColonyAuthority` contract address\"},\"bootstrapColony(address[],int256[])\":{\"details\":\"Only allowed to be called when `taskCount` is `0` by authorized addresses.\",\"params\":{\"_amount\":\"Amount of reputation/tokens for every address\",\"_users\":\"Array of address to bootstrap with reputation\"}},\"cancelExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"}},\"cancelTask(uint256)\":{\"details\":\"Set the `task.status` property to `1`.\",\"params\":{\"_id\":\"Id of the task\"}},\"checkNotAdditionalProtectedVariable(uint256)\":{\"details\":\"No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.\",\"params\":{\"_slot\":\"The storage slot number to check.\"}},\"claimColonyFunds(address)\":{\"params\":{\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"claimExpenditurePayout(uint256,uint256,address)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_slot\":\"Number of the slot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"claimPayment(uint256,address)\":{\"params\":{\"_id\":\"Payment identifier\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])\":{\"params\":{\"_payoutId\":\"Id of the reward payout\",\"_squareRoots\":\"Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.\",\"branchMask\":\"The branchmask of the proof\",\"key\":\"Some Reputation hash tree key\",\"siblings\":\"The siblings of the proof\",\"value\":\"Reputation value\"}},\"claimTaskPayout(uint256,uint8,address)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"completeTask(uint256)\":{\"params\":{\"_id\":\"Id of the task\"}},\"executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"details\":\"The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.\",\"params\":{\"_data\":\"The transaction data\",\"_mode\":\"How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\",\"_sigR\":\"r output of the ECDSA signature of the transaction\",\"_sigS\":\"s output of the ECDSA signature of the transaction\",\"_sigV\":\"recovery id\",\"_value\":\"The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option\"}},\"executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"params\":{\"_data\":\"The transaction data\",\"_mode\":\"How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\",\"_sigR\":\"r output of the ECDSA signature of the transaction\",\"_sigS\":\"s output of the ECDSA signature of the transaction\",\"_sigV\":\"recovery id\",\"_value\":\"The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option\"}},\"finalizeExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"}},\"finalizePayment(uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"finalizeRewardPayout(uint256)\":{\"params\":{\"_payoutId\":\"Id of the reward payout\"}},\"finalizeTask(uint256)\":{\"details\":\"Set the `task.finalized` property to true\",\"params\":{\"_id\":\"Id of the task\"}},\"finishUpgrade()\":{\"details\":\"Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call.\"},\"generateSecret(bytes32,uint256)\":{\"params\":{\"_salt\":\"Salt value\",\"_value\":\"Value to hide\"},\"return\":\"secret `keccak256` hash of joint _salt and _value\"},\"getColonyNetwork()\":{\"details\":\"The colonyNetworkAddress we read here is set once, during `initialiseColony`.\",\"return\":\"colonyNetwork The address of Colony Network instance\"},\"getDomain(uint256)\":{\"params\":{\"_id\":\"Id of the domain which details to get\"},\"return\":\"domain The domain\"},\"getDomainCount()\":{\"return\":\"count The domain count. Min 1 as the root domain is created at the same time as the colony\"},\"getExpenditure(uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\"},\"return\":\"expenditure The expenditure\"},\"getExpenditureCount()\":{\"return\":\"count The expenditure count\"},\"getExpenditureSlot(uint256,uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_slot\":\"Expenditure slot\"},\"return\":\"expenditureSlot The expenditure slot\"},\"getExpenditureSlotPayout(uint256,uint256,address)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_slot\":\"Expenditure slot\",\"_token\":\"Token address\"},\"return\":\"amount Amount of the payout for that slot/token.\"},\"getFundingPot(uint256)\":{\"details\":\"For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).\",\"params\":{\"_id\":\"Id of the pot which details to get\"},\"return\":\"associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding\"},\"getFundingPotBalance(uint256,address)\":{\"params\":{\"_potId\":\"Id of the funding pot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"return\":\"balance Funding pot supply balance\"},\"getFundingPotCount()\":{\"return\":\"count The funding pots count\"},\"getFundingPotPayout(uint256,address)\":{\"params\":{\"_potId\":\"Id of the funding pot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"return\":\"payout Funding pot payout amount\"},\"getNonRewardPotsTotal(address)\":{\"params\":{\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"return\":\"amount Total amount of tokens in funding pots other than the rewards pot (id 0)\"},\"getPayment(uint256)\":{\"params\":{\"_id\":\"Payment identifier\"},\"return\":\"payment The Payment data structure\"},\"getPaymentCount()\":{\"return\":\"count The payment count\"},\"getRewardInverse()\":{\"return\":\"rewardInverse The inverse of the reward\"},\"getRewardPayoutInfo(uint256)\":{\"params\":{\"_payoutId\":\"Id of the reward payout\"},\"return\":\"rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation.\"},\"getTask(uint256)\":{\"params\":{\"_id\":\"Id of the task\"},\"return\":\"specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task\"},\"getTaskChangeNonce(uint256)\":{\"params\":{\"_id\":\"Id of the task\"},\"return\":\"nonce The current task change nonce value\"},\"getTaskCount()\":{\"return\":\"count The task count\"},\"getTaskPayout(uint256,uint8,address)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"},\"return\":\"amount Payout amount\"},\"getTaskRole(uint256,uint8)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\"},\"return\":\"role The Role\"},\"getTaskWorkRatingSecret(uint256,uint8)\":{\"params\":{\"_id\":\"Id of the task\",\"_role\":\"Id of the role, as defined in TaskRole enum\"},\"return\":\"secret Rating secret `bytes32` value\"},\"getTaskWorkRatingSecretsInfo(uint256)\":{\"params\":{\"_id\":\"Id of the task\"},\"return\":\"nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret\"},\"getToken()\":{\"return\":\"tokenAddress Address of the token contract\"},\"getUserRoles(address,uint256)\":{\"params\":{\"where\":\"The domain where we want to get roles for\",\"who\":\"The user whose roles we want to get\"},\"return\":\"roles bytes32 representation of the roles\"},\"hasInheritedUserRole(address,uint256,uint8,uint256,uint256)\":{\"params\":{\"_childDomainId\":\"The domain where we want to use the role\",\"_childSkillIndex\":\"The index that the `_childDomainId` is relative to `_domainId`\",\"_domainId\":\"Domain in which the caller has the role\",\"_role\":\"The role we want to check for\",\"_user\":\"The user whose role we want to check\"},\"return\":\"hasRole Boolean indicating whether the given user has the given role in domain\"},\"hasUserRole(address,uint256,uint8)\":{\"params\":{\"_domainId\":\"The domain where we want to check for the role\",\"_role\":\"The role we want to check for\",\"_user\":\"The user whose role we want to check\"},\"return\":\"hasRole Boolean indicating whether the given user has the given role in domain\"},\"initialiseColony(address,address)\":{\"details\":\"Sets the reward inverse to the uint max 2**256 - 1.\",\"params\":{\"_colonyNetworkAddress\":\"Address of the colony network\",\"_token\":\"Address of the colony ERC20 Token\"}},\"isInRecoveryMode()\":{\"return\":\"inRecoveryMode Return true if recovery mode is active, false otherwise\"},\"makeExpenditure(uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_domainId\":\"The domain where the expenditure belongs\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"},\"return\":\"expenditureId Identifier of the newly created expenditure\"},\"makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"The domain where the task belongs\",\"_dueDate\":\"The due date of the task, can set to `0` for no-op\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_skillId\":\"The skill associated with the task, can set to `0` for no-op\",\"_specificationHash\":\"Database identifier where the task specification is stored\"}},\"mintTokens(uint256)\":{\"params\":{\"_wad\":\"Amount to mint\"}},\"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Amount of funds\",\"_fromChildSkillIndex\":\"The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\",\"_fromPot\":\"Funding pot id providing the funds\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_toChildSkillIndex\":\"The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\",\"_toPot\":\"Funding pot id receiving the funds\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"numRecoveryRoles()\":{\"return\":\"numRoles Number of users with the recovery role.\"},\"owner()\":{\"details\":\"Used for testing.\",\"return\":\"colonyOwner Address of the colony owner\"},\"registerColonyLabel(string,string)\":{\"params\":{\"colonyName\":\"The label to register.\",\"orbitdb\":\"The path of the orbitDB database associated with the colony name\"}},\"removeRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to remove recovery role from\"}},\"removeTaskEvaluatorRole(uint256)\":{\"params\":{\"_id\":\"Id of the task\"}},\"removeTaskWorkerRole(uint256)\":{\"params\":{\"_id\":\"Id of the task\"}},\"revealTaskWorkRating(uint256,uint8,uint8,bytes32)\":{\"details\":\"Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.\",\"params\":{\"_id\":\"Id of the task\",\"_rating\":\"0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\",\"_role\":\"Id of the role, as defined in TaskRole enum\",\"_salt\":\"Salt value used to generate the rating secret\"}},\"setAdministrationRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an admin role to\"}},\"setAllTaskPayouts(uint256,address,uint256,uint256,uint256)\":{\"details\":\"Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\",\"params\":{\"_evaluatorAmount\":\"Payout amount for evaluator\",\"_id\":\"Id of the task\",\"_managerAmount\":\"Payout amount for manager\",\"_token\":\"Address of the token, `0x0` value indicates Ether\",\"_workerAmount\":\"Payout amount for worker\"}},\"setArbitrationRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an arbitration role to\"}},\"setArchitectureRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an architecture role to\"}},\"setExpenditureClaimDelay(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_claimDelay\":\"Time (in seconds) to delay claiming payout after finalization\",\"_id\":\"Expenditure identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_slot\":\"Number of the slot\"}},\"setExpenditurePayout(uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the expenditure\",\"_slot\":\"Number of the slot\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setExpenditurePayoutModifier(uint256,uint256,uint256,uint256,int256)\":{\"details\":\"Note that when determining payouts the payoutModifier is incremented by WAD and converted into payoutScalar\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_id\":\"Expenditure identifier\",\"_payoutModifier\":\"Modifier to their payout (between -1 and 1, denominated in WADs, 0 means no modification)\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_slot\":\"Number of the slot\"}},\"setExpenditureRecipient(uint256,uint256,address)\":{\"params\":{\"_id\":\"Id of the expenditure\",\"_recipient\":\"Address of the recipient\",\"_slot\":\"Slot for the recipient address\"}},\"setExpenditureSkill(uint256,uint256,uint256)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_skillId\":\"Id of the new skill to set\",\"_slot\":\"Number of the slot\"}},\"setFundingRole(uint256,uint256,address,uint256,bool)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_domainId\":\"Domain in which we are giving user the role\",\"_permissionDomainId\":\"Domain in which the caller has root/architecture role\",\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an funding role to\"}},\"setPaymentPayout(uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setPaymentRecipient(uint256,uint256,uint256,address)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_recipient\":\"Address of the payment recipient\"}},\"setPaymentSkill(uint256,uint256,uint256,uint256)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Payment identifier\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\",\"_skillId\":\"Id of the new skill to set\"}},\"setRecoveryRole(address)\":{\"params\":{\"_user\":\"User we want to give a recovery role to\"}},\"setRewardInverse(uint256)\":{\"params\":{\"_rewardInverse\":\"The inverse of the reward\"}},\"setRootRole(address,bool)\":{\"params\":{\"_setTo\":\"The state of the role permission (true assign the permission, false revokes it)\",\"_user\":\"User we want to give an root role to\"}},\"setStorageSlotRecovery(uint256,bytes32)\":{\"details\":\"certain critical variables are protected from editing in this function\",\"params\":{\"_slot\":\"Uint address of storage slot to be updated\",\"_value\":\"word of data to be set\"}},\"setTaskBrief(uint256,bytes32)\":{\"params\":{\"_id\":\"Id of the task\",\"_specificationHash\":\"Unique hash of the task brief in ddb\"}},\"setTaskDueDate(uint256,uint256)\":{\"params\":{\"_dueDate\":\"Due date as seconds since unix epoch\",\"_id\":\"Id of the task\"}},\"setTaskEvaluatorPayout(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the task\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setTaskEvaluatorRole(uint256,address)\":{\"details\":\"This function can only be called through `executeTaskRoleAssignment`.\",\"params\":{\"_id\":\"Id of the task\",\"_user\":\"Address of the user we want to give a evaluator role to\"}},\"setTaskManagerPayout(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the task\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setTaskManagerRole(uint256,address,uint256,uint256)\":{\"details\":\"This function can only be called through `executeTaskRoleAssignment`.\",\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`\",\"_id\":\"Id of the task\",\"_permissionDomainId\":\"The domain ID in which _user has the Administration permission\",\"_user\":\"Address of the user we want to give a manager role to\"}},\"setTaskSkill(uint256,uint256)\":{\"details\":\"Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.\",\"params\":{\"_id\":\"Id of the task\",\"_skillId\":\"Id of the skill which has to be a global skill\"}},\"setTaskWorkerPayout(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Payout amount\",\"_id\":\"Id of the task\",\"_token\":\"Address of the token, `0x0` value indicates Ether\"}},\"setTaskWorkerRole(uint256,address)\":{\"details\":\"This function can only be called through `executeTaskRoleAssignment`.\",\"params\":{\"_id\":\"Id of the task\",\"_user\":\"Address of the user we want to give a worker role to\"}},\"startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])\":{\"params\":{\"_token\":\"Address of the token used for reward payout\",\"branchMask\":\"The branchmask of the proof\",\"key\":\"Some Reputation hash tree key\",\"siblings\":\"The siblings of the proof\",\"value\":\"Reputation value\"}},\"submitTaskDeliverable(uint256,bytes32)\":{\"details\":\"Set the `task.deliverableHash` and `task.completionTimestamp` properties.\",\"params\":{\"_deliverableHash\":\"Unique hash of the task deliverable content in ddb\",\"_id\":\"Id of the task\"}},\"submitTaskDeliverableAndRating(uint256,bytes32,bytes32)\":{\"details\":\"Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\",\"params\":{\"_deliverableHash\":\"Unique hash of the task deliverable content in ddb\",\"_id\":\"Id of the task\",\"_ratingSecret\":\"Rating secret for manager\"}},\"submitTaskWorkRating(uint256,uint8,bytes32)\":{\"params\":{\"_id\":\"Id of the task\",\"_ratingSecret\":\"`keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.\",\"_role\":\"Id of the role, as defined in TaskRole enum\"}},\"transferExpenditure(uint256,address)\":{\"params\":{\"_id\":\"Expenditure identifier\",\"_newOwner\":\"New owner of expenditure\"}},\"transferExpenditureViaArbitration(uint256,uint256,uint256,address)\":{\"params\":{\"_childSkillIndex\":\"The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)\",\"_id\":\"Expenditure identifier\",\"_newOwner\":\"New owner of expenditure\",\"_permissionDomainId\":\"The domainId in which I have the permission to take this action\"}},\"updateColonyOrbitDB(string)\":{\"params\":{\"orbitdb\":\"The path of the orbitDB database to be associated with the colony\"}},\"upgrade(uint256)\":{\"details\":\"Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\",\"params\":{\"_newVersion\":\"The target version for the upgrade\"}},\"verifyReputationProof(bytes,bytes,uint256,bytes32[])\":{\"details\":\"For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.\",\"params\":{\"branchMask\":\"The branchmask of the proof\",\"key\":\"The key of the element the proof is for.\",\"siblings\":\"The siblings of the proof\",\"value\":\"The value of the element that the proof is for.\"},\"return\":\"isValid True if the proof is valid, false otherwise.\"},\"version()\":{\"return\":\"colonyVersion Version number\"}},\"title\":\"Colony interface\"},\"userdoc\":{\"methods\":{\"addDomain(uint256,uint256,uint256)\":{\"notice\":\"Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here.\"},\"addPayment(uint256,uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"Add a new payment in the colony. Secured function to authorised members.\"},\"approveExitRecovery()\":{\"notice\":\"Indicate approval to exit recovery mode. Can only be called by user with recovery role.\"},\"authority()\":{\"notice\":\"Get the `ColonyAuthority` for the colony.\"},\"bootstrapColony(address[],int256[])\":{\"notice\":\"Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members.\"},\"cancelExpenditure(uint256)\":{\"notice\":\"Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\"},\"cancelTask(uint256)\":{\"notice\":\"Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\"},\"checkNotAdditionalProtectedVariable(uint256)\":{\"notice\":\"Check whether the supplied slot is a protected variable specific to this contract\"},\"claimColonyFunds(address)\":{\"notice\":\"Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\"},\"claimExpenditurePayout(uint256,uint256,address)\":{\"notice\":\"Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\"},\"claimPayment(uint256,address)\":{\"notice\":\"Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\"},\"claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])\":{\"notice\":\"Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue.\"},\"claimTaskPayout(uint256,uint8,address)\":{\"notice\":\"Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\"},\"completeTask(uint256)\":{\"notice\":\"Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw.\"},\"enterRecoveryMode()\":{\"notice\":\"Put colony network mining into recovery mode. Can only be called by user with recovery role.\"},\"executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"notice\":\"Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users.\"},\"executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)\":{\"notice\":\"Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented.\"},\"exitRecoveryMode()\":{\"notice\":\"Exit recovery mode, can be called by anyone if enough whitelist approvals are given.\"},\"finalizeExpenditure(uint256)\":{\"notice\":\"Finalizes the expenditure and prevents further editing. Can only be called by expenditure owner.\"},\"finalizePayment(uint256,uint256,uint256)\":{\"notice\":\"Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members.\"},\"finalizeRewardPayout(uint256)\":{\"notice\":\"Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\"},\"finalizeTask(uint256)\":{\"notice\":\"Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members.\"},\"finishUpgrade()\":{\"notice\":\"A function to be called after an upgrade has been done from v2 to v3.\"},\"generateSecret(bytes32,uint256)\":{\"notice\":\"Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\"},\"getColonyNetwork()\":{\"notice\":\"Returns the colony network address set on the Colony.\"},\"getDomain(uint256)\":{\"notice\":\"Get a domain by id.\"},\"getDomainCount()\":{\"notice\":\"Get the number of domains in the colony.\"},\"getExpenditure(uint256)\":{\"notice\":\"Returns an existing expenditure.\"},\"getExpenditureCount()\":{\"notice\":\"Get the number of expenditures in the colony.\"},\"getExpenditureSlot(uint256,uint256)\":{\"notice\":\"Returns an existing expenditure slot.\"},\"getExpenditureSlotPayout(uint256,uint256,address)\":{\"notice\":\"Returns an existing expenditure slot's payout for a token.\"},\"getFundingPot(uint256)\":{\"notice\":\"Get the non-mapping properties of a pot by id.\"},\"getFundingPotBalance(uint256,address)\":{\"notice\":\"Get the `_token` balance of pot with id `_potId`.\"},\"getFundingPotCount()\":{\"notice\":\"Get the number of funding pots in the colony.\"},\"getFundingPotPayout(uint256,address)\":{\"notice\":\"Get the assigned `_token` payouts of pot with id `_potId`.\"},\"getNonRewardPotsTotal(address)\":{\"notice\":\"Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\"},\"getPayment(uint256)\":{\"notice\":\"Returns an exiting payment.\"},\"getPaymentCount()\":{\"notice\":\"Get the number of payments in the colony.\"},\"getRewardInverse()\":{\"notice\":\"Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\"},\"getRewardPayoutInfo(uint256)\":{\"notice\":\"Get useful information about specific reward payout.\"},\"getTask(uint256)\":{\"notice\":\"Get a task with id `_id`\"},\"getTaskChangeNonce(uint256)\":{\"notice\":\"Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\"},\"getTaskCount()\":{\"notice\":\"Get the number of tasks in the colony.\"},\"getTaskPayout(uint256,uint8,address)\":{\"notice\":\"Get payout amount in `_token` denomination for role `_role` in task `_id`.\"},\"getTaskRole(uint256,uint8)\":{\"notice\":\"Get the `Role` properties back for role `_role` in task `_id`.\"},\"getTaskWorkRatingSecret(uint256,uint8)\":{\"notice\":\"Get the rating secret submitted for role `_role` in task `_id`\"},\"getTaskWorkRatingSecretsInfo(uint256)\":{\"notice\":\"Get the `ColonyStorage.RatingSecrets` information for task `_id`.\"},\"getToken()\":{\"notice\":\"Get the colony token.\"},\"getUserRoles(address,uint256)\":{\"notice\":\"Gets the bytes32 representation of the roles for a user in a given domain\"},\"hasInheritedUserRole(address,uint256,uint8,uint256,uint256)\":{\"notice\":\"Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function\"},\"hasUserRole(address,uint256,uint8)\":{\"notice\":\"Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract.\"},\"initialiseColony(address,address)\":{\"notice\":\"Called once when the colony is created to initialise certain storage slot values.\"},\"isInRecoveryMode()\":{\"notice\":\"Is colony network in recovery mode.\"},\"makeExpenditure(uint256,uint256,uint256)\":{\"notice\":\"Add a new expenditure in the colony. Secured function to authorised members.\"},\"makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Make a new task in the colony. Secured function to authorised members.\"},\"mintTokens(uint256)\":{\"notice\":\"Mint `_wad` amount of colony tokens. Secured function to authorised members.\"},\"moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\"},\"numRecoveryRoles()\":{\"notice\":\"Return number of recovery roles.\"},\"owner()\":{\"notice\":\"Get the colony `owner` address. This should be address(0x0) at all times.\"},\"registerColonyLabel(string,string)\":{\"notice\":\"Register colony's ENS label.\"},\"removeRecoveryRole(address)\":{\"notice\":\"Remove colony recovery role. Can only be called by root role.\"},\"removeTaskEvaluatorRole(uint256)\":{\"notice\":\"Removing evaluator role. Agreed between manager and currently assigned evaluator.\"},\"removeTaskWorkerRole(uint256)\":{\"notice\":\"Removing worker role. Agreed between manager and currently assigned worker.\"},\"revealTaskWorkRating(uint256,uint8,uint8,bytes32)\":{\"notice\":\"Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\"},\"setAdministrationRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony admin role. Can be called by root role or architecture role.\"},\"setAllTaskPayouts(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Set `_token` payout for all roles in task `_id` to the respective amounts.\"},\"setArbitrationRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony arbitration role. Can be called by root role or architecture role.\"},\"setArchitectureRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony architecture role. Can be called by root role or architecture role.\"},\"setExpenditureClaimDelay(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Set the claim delay on an expenditure slot. Can only be called by Arbitration role.\"},\"setExpenditurePayout(uint256,uint256,address,uint256)\":{\"notice\":\"Set the token payout on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditurePayoutModifier(uint256,uint256,uint256,uint256,int256)\":{\"notice\":\"Set the payout modifier on an expenditure slot. Can only be called by Arbitration role.\"},\"setExpenditureRecipient(uint256,uint256,address)\":{\"notice\":\"Sets the recipient on an expenditure slot. Can only be called by expenditure owner.\"},\"setExpenditureSkill(uint256,uint256,uint256)\":{\"notice\":\"Sets the skill on an expenditure slot. Can only be called by expenditure owner.\"},\"setFundingRole(uint256,uint256,address,uint256,bool)\":{\"notice\":\"Set new colony funding role. Can be called by root role or architecture role.\"},\"setPaymentPayout(uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Sets the payout for a given token on an existing payment. Secured function to authorised members.\"},\"setPaymentRecipient(uint256,uint256,uint256,address)\":{\"notice\":\"Sets the recipient on an existing payment. Secured function to authorised members.\"},\"setPaymentSkill(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets the skill on an existing payment. Secured function to authorised members.\"},\"setRecoveryRole(address)\":{\"notice\":\"Set new colony recovery role. Can be called by root.\"},\"setRewardInverse(uint256)\":{\"notice\":\"Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\"},\"setRootRole(address,bool)\":{\"notice\":\"Set new colony root role. Can be called by root role only.\"},\"setStorageSlotRecovery(uint256,bytes32)\":{\"notice\":\"Update value of arbitrary storage variable. Can only be called by user with recovery role.\"},\"setTaskBrief(uint256,bytes32)\":{\"notice\":\"Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized.\"},\"setTaskDueDate(uint256,uint256)\":{\"notice\":\"Set the due date on task `_id`. Allowed before a task is finalized.\"},\"setTaskEvaluatorPayout(uint256,address,uint256)\":{\"notice\":\"Set `_token` payout for evaluator in task `_id` to `_amount`.\"},\"setTaskEvaluatorRole(uint256,address)\":{\"notice\":\"Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it.\"},\"setTaskManagerPayout(uint256,address,uint256)\":{\"notice\":\"Set `_token` payout for manager in task `_id` to `_amount`.\"},\"setTaskManagerRole(uint256,address,uint256,uint256)\":{\"notice\":\"Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\"},\"setTaskSkill(uint256,uint256)\":{\"notice\":\"Set the skill for task `_id`.\"},\"setTaskWorkerPayout(uint256,address,uint256)\":{\"notice\":\"Set `_token` payout for worker in task `_id` to `_amount`.\"},\"setTaskWorkerRole(uint256,address)\":{\"notice\":\"Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree.\"},\"startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])\":{\"notice\":\"Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\"},\"submitTaskDeliverable(uint256,bytes32)\":{\"notice\":\"Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\"},\"submitTaskDeliverableAndRating(uint256,bytes32,bytes32)\":{\"notice\":\"Submit the task deliverable for Worker and rating for Manager.\"},\"submitTaskWorkRating(uint256,uint8,bytes32)\":{\"notice\":\"Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten.\"},\"transferExpenditure(uint256,address)\":{\"notice\":\"Updates the expenditure owner. Can only be called by expenditure owner.\"},\"transferExpenditureViaArbitration(uint256,uint256,uint256,address)\":{\"notice\":\"Updates the expenditure owner. Can only be called by Arbitration role.\"},\"updateColonyOrbitDB(string)\":{\"notice\":\"Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\"},\"upgrade(uint256)\":{\"notice\":\"Upgrades a colony to a new Colony contract version `_newVersion`.\"},\"verifyReputationProof(bytes,bytes,uint256,bytes32[])\":{\"notice\":\"Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\"},\"version()\":{\"notice\":\"Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change.\"}},\"notice\":\"All publicly available functions are available here and registered to work with EtherRouter Network contract\"}},\"settings\":{\"compilationTarget\":{\"/Users/kronosapiens/code/colony/colonyNetwork/contracts/IColony.sol\":\"IColony\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/kronosapiens/code/colony/colonyNetwork/contracts/ColonyDataTypes.sol\":{\"keccak256\":\"0xf288afa7bae78c9eeb8f5c58445a39cd47d79eb2766598de0a3c7b0c878e1784\",\"urls\":[\"bzzr://c3aed480c5b8851de6df6c67c70436eeaaecc77506058d6069d9405064c86648\"]},\"/Users/kronosapiens/code/colony/colonyNetwork/contracts/ContractRecoveryDataTypes.sol\":{\"keccak256\":\"0xcc65cfa798a43b582764b21f3776d1fc94e1d41c515bfab3a766233bb3ddd282\",\"urls\":[\"bzzr://03d449564e1b4b043f96cb14b821102265d8a3bd45f778c94070aecfcf046c21\"]},\"/Users/kronosapiens/code/colony/colonyNetwork/contracts/IColony.sol\":{\"keccak256\":\"0x535f5c2308558b1ae4eae1fbb3853843f65504ba7c165d6f40c764b836c43232\",\"urls\":[\"bzzr://a21c073fedf7d822b7c9adb4a9b5f497d6268bb29319c348c053d3d009253a5b\"]},\"/Users/kronosapiens/code/colony/colonyNetwork/contracts/IRecovery.sol\":{\"keccak256\":\"0x3ab852f61a49f80f46f8ca61d5fdbb112dd1881c532bcf221d801dcc4a84f93a\",\"urls\":[\"bzzr://7fe2cd9f1e7fb71b25fa42e0e399f990da6b0304b8ed45b44d96674c9fcbb7c2\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/*\n  This file is part of The Colony Network.\n\n  The Colony Network is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  The Colony Network is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.5.8; // ignore-swc-103\npragma experimental ABIEncoderV2;\n\nimport \"./IRecovery.sol\";\nimport \"./ColonyDataTypes.sol\";\n\n\n/// @title Colony interface\n/// @notice All publicly available functions are available here and registered to work with EtherRouter Network contract\ncontract IColony is ColonyDataTypes, IRecovery {\n  // Implemented in DSAuth.sol\n  /// @notice Get the `ColonyAuthority` for the colony.\n  /// @return colonyAuthority The `ColonyAuthority` contract address\n  function authority() public view returns (address colonyAuthority);\n\n  /// @notice Get the colony `owner` address. This should be address(0x0) at all times.\n  /// @dev Used for testing.\n  /// @return colonyOwner Address of the colony owner\n  function owner() public view returns (address colonyOwner);\n\n  // Implemented in Colony.sol\n  /// @notice Get the Colony contract version.\n  /// Starts from 1 and is incremented with every deployed contract change.\n  /// @return colonyVersion Version number\n  function version() public pure returns (uint256 colonyVersion);\n\n  /// @notice Upgrades a colony to a new Colony contract version `_newVersion`.\n  /// @dev Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\n  /// @param _newVersion The target version for the upgrade\n  function upgrade(uint _newVersion) public;\n\n  /// @notice A function to be called after an upgrade has been done from v2 to v3.\n  /// @dev Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to\n  /// be public so it can be an external call.\n  function finishUpgrade() public;\n\n  /// @notice Returns the colony network address set on the Colony.\n  /// @dev The colonyNetworkAddress we read here is set once, during `initialiseColony`.\n  /// @return colonyNetwork The address of Colony Network instance\n  function getColonyNetwork() public view returns (address colonyNetwork);\n\n  /// @notice Get the colony token.\n  /// @return tokenAddress Address of the token contract\n  function getToken() public view returns (address tokenAddress);\n\n  /// @notice Set new colony root role.\n  /// Can be called by root role only.\n  /// @param _user User we want to give an root role to\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setRootRole(address _user, bool _setTo) public;\n\n  /// @notice Set new colony arbitration role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an arbitration role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setArbitrationRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) public;\n\n  /// @notice Set new colony architecture role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an architecture role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setArchitectureRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) public;\n\n  /// @notice Set new colony funding role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an funding role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setFundingRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) public;\n\n  /// @notice Set new colony admin role.\n  /// Can be called by root role or architecture role.\n  /// @param _permissionDomainId Domain in which the caller has root/architecture role\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _user User we want to give an admin role to\n  /// @param _domainId Domain in which we are giving user the role\n  /// @param _setTo The state of the role permission (true assign the permission, false revokes it)\n  function setAdministrationRole(uint256 _permissionDomainId, uint256 _childSkillIndex, address _user, uint256 _domainId, bool _setTo) public;\n\n  /// @notice Check whether a given user has a given role for the colony.\n  /// Calls the function of the same name on the colony's authority contract.\n  /// @param _user The user whose role we want to check\n  /// @param _domainId The domain where we want to check for the role\n  /// @param _role The role we want to check for\n  /// @return hasRole Boolean indicating whether the given user has the given role in domain\n  function hasUserRole(address _user, uint256 _domainId, ColonyRole _role) public view returns (bool hasRole);\n\n  /// @notice Check whether a given user has a given role for the colony, in a child domain.\n  /// Calls the function of the same name on the colony's authority contract and an internal inheritence validator function\n  /// @param _user The user whose role we want to check\n  /// @param _domainId Domain in which the caller has the role\n  /// @param _role The role we want to check for\n  /// @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n  /// @param _childDomainId The domain where we want to use the role\n  /// @return hasRole Boolean indicating whether the given user has the given role in domain\n  function hasInheritedUserRole(address _user, uint256 _domainId, ColonyRole _role, uint256 _childSkillIndex, uint256 _childDomainId)\n    public view returns (bool hasRole);\n\n  /// @notice Gets the bytes32 representation of the roles for a user in a given domain\n  /// @param who The user whose roles we want to get\n  /// @param where The domain where we want to get roles for\n  /// @return roles bytes32 representation of the roles\n  function getUserRoles(address who, uint256 where) public view returns (bytes32 roles);\n\n  /// @notice Called once when the colony is created to initialise certain storage slot values.\n  /// @dev Sets the reward inverse to the uint max 2**256 - 1.\n  /// @param _colonyNetworkAddress Address of the colony network\n  /// @param _token Address of the colony ERC20 Token\n  function initialiseColony(address _colonyNetworkAddress, address _token) public;\n\n  /// @notice Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`.\n  /// This reputation is assigned in the colony-wide domain. Secured function to authorised members.\n  /// @dev Only allowed to be called when `taskCount` is `0` by authorized addresses.\n  /// @param _users Array of address to bootstrap with reputation\n  /// @param _amount Amount of reputation/tokens for every address\n  function bootstrapColony(address[] memory _users, int[] memory _amount) public;\n\n  /// @notice Mint `_wad` amount of colony tokens. Secured function to authorised members.\n  /// @param _wad Amount to mint\n  function mintTokens(uint256 _wad) public;\n\n  /// @notice Register colony's ENS label.\n  /// @param colonyName The label to register.\n  /// @param orbitdb The path of the orbitDB database associated with the colony name\n  function registerColonyLabel(string memory colonyName, string memory orbitdb) public;\n\n  /// @notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n  /// @param orbitdb The path of the orbitDB database to be associated with the colony\n  function updateColonyOrbitDB(string memory orbitdb) public;\n\n  /// @notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n  /// New funding pot is created and associated with the domain here.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _parentDomainId Id of the domain under which the new one will be added\n  /// @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.\n  function addDomain(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _parentDomainId) public;\n\n  /// @notice Get a domain by id.\n  /// @param _id Id of the domain which details to get\n  /// @return domain The domain\n  function getDomain(uint256 _id) public view returns (Domain memory domain);\n\n  /// @notice Get the number of domains in the colony.\n  /// @return count The domain count. Min 1 as the root domain is created at the same time as the colony\n  function getDomainCount() public view returns (uint256 count);\n\n  /// @notice Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\n  /// @param key The key of the element the proof is for.\n  /// @param value The value of the element that the proof is for.\n  /// @param branchMask The branchmask of the proof\n  /// @param siblings The siblings of the proof\n  /// @return isValid True if the proof is valid, false otherwise.\n  /// @dev For more detail about branchMask and siblings, examine the PatriciaTree implementation.\n  /// While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own\n  /// reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function\n  /// is not currently exposed on the Colony's EtherRouter.\n  function verifyReputationProof(bytes memory key, bytes memory value, uint256 branchMask, bytes32[] memory siblings)\n    public view returns (bool isValid);\n\n  // Implemented in ColonyExpenditure.sol\n  /// @notice Add a new expenditure in the colony. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _domainId The domain where the expenditure belongs\n  /// @return expenditureId Identifier of the newly created expenditure\n  function makeExpenditure(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _domainId) public returns (uint256 expenditureId);\n\n  /// @notice Updates the expenditure owner. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _newOwner New owner of expenditure\n  function transferExpenditure(uint256 _id, address _newOwner) public;\n\n  /// @notice Updates the expenditure owner. Can only be called by Arbitration role.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _id Expenditure identifier\n  /// @param _newOwner New owner of expenditure\n  function transferExpenditureViaArbitration(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, address _newOwner) public;\n\n  /// @notice Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  function cancelExpenditure(uint256 _id) public;\n\n  /// @notice Finalizes the expenditure and prevents further editing. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  function finalizeExpenditure(uint256 _id) public;\n\n  /// @notice Sets the recipient on an expenditure slot. Can only be called by expenditure owner.\n  /// @param _id Id of the expenditure\n  /// @param _slot Slot for the recipient address\n  /// @param _recipient Address of the recipient\n  function setExpenditureRecipient(uint256 _id, uint256 _slot, address payable _recipient) public;\n\n  /// @notice Set the token payout on an expenditure slot. Can only be called by expenditure owner.\n  /// @param _id Id of the expenditure\n  /// @param _slot Number of the slot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setExpenditurePayout(uint256 _id, uint256 _slot, address _token, uint256 _amount) public;\n\n  /// @notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _skillId Id of the new skill to set\n  function setExpenditureSkill(uint256 _id, uint256 _slot, uint256 _skillId) public;\n\n  /// @notice Set the payout modifier on an expenditure slot. Can only be called by Arbitration role.\n  /// @dev Note that when determining payouts the payoutModifier is incremented by WAD and converted into payoutScalar\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _payoutModifier Modifier to their payout (between -1 and 1, denominated in WADs, 0 means no modification)\n  function setExpenditurePayoutModifier(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    uint256 _id,\n    uint256 _slot,\n    int256 _payoutModifier\n    ) public;\n\n  /// @notice Set the claim delay on an expenditure slot. Can only be called by Arbitration role.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _claimDelay Time (in seconds) to delay claiming payout after finalization\n  function setExpenditureClaimDelay(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    uint256 _id,\n    uint256 _slot,\n    uint256 _claimDelay\n    ) public;\n\n  /// @notice Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\n  /// @param _id Expenditure identifier\n  /// @param _slot Number of the slot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimExpenditurePayout(uint256 _id, uint256 _slot, address _token) public;\n\n  /// @notice Get the number of expenditures in the colony.\n  /// @return count The expenditure count\n  function getExpenditureCount() public view returns (uint256 count);\n\n  /// @notice Returns an existing expenditure.\n  /// @param _id Expenditure identifier\n  /// @return expenditure The expenditure\n  function getExpenditure(uint256 _id) public view returns (Expenditure memory expenditure);\n\n  /// @notice Returns an existing expenditure slot.\n  /// @param _id Expenditure identifier\n  /// @param _slot Expenditure slot\n  /// @return expenditureSlot The expenditure slot\n  function getExpenditureSlot(uint256 _id, uint256 _slot) public view returns (ExpenditureSlot memory expenditureSlot);\n\n  /// @notice Returns an existing expenditure slot's payout for a token.\n  /// @param _id Expenditure identifier\n  /// @param _slot Expenditure slot\n  /// @param _token Token address\n  /// @return amount Amount of the payout for that slot/token.\n  function getExpenditureSlotPayout(uint256 _id, uint256 _slot, address _token) public view returns (uint256 amount);\n\n  // Implemented in ColonyPayment.sol\n  /// @notice Add a new payment in the colony. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n  /// (only used if `_permissionDomainId` is different to `_domainId`)\n  /// @param _recipient Address of the payment recipient\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  /// @param _domainId The domain where the payment belongs\n  /// @param _skillId The skill associated with the payment\n  /// @return paymentId Identifier of the newly created payment\n  function addPayment(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    address payable _recipient,\n    address _token,\n    uint256 _amount,\n    uint256 _domainId,\n    uint256 _skillId)\n    public returns (uint256 paymentId);\n\n  /// @notice Finalizes the payment and logs the reputation log updates.\n  /// Allowed to be called once after payment is fully funded. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  function finalizePayment(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id) public;\n\n  /// @notice Sets the recipient on an existing payment. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  /// @param _recipient Address of the payment recipient\n  function setPaymentRecipient(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, address payable _recipient) public;\n\n  /// @notice Sets the skill on an existing payment. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  /// @param _skillId Id of the new skill to set\n  function setPaymentSkill(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, uint256 _skillId) public;\n\n  /// @notice Sets the payout for a given token on an existing payment. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _id Payment identifier\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setPaymentPayout(uint256 _permissionDomainId, uint256 _childSkillIndex, uint256 _id, address _token, uint256 _amount) public;\n\n  /// @notice Returns an exiting payment.\n  /// @param _id Payment identifier\n  /// @return payment The Payment data structure\n  function getPayment(uint256 _id) public view returns (Payment memory payment);\n\n  /// @notice Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout.\n  /// Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n  /// @param _id Payment identifier\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimPayment(uint256 _id, address _token) public;\n\n  /// @notice Get the number of payments in the colony.\n  /// @return count The payment count\n  function getPaymentCount() public view returns (uint256 count);\n\n  // Implemented in ColonyTask.sol\n  /// @notice Make a new task in the colony. Secured function to authorised members.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  /// @param _specificationHash Database identifier where the task specification is stored\n  /// @param _domainId The domain where the task belongs\n  /// @param _skillId The skill associated with the task, can set to `0` for no-op\n  /// @param _dueDate The due date of the task, can set to `0` for no-op\n  function makeTask(\n    uint256 _permissionDomainId,\n    uint256 _childSkillIndex,\n    bytes32 _specificationHash,\n    uint256 _domainId,\n    uint256 _skillId,\n    uint256 _dueDate) public;\n\n  /// @notice Get the number of tasks in the colony.\n  /// @return count The task count\n  function getTaskCount() public view returns (uint256 count);\n\n  /// @notice Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\n  /// @param _id Id of the task\n  /// @return nonce The current task change nonce value\n  function getTaskChangeNonce(uint256 _id) public view returns (uint256 nonce);\n\n  /// @notice Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker)\n  /// using the detached signatures for these users.\n  /// @dev The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation.\n  /// Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n  /// @param _sigV recovery id\n  /// @param _sigR r output of the ECDSA signature of the transaction\n  /// @param _sigS s output of the ECDSA signature of the transaction\n  /// @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n  /// @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n  /// Currently we only accept 0 value transactions but this is kept as a future option\n  /// @param _data The transaction data\n  function executeTaskChange(\n    uint8[] memory _sigV,\n    bytes32[] memory _sigR,\n    bytes32[] memory _sigS,\n    uint8[] memory _mode,\n    uint256 _value,\n    bytes memory _data\n    ) public;\n\n  /// @notice Executes a task role update transaction `_data` which is approved and signed by two of addresses.\n  /// depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`.\n  /// Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n  /// @param _sigV recovery id\n  /// @param _sigR r output of the ECDSA signature of the transaction\n  /// @param _sigS s output of the ECDSA signature of the transaction\n  /// @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n  /// @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n  /// Currently we only accept 0 value transactions but this is kept as a future option\n  /// @param _data The transaction data\n  function executeTaskRoleAssignment(\n    uint8[] memory _sigV,\n    bytes32[] memory _sigR,\n    bytes32[] memory _sigS,\n    uint8[] memory _mode,\n    uint256 _value,\n    bytes memory _data\n    ) public;\n\n  /// @notice Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`.\n  /// Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached.\n  /// Allowed only for evaluator to rate worker and for worker to rate manager performance.\n  /// Once submitted ratings can not be changed or overwritten.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50).\n  /// Can be generated via `IColony.generateSecret` helper function.\n  function submitTaskWorkRating(uint256 _id, uint8 _role, bytes32 _ratingSecret) public;\n\n  /// @notice Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`.\n  /// Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted\n  /// (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\n  /// @dev Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match,\n  /// sets the task role properties `rated` to `true` and `rating` to `_rating`.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\n  /// @param _salt Salt value used to generate the rating secret\n  function revealTaskWorkRating(uint256 _id, uint8 _role, uint8 _rating, bytes32 _salt) public;\n\n  /// @notice Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\n  /// @param _salt Salt value\n  /// @param _value Value to hide\n  /// @return secret `keccak256` hash of joint _salt and _value\n  function generateSecret(bytes32 _salt, uint256 _value) public pure returns (bytes32 secret);\n\n  /// @notice Get the `ColonyStorage.RatingSecrets` information for task `_id`.\n  /// @param _id Id of the task\n  /// @return nSecrets Number of secrets\n  /// @return lastSubmittedAt Timestamp of the last submitted rating secret\n  function getTaskWorkRatingSecretsInfo(uint256 _id) public view returns (uint256 nSecrets, uint256 lastSubmittedAt);\n\n  /// @notice Get the rating secret submitted for role `_role` in task `_id`\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @return secret Rating secret `bytes32` value\n  function getTaskWorkRatingSecret(uint256 _id, uint8 _role) public view returns (bytes32 secret);\n\n  /// @notice Assigning manager role.\n  /// Current manager and user we want to assign role to both need to agree.\n  /// User we want to set here also needs to be an admin.\n  /// Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\n  /// @dev This function can only be called through `executeTaskRoleAssignment`.\n  /// @param _id Id of the task\n  /// @param _user Address of the user we want to give a manager role to\n  /// @param _permissionDomainId The domain ID in which _user has the Administration permission\n  /// @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n  function setTaskManagerRole(uint256 _id, address payable _user, uint256 _permissionDomainId, uint256 _childSkillIndex) public;\n\n  /// @notice Assigning evaluator role.\n  /// Can only be set if there is no one currently assigned to be an evaluator.\n  /// Manager of the task and user we want to assign role to both need to agree.\n  /// Managers can assign themselves to this role, if there is no one currently assigned to it.\n  /// @dev This function can only be called through `executeTaskRoleAssignment`.\n  /// @param _id Id of the task\n  /// @param _user Address of the user we want to give a evaluator role to\n  function setTaskEvaluatorRole(uint256 _id, address payable _user) public;\n\n  /// @notice Assigning worker role.\n  /// Can only be set if there is no one currently assigned to be a worker.\n  /// Manager of the task and user we want to assign role to both need to agree.\n  /// @dev This function can only be called through `executeTaskRoleAssignment`.\n  /// @param _id Id of the task\n  /// @param _user Address of the user we want to give a worker role to\n  function setTaskWorkerRole(uint256 _id, address payable _user) public;\n\n  /// @notice Removing evaluator role.\n  /// Agreed between manager and currently assigned evaluator.\n  /// @param _id Id of the task\n  function removeTaskEvaluatorRole(uint256 _id) public;\n\n  /// @notice Removing worker role.\n  /// Agreed between manager and currently assigned worker.\n  /// @param _id Id of the task\n  function removeTaskWorkerRole(uint256 _id) public;\n\n  /// @notice Set the skill for task `_id`.\n  /// @dev Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct.\n  /// Allowed before a task is finalized.\n  /// @param _id Id of the task\n  /// @param _skillId Id of the skill which has to be a global skill\n  function setTaskSkill(uint256 _id, uint256 _skillId) public;\n\n  /// @notice Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb.\n  /// Allowed before a task is finalized.\n  /// @param _id Id of the task\n  /// @param _specificationHash Unique hash of the task brief in ddb\n  function setTaskBrief(uint256 _id, bytes32 _specificationHash) public;\n\n  /// @notice Set the due date on task `_id`. Allowed before a task is finalized.\n  /// @param _id Id of the task\n  /// @param _dueDate Due date as seconds since unix epoch\n  function setTaskDueDate(uint256 _id, uint256 _dueDate) public;\n\n  /// @notice Submit the task deliverable, i.e. the output of the work performed for task `_id`.\n  /// Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\n  /// @dev Set the `task.deliverableHash` and `task.completionTimestamp` properties.\n  /// @param _id Id of the task\n  /// @param _deliverableHash Unique hash of the task deliverable content in ddb\n  function submitTaskDeliverable(uint256 _id, bytes32 _deliverableHash) public;\n\n  /// @notice Submit the task deliverable for Worker and rating for Manager.\n  /// @dev Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\n  /// @param _id Id of the task\n  /// @param _deliverableHash Unique hash of the task deliverable content in ddb\n  /// @param _ratingSecret Rating secret for manager\n  function submitTaskDeliverableAndRating(uint256 _id, bytes32 _deliverableHash, bytes32 _ratingSecret) public;\n\n  /// @notice Called after task work rating is complete which closes the task and logs the respective reputation log updates.\n  /// Allowed to be called once per task. Secured function to authorised members.\n  /// @dev Set the `task.finalized` property to true\n  /// @param _id Id of the task\n  function finalizeTask(uint256 _id) public;\n\n  /// @notice Cancel a task at any point before it is finalized. Secured function to authorised members.\n  /// Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\n  /// @dev Set the `task.status` property to `1`.\n  /// @param _id Id of the task\n  function cancelTask(uint256 _id) public;\n\n  /// @notice Mark a task as complete after the due date has passed.\n  /// This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared.\n  /// Note that if the due date was not set, then this function will throw.\n  /// @param _id Id of the task\n  function completeTask(uint256 _id) public;\n\n  /// @notice Get a task with id `_id`\n  /// @param _id Id of the task\n  /// @return specificationHash Task brief hash\n  /// @return deliverableHash Task deliverable hash\n  /// @return status TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized\n  /// @return dueDate Due date\n  /// @return fundingPotId Id of funding pot for task\n  /// @return completionTimestamp Task completion timestamp\n  /// @return domainId Task domain id, default is root colony domain with id 1\n  /// @return skillIds Array of global skill ids assigned to task\n  function getTask(uint256 _id) public view returns (\n    bytes32 specificationHash,\n    bytes32 deliverableHash,\n    TaskStatus status,\n    uint256 dueDate,\n    uint256 fundingPotId,\n    uint256 completionTimestamp,\n    uint256 domainId,\n    uint256[] memory skillIds\n    );\n\n  /// @notice Get the `Role` properties back for role `_role` in task `_id`.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @return role The Role\n  function getTaskRole(uint256 _id, uint8 _role) public view returns (Role memory role);\n\n  /// @notice Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\n  /// @param _rewardInverse The inverse of the reward\n  function setRewardInverse(uint256 _rewardInverse) public;\n\n  /// @notice Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\n  /// @return rewardInverse The inverse of the reward\n  function getRewardInverse() public view returns (uint256 rewardInverse);\n\n  /// @notice Get payout amount in `_token` denomination for role `_role` in task `_id`.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return amount Payout amount\n  function getTaskPayout(uint256 _id, uint8 _role, address _token) public view returns (uint256 amount);\n\n  /// @notice Set `_token` payout for manager in task `_id` to `_amount`.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setTaskManagerPayout(uint256 _id, address _token, uint256 _amount) public;\n\n  /// @notice Set `_token` payout for evaluator in task `_id` to `_amount`.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setTaskEvaluatorPayout(uint256 _id, address _token, uint256 _amount) public;\n\n  /// @notice Set `_token` payout for worker in task `_id` to `_amount`.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _amount Payout amount\n  function setTaskWorkerPayout(uint256 _id, address _token, uint256 _amount) public;\n\n  /// @notice Set `_token` payout for all roles in task `_id` to the respective amounts.\n  /// @dev Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\n  /// @param _id Id of the task\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @param _managerAmount Payout amount for manager\n  /// @param _evaluatorAmount Payout amount for evaluator\n  /// @param _workerAmount Payout amount for worker\n  function setAllTaskPayouts(uint256 _id, address _token, uint256 _managerAmount, uint256 _evaluatorAmount, uint256 _workerAmount) public;\n\n  /// @notice Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`.\n  /// Allowed only after task is finalized. Here the network receives its fee from each payout.\n  /// Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n  /// @param _id Id of the task\n  /// @param _role Id of the role, as defined in TaskRole enum\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimTaskPayout(uint256 _id, uint8 _role, address _token) public;\n\n  /// @notice Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.\n  /// @notice Add a new payment in the colony. Can only be called by users with root permission.\n  /// All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\n  /// @param _token Address of the token used for reward payout\n  /// @param key Some Reputation hash tree key\n  /// @param value Reputation value\n  /// @param branchMask The branchmask of the proof\n  /// @param siblings The siblings of the proof\n  function startNextRewardPayout(address _token, bytes memory key, bytes memory value, uint256 branchMask, bytes32[] memory siblings) public;\n\n  /// @notice Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation\n  /// which will be proven via Merkle proof inside this function.\n  /// Can only be called if payout is active, i.e if 60 days have not passed from its creation.\n  /// Can only be called if next in queue.\n  /// @param _payoutId Id of the reward payout\n  /// @param _squareRoots Square roots of values used in equation:\n  /// `_squareRoots[0]` - square root of user reputation,\n  /// `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking),\n  /// `_squareRoots[2]` - square root of total reputation,\n  /// `_squareRoots[3]` - square root of total tokens,\n  /// `_squareRoots[4]` - square root of numerator (user reputation * user tokens),\n  /// `_squareRoots[5]` - square root of denominator (total reputation * total tokens),\n  /// `_squareRoots[6]` - square root of payout amount.\n  /// @param key Some Reputation hash tree key\n  /// @param value Reputation value\n  /// @param branchMask The branchmask of the proof\n  /// @param siblings The siblings of the proof\n  function claimRewardPayout(\n    uint256 _payoutId,\n    uint256[7] memory _squareRoots,\n    bytes memory key,\n    bytes memory value,\n    uint256 branchMask,\n    bytes32[] memory siblings\n    ) public;\n\n  /// @notice Get useful information about specific reward payout.\n  /// @param _payoutId Id of the reward payout\n  /// @return rewardPayoutCycle RewardPayoutCycle, containing propertes:\n  ///  `reputationState` Reputation root hash at the time of creation,\n  ///  `colonyWideReputation` Colony wide reputation in `reputationState`,\n  ///  `totalTokens` Total colony tokens at the time of creation,\n  ///  `amount` Total amount of tokens taken aside for reward payout,\n  ///  `tokenAddress` Token address,\n  ///  `blockTimestamp` Block number at the time of creation.\n  function getRewardPayoutInfo(uint256 _payoutId) public view returns (RewardPayoutCycle memory rewardPayoutCycle);\n\n  /// @notice Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`.\n  /// Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\n  /// @param _payoutId Id of the reward payout\n  function finalizeRewardPayout(uint256 _payoutId) public;\n\n  /// @notice Get the non-mapping properties of a pot by id.\n  /// @param _id Id of the pot which details to get\n  /// @return associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout\n  /// @return associatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId\n  /// @return payoutsWeCannotMake Number of payouts that cannot be completed with the current funding\n  /// @dev For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).\n  function getFundingPot(uint256 _id) public view returns (\n    FundingPotAssociatedType associatedType,\n    uint256 associatedTypeId,\n    uint256 payoutsWeCannotMake);\n\n  /// @notice Get the number of funding pots in the colony.\n  /// @return count The funding pots count\n  function getFundingPotCount() public view returns (uint256 count);\n\n  /// @notice Get the `_token` balance of pot with id `_potId`.\n  /// @param _potId Id of the funding pot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return balance Funding pot supply balance\n  function getFundingPotBalance(uint256 _potId, address _token) public view returns (uint256 balance);\n\n  /// @notice Get the assigned `_token` payouts of pot with id `_potId`.\n  /// @param _potId Id of the funding pot\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return payout Funding pot payout amount\n  function getFundingPotPayout(uint256 _potId, address _token) public view returns (uint256 payout);\n\n  /// @notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n  /// @param _permissionDomainId The domainId in which I have the permission to take this action\n  /// @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\n  /// @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\n  /// @param _fromPot Funding pot id providing the funds\n  /// @param _toPot Funding pot id receiving the funds\n  /// @param _amount Amount of funds\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function moveFundsBetweenPots(\n    uint256 _permissionDomainId,\n    uint256 _fromChildSkillIndex,\n    uint256 _toChildSkillIndex,\n    uint256 _fromPot,\n    uint256 _toPot,\n    uint256 _amount,\n    address _token\n    ) public;\n\n  /// @notice Move any funds received by the colony in `_token` denomination to the top-level domain pot,\n  /// siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  function claimColonyFunds(address _token) public;\n\n  /// @notice Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\n  /// @param _token Address of the token, `0x0` value indicates Ether\n  /// @return amount Total amount of tokens in funding pots other than the rewards pot (id 0)\n  function getNonRewardPotsTotal(address _token) public view returns (uint256 amount);\n}\n",
  "sourcePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/IColony.sol",
  "ast": {
    "absolutePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/IColony.sol",
    "exportedSymbols": {
      "IColony": [
        13039
      ]
    },
    "id": 13040,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12212,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "700:24:22"
      },
      {
        "id": 12213,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "743:33:22"
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/IRecovery.sol",
        "file": "./IRecovery.sol",
        "id": 12214,
        "nodeType": "ImportDirective",
        "scope": 13040,
        "sourceUnit": 13462,
        "src": "778:25:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/ColonyDataTypes.sol",
        "file": "./ColonyDataTypes.sol",
        "id": 12215,
        "nodeType": "ImportDirective",
        "scope": 13040,
        "sourceUnit": 2053,
        "src": "804:31:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 12216,
              "name": "ColonyDataTypes",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2052,
              "src": "1007:15:22",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ColonyDataTypes_$2052",
                "typeString": "contract ColonyDataTypes"
              }
            },
            "id": 12217,
            "nodeType": "InheritanceSpecifier",
            "src": "1007:15:22"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 12218,
              "name": "IRecovery",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 13461,
              "src": "1024:9:22",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRecovery_$13461",
                "typeString": "contract IRecovery"
              }
            },
            "id": 12219,
            "nodeType": "InheritanceSpecifier",
            "src": "1024:9:22"
          }
        ],
        "contractDependencies": [
          2052,
          11849,
          13461
        ],
        "contractKind": "contract",
        "documentation": "@title Colony interface\n @notice All publicly available functions are available here and registered to work with EtherRouter Network contract",
        "fullyImplemented": false,
        "id": 13039,
        "linearizedBaseContracts": [
          13039,
          13461,
          11849,
          2052
        ],
        "name": "IColony",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Get the `ColonyAuthority` for the colony.\n @return colonyAuthority The `ColonyAuthority` contract address",
            "id": 12224,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "authority",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12220,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1212:2:22"
            },
            "returnParameters": {
              "id": 12223,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12222,
                  "name": "colonyAuthority",
                  "nodeType": "VariableDeclaration",
                  "scope": 12224,
                  "src": "1236:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12221,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1236:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1235:25:22"
            },
            "scope": 13039,
            "src": "1194:67:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the colony `owner` address. This should be address(0x0) at all times.\n @dev Used for testing.\n @return colonyOwner Address of the colony owner",
            "id": 12229,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "owner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12225,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1450:2:22"
            },
            "returnParameters": {
              "id": 12228,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12227,
                  "name": "colonyOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 12229,
                  "src": "1474:19:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12226,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1474:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1473:21:22"
            },
            "scope": 13039,
            "src": "1436:59:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the Colony contract version.\n Starts from 1 and is incremented with every deployed contract change.\n @return colonyVersion Version number",
            "id": 12234,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "version",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1712:2:22"
            },
            "returnParameters": {
              "id": 12233,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12232,
                  "name": "colonyVersion",
                  "nodeType": "VariableDeclaration",
                  "scope": 12234,
                  "src": "1736:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12231,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1735:23:22"
            },
            "scope": 13039,
            "src": "1696:63:22",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Upgrades a colony to a new Colony contract version `_newVersion`.\n @dev Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\n @param _newVersion The target version for the upgrade",
            "id": 12239,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12237,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12236,
                  "name": "_newVersion",
                  "nodeType": "VariableDeclaration",
                  "scope": 12239,
                  "src": "2028:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12235,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2028:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2027:18:22"
            },
            "returnParameters": {
              "id": 12238,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:0:22"
            },
            "scope": 13039,
            "src": "2011:42:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice A function to be called after an upgrade has been done from v2 to v3.\n @dev Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to\n be public so it can be an external call.",
            "id": 12242,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finishUpgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12240,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2338:2:22"
            },
            "returnParameters": {
              "id": 12241,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2347:0:22"
            },
            "scope": 13039,
            "src": "2316:32:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the colony network address set on the Colony.\n @dev The colonyNetworkAddress we read here is set once, during `initialiseColony`.\n @return colonyNetwork The address of Colony Network instance",
            "id": 12247,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyNetwork",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12243,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2601:2:22"
            },
            "returnParameters": {
              "id": 12246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12245,
                  "name": "colonyNetwork",
                  "nodeType": "VariableDeclaration",
                  "scope": 12247,
                  "src": "2625:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12244,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2625:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2624:23:22"
            },
            "scope": 13039,
            "src": "2576:72:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the colony token.\n @return tokenAddress Address of the token contract",
            "id": 12252,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2762:2:22"
            },
            "returnParameters": {
              "id": 12251,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12250,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 12252,
                  "src": "2786:20:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12249,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2786:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2785:22:22"
            },
            "scope": 13039,
            "src": "2745:63:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony root role.\n Can be called by root role only.\n @param _user User we want to give an root role to\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12259,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRootRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12257,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12254,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12259,
                  "src": "3068:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12253,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3068:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12256,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12259,
                  "src": "3083:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12255,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3083:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3067:28:22"
            },
            "returnParameters": {
              "id": 12258,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3102:0:22"
            },
            "scope": 13039,
            "src": "3047:56:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony arbitration role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an arbitration role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12272,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setArbitrationRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12261,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3639:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12260,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3639:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12263,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3668:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12262,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3668:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12265,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3694:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12264,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3694:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12267,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3709:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12266,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3709:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12269,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3728:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12268,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3728:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3638:102:22"
            },
            "returnParameters": {
              "id": 12271,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3747:0:22"
            },
            "scope": 13039,
            "src": "3611:137:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony architecture role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an architecture role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12285,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setArchitectureRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12274,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4300:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12273,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4300:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12276,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4329:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12275,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4329:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12278,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4355:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12277,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4355:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12280,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4370:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12279,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4370:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12282,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4389:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12281,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4389:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4299:102:22"
            },
            "returnParameters": {
              "id": 12284,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4408:0:22"
            },
            "scope": 13039,
            "src": "4271:138:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony funding role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an funding role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12298,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFundingRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12287,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "4946:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12286,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4946:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12289,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "4975:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12288,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4975:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12291,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "5001:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12290,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5001:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12293,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "5016:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12292,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5016:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12295,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "5035:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12294,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5035:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4945:102:22"
            },
            "returnParameters": {
              "id": 12297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5054:0:22"
            },
            "scope": 13039,
            "src": "4922:133:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony admin role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an admin role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12311,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAdministrationRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12309,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12300,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5595:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12299,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5595:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12302,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5624:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12301,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5624:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12304,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5650:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12303,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5650:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12306,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5665:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12305,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5665:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12308,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5684:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12307,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5684:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5594:102:22"
            },
            "returnParameters": {
              "id": 12310,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5703:0:22"
            },
            "scope": 13039,
            "src": "5564:140:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Check whether a given user has a given role for the colony.\n Calls the function of the same name on the colony's authority contract.\n @param _user The user whose role we want to check\n @param _domainId The domain where we want to check for the role\n @param _role The role we want to check for\n @return hasRole Boolean indicating whether the given user has the given role in domain",
            "id": 12322,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasUserRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12313,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6149:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12312,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6149:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12315,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6164:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12314,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6164:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12317,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6183:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ColonyRole_$2002",
                    "typeString": "enum ColonyDataTypes.ColonyRole"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12316,
                    "name": "ColonyRole",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2002,
                    "src": "6183:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ColonyRole_$2002",
                      "typeString": "enum ColonyDataTypes.ColonyRole"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6148:52:22"
            },
            "returnParameters": {
              "id": 12321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12320,
                  "name": "hasRole",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6222:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12319,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6222:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6221:14:22"
            },
            "scope": 13039,
            "src": "6128:108:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Check whether a given user has a given role for the colony, in a child domain.\n Calls the function of the same name on the colony's authority contract and an internal inheritence validator function\n @param _user The user whose role we want to check\n @param _domainId Domain in which the caller has the role\n @param _role The role we want to check for\n @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n @param _childDomainId The domain where we want to use the role\n @return hasRole Boolean indicating whether the given user has the given role in domain",
            "id": 12337,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasInheritedUserRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12333,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12324,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6910:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12323,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6910:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12326,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6925:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12325,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6925:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12328,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6944:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ColonyRole_$2002",
                    "typeString": "enum ColonyDataTypes.ColonyRole"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12327,
                    "name": "ColonyRole",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2002,
                    "src": "6944:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ColonyRole_$2002",
                      "typeString": "enum ColonyDataTypes.ColonyRole"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12330,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6962:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12329,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6962:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12332,
                  "name": "_childDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6988:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12331,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6988:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6909:102:22"
            },
            "returnParameters": {
              "id": 12336,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12335,
                  "name": "hasRole",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "7037:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12334,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7037:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7036:14:22"
            },
            "scope": 13039,
            "src": "6880:171:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Gets the bytes32 representation of the roles for a user in a given domain\n @param who The user whose roles we want to get\n @param where The domain where we want to get roles for\n @return roles bytes32 representation of the roles",
            "id": 12346,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUserRoles",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12342,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12339,
                  "name": "who",
                  "nodeType": "VariableDeclaration",
                  "scope": 12346,
                  "src": "7335:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12338,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7335:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12341,
                  "name": "where",
                  "nodeType": "VariableDeclaration",
                  "scope": 12346,
                  "src": "7348:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12340,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7348:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7334:28:22"
            },
            "returnParameters": {
              "id": 12345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12344,
                  "name": "roles",
                  "nodeType": "VariableDeclaration",
                  "scope": 12346,
                  "src": "7384:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12343,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7384:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7383:15:22"
            },
            "scope": 13039,
            "src": "7313:86:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Called once when the colony is created to initialise certain storage slot values.\n @dev Sets the reward inverse to the uint max 2**256 - 1.\n @param _colonyNetworkAddress Address of the colony network\n @param _token Address of the colony ERC20 Token",
            "id": 12353,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialiseColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12351,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12348,
                  "name": "_colonyNetworkAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 12353,
                  "src": "7707:29:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12347,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7707:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12350,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12353,
                  "src": "7738:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12349,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7738:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7706:47:22"
            },
            "returnParameters": {
              "id": 12352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7760:0:22"
            },
            "scope": 13039,
            "src": "7681:80:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`.\n This reputation is assigned in the colony-wide domain. Secured function to authorised members.\n @dev Only allowed to be called when `taskCount` is `0` by authorized addresses.\n @param _users Array of address to bootstrap with reputation\n @param _amount Amount of reputation/tokens for every address",
            "id": 12362,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "bootstrapColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12360,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12356,
                  "name": "_users",
                  "nodeType": "VariableDeclaration",
                  "scope": 12362,
                  "src": "8233:23:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12354,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8233:7:22",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 12355,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "8233:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12359,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12362,
                  "src": "8258:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12357,
                      "name": "int",
                      "nodeType": "ElementaryTypeName",
                      "src": "8258:3:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 12358,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "8258:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8232:47:22"
            },
            "returnParameters": {
              "id": 12361,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8286:0:22"
            },
            "scope": 13039,
            "src": "8208:79:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Mint `_wad` amount of colony tokens. Secured function to authorised members.\n @param _wad Amount to mint",
            "id": 12367,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mintTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12364,
                  "name": "_wad",
                  "nodeType": "VariableDeclaration",
                  "scope": 12367,
                  "src": "8435:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12363,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8435:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8434:14:22"
            },
            "returnParameters": {
              "id": 12366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8455:0:22"
            },
            "scope": 13039,
            "src": "8415:41:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Register colony's ENS label.\n @param colonyName The label to register.\n @param orbitdb The path of the orbitDB database associated with the colony name",
            "id": 12374,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerColonyLabel",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12372,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12369,
                  "name": "colonyName",
                  "nodeType": "VariableDeclaration",
                  "scope": 12374,
                  "src": "8665:24:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12368,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8665:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12371,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 12374,
                  "src": "8691:21:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12370,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8691:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8664:49:22"
            },
            "returnParameters": {
              "id": 12373,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8720:0:22"
            },
            "scope": 13039,
            "src": "8636:85:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the colony",
            "id": 12379,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateColonyOrbitDB",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12377,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12376,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 12379,
                  "src": "8949:21:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12375,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8949:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8948:23:22"
            },
            "returnParameters": {
              "id": 12378,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8978:0:22"
            },
            "scope": 13039,
            "src": "8920:59:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n New funding pot is created and associated with the domain here.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _parentDomainId Id of the domain under which the new one will be added\n @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.",
            "id": 12388,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12381,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "9585:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12380,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9585:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12383,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "9614:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12382,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9614:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12385,
                  "name": "_parentDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "9640:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9640:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9584:80:22"
            },
            "returnParameters": {
              "id": 12387,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9671:0:22"
            },
            "scope": 13039,
            "src": "9566:106:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a domain by id.\n @param _id Id of the domain which details to get\n @return domain The domain",
            "id": 12395,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12391,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12390,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12395,
                  "src": "9816:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12389,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9816:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9815:13:22"
            },
            "returnParameters": {
              "id": 12394,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12393,
                  "name": "domain",
                  "nodeType": "VariableDeclaration",
                  "scope": 12395,
                  "src": "9850:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Domain_$2044_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Domain"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12392,
                    "name": "Domain",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2044,
                    "src": "9850:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Domain_$2044_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Domain"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9849:22:22"
            },
            "scope": 13039,
            "src": "9797:75:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of domains in the colony.\n @return count The domain count. Min 1 as the root domain is created at the same time as the colony",
            "id": 12400,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10059:2:22"
            },
            "returnParameters": {
              "id": 12399,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12398,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12400,
                  "src": "10083:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10083:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10082:15:22"
            },
            "scope": 13039,
            "src": "10036:62:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\n @param key The key of the element the proof is for.\n @param value The value of the element that the proof is for.\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof\n @return isValid True if the proof is valid, false otherwise.\n @dev For more detail about branchMask and siblings, examine the PatriciaTree implementation.\n While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own\n reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function\n is not currently exposed on the Colony's EtherRouter.",
            "id": 12414,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verifyReputationProof",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12410,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12402,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "10956:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12401,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10956:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12404,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "10974:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12403,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10974:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12406,
                  "name": "branchMask",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "10994:18:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12405,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10994:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12409,
                  "name": "siblings",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "11014:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12407,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "11014:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12408,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "11014:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10955:85:22"
            },
            "returnParameters": {
              "id": 12413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12412,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "11066:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12411,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11066:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11065:14:22"
            },
            "scope": 13039,
            "src": "10925:155:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Add a new expenditure in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _domainId The domain where the expenditure belongs\n @return expenditureId Identifier of the newly created expenditure",
            "id": 12425,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "makeExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12416,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11645:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12415,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11645:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12418,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11674:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12417,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11674:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12420,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11700:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12419,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11700:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11644:74:22"
            },
            "returnParameters": {
              "id": 12424,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12423,
                  "name": "expenditureId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11735:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12422,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11735:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11734:23:22"
            },
            "scope": 13039,
            "src": "11620:138:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Updates the expenditure owner. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _newOwner New owner of expenditure",
            "id": 12432,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12430,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12427,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12432,
                  "src": "11965:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12426,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11965:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12429,
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 12432,
                  "src": "11978:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12428,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11978:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11964:32:22"
            },
            "returnParameters": {
              "id": 12431,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12003:0:22"
            },
            "scope": 13039,
            "src": "11936:68:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Updates the expenditure owner. Can only be called by Arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _newOwner New owner of expenditure",
            "id": 12443,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferExpenditureViaArbitration",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12434,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12491:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12433,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12491:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12436,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12520:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12435,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12520:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12438,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12546:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12437,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12546:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12440,
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12559:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12439,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12559:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12490:87:22"
            },
            "returnParameters": {
              "id": 12442,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12584:0:22"
            },
            "scope": 13039,
            "src": "12448:137:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\n @param _id Expenditure identifier",
            "id": 12448,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12446,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12445,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12448,
                  "src": "12765:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12444,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12765:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12764:13:22"
            },
            "returnParameters": {
              "id": 12447,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12784:0:22"
            },
            "scope": 13039,
            "src": "12738:47:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Finalizes the expenditure and prevents further editing. Can only be called by expenditure owner.\n @param _id Expenditure identifier",
            "id": 12453,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12450,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12453,
                  "src": "12969:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12449,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12969:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12968:13:22"
            },
            "returnParameters": {
              "id": 12452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12988:0:22"
            },
            "scope": 13039,
            "src": "12940:49:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the recipient on an expenditure slot. Can only be called by expenditure owner.\n @param _id Id of the expenditure\n @param _slot Slot for the recipient address\n @param _recipient Address of the recipient",
            "id": 12462,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditureRecipient",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12460,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12455,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12462,
                  "src": "13262:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12454,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13262:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12457,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12462,
                  "src": "13275:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12456,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13275:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12459,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 12462,
                  "src": "13290:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12458,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13290:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13261:56:22"
            },
            "returnParameters": {
              "id": 12461,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13324:0:22"
            },
            "scope": 13039,
            "src": "13229:96:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the token payout on an expenditure slot. Can only be called by expenditure owner.\n @param _id Id of the expenditure\n @param _slot Number of the slot\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12473,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditurePayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12464,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13641:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12463,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13641:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12466,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13654:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12465,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13654:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12468,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13669:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13669:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12470,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13685:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12469,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13685:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13640:61:22"
            },
            "returnParameters": {
              "id": 12472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13708:0:22"
            },
            "scope": 13039,
            "src": "13611:98:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _skillId Id of the new skill to set",
            "id": 12482,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditureSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12475,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12482,
                  "src": "13963:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13963:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12477,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12482,
                  "src": "13976:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12476,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13976:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12479,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12482,
                  "src": "13991:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13991:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13962:46:22"
            },
            "returnParameters": {
              "id": 12481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14015:0:22"
            },
            "scope": 13039,
            "src": "13934:82:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the payout modifier on an expenditure slot. Can only be called by Arbitration role.\n @dev Note that when determining payouts the payoutModifier is incremented by WAD and converted into payoutScalar\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _payoutModifier Modifier to their payout (between -1 and 1, denominated in WADs, 0 means no modification)",
            "id": 12495,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditurePayoutModifier",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12484,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14748:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14748:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12486,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14781:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12485,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14781:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12488,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14811:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12487,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14811:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12490,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14828:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14828:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12492,
                  "name": "_payoutModifier",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14847:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 12491,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14847:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14742:133:22"
            },
            "returnParameters": {
              "id": 12494,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14882:0:22"
            },
            "scope": 13039,
            "src": "14705:178:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the claim delay on an expenditure slot. Can only be called by Arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _claimDelay Time (in seconds) to delay claiming payout after finalization",
            "id": 12508,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditureClaimDelay",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12497,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15456:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12496,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15456:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12499,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15489:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12498,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15489:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12501,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15519:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15519:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12503,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15536:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12502,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15536:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12505,
                  "name": "_claimDelay",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15555:19:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12504,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15555:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15450:130:22"
            },
            "returnParameters": {
              "id": 12507,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15587:0:22"
            },
            "scope": 13039,
            "src": "15417:171:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 12517,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimExpenditurePayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12515,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12510,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12517,
                  "src": "15878:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12509,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15878:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12512,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12517,
                  "src": "15891:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15891:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12514,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12517,
                  "src": "15906:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12513,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15906:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15877:44:22"
            },
            "returnParameters": {
              "id": 12516,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15928:0:22"
            },
            "scope": 13039,
            "src": "15846:83:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of expenditures in the colony.\n @return count The expenditure count",
            "id": 12522,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditureCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16063:2:22"
            },
            "returnParameters": {
              "id": 12521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12520,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12522,
                  "src": "16087:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12519,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16087:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16086:15:22"
            },
            "scope": 13039,
            "src": "16035:67:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an existing expenditure.\n @param _id Expenditure identifier\n @return expenditure The expenditure",
            "id": 12529,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12524,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12529,
                  "src": "16259:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12523,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16259:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16258:13:22"
            },
            "returnParameters": {
              "id": 12528,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12527,
                  "name": "expenditure",
                  "nodeType": "VariableDeclaration",
                  "scope": 12529,
                  "src": "16293:30:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Expenditure_$1927_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Expenditure"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12526,
                    "name": "Expenditure",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1927,
                    "src": "16293:11:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Expenditure_$1927_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Expenditure"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16292:32:22"
            },
            "scope": 13039,
            "src": "16235:90:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an existing expenditure slot.\n @param _id Expenditure identifier\n @param _slot Expenditure slot\n @return expenditureSlot The expenditure slot",
            "id": 12538,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditureSlot",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12531,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12538,
                  "src": "16536:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12530,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16536:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12533,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12538,
                  "src": "16549:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12532,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16549:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16535:28:22"
            },
            "returnParameters": {
              "id": 12537,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12536,
                  "name": "expenditureSlot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12538,
                  "src": "16585:38:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ExpenditureSlot_$1937_memory_ptr",
                    "typeString": "struct ColonyDataTypes.ExpenditureSlot"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12535,
                    "name": "ExpenditureSlot",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1937,
                    "src": "16585:15:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ExpenditureSlot_$1937_storage_ptr",
                      "typeString": "struct ColonyDataTypes.ExpenditureSlot"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16584:40:22"
            },
            "scope": 13039,
            "src": "16508:117:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an existing expenditure slot's payout for a token.\n @param _id Expenditure identifier\n @param _slot Expenditure slot\n @param _token Token address\n @return amount Amount of the payout for that slot/token.",
            "id": 12549,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditureSlotPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12540,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16909:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16909:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12542,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16922:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12541,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16922:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12544,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16937:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12543,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16937:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16908:44:22"
            },
            "returnParameters": {
              "id": 12548,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12547,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16974:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12546,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16974:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16973:16:22"
            },
            "scope": 13039,
            "src": "16875:115:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Add a new payment in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _recipient Address of the payment recipient\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount\n @param _domainId The domain where the payment belongs\n @param _skillId The skill associated with the payment\n @return paymentId Identifier of the newly created payment",
            "id": 12568,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addPayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12564,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12551,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17757:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17757:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12553,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17790:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12552,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17790:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12555,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17820:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12554,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17820:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12557,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17852:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12556,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17852:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12559,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17872:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12558,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17872:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12561,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17893:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12560,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17893:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12563,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17916:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12562,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17916:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "17751:182:22"
            },
            "returnParameters": {
              "id": 12567,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12566,
                  "name": "paymentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17954:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12565,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17954:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "17953:19:22"
            },
            "scope": 13039,
            "src": "17732:241:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Finalizes the payment and logs the reputation log updates.\n Allowed to be called once after payment is fully funded. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier",
            "id": 12577,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizePayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12575,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12570,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12577,
                  "src": "18409:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12569,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18409:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12572,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12577,
                  "src": "18438:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12571,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18438:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12574,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12577,
                  "src": "18464:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12573,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18464:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "18408:68:22"
            },
            "returnParameters": {
              "id": 12576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18483:0:22"
            },
            "scope": 13039,
            "src": "18384:100:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the recipient on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _recipient Address of the payment recipient",
            "id": 12588,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaymentRecipient",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12586,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12579,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18902:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12578,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18902:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12581,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18931:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12580,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18931:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12583,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18957:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12582,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18957:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12585,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18970:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12584,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18970:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "18901:96:22"
            },
            "returnParameters": {
              "id": 12587,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "19004:0:22"
            },
            "scope": 13039,
            "src": "18873:132:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the skill on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _skillId Id of the new skill to set",
            "id": 12599,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaymentSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12597,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12590,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19407:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12589,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19407:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12592,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19436:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12591,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19436:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12594,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19462:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12593,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19462:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12596,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19475:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12595,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19475:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "19406:86:22"
            },
            "returnParameters": {
              "id": 12598,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "19499:0:22"
            },
            "scope": 13039,
            "src": "19382:118:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the payout for a given token on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12612,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaymentPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12601,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "19978:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12600,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19978:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12603,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20007:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20007:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12605,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20033:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12604,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20033:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12607,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20046:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12606,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20046:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12609,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20062:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12608,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20062:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "19977:101:22"
            },
            "returnParameters": {
              "id": 12611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20085:0:22"
            },
            "scope": 13039,
            "src": "19952:134:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an exiting payment.\n @param _id Payment identifier\n @return payment The Payment data structure",
            "id": 12619,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12615,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12614,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12619,
                  "src": "20237:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12613,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20237:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20236:13:22"
            },
            "returnParameters": {
              "id": 12618,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12617,
                  "name": "payment",
                  "nodeType": "VariableDeclaration",
                  "scope": 12619,
                  "src": "20271:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Payment_$1953_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Payment"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12616,
                    "name": "Payment",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1953,
                    "src": "20271:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Payment_$1953_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Payment"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20270:24:22"
            },
            "scope": 13039,
            "src": "20217:78:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout.\n Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n @param _id Payment identifier\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 12626,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimPayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12624,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12621,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12626,
                  "src": "20679:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12620,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20679:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12623,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12626,
                  "src": "20692:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12622,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20692:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20678:29:22"
            },
            "returnParameters": {
              "id": 12625,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20714:0:22"
            },
            "scope": 13039,
            "src": "20657:58:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of payments in the colony.\n @return count The payment count",
            "id": 12631,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPaymentCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12627,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20837:2:22"
            },
            "returnParameters": {
              "id": 12630,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12629,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12631,
                  "src": "20861:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12628,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20861:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20860:15:22"
            },
            "scope": 13039,
            "src": "20813:63:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Make a new task in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _specificationHash Database identifier where the task specification is stored\n @param _domainId The domain where the task belongs\n @param _skillId The skill associated with the task, can set to `0` for no-op\n @param _dueDate The due date of the task, can set to `0` for no-op",
            "id": 12646,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "makeTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12644,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12633,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21522:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12632,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21522:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12635,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21555:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12634,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21555:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12637,
                  "name": "_specificationHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21585:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12636,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21585:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12639,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21617:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12638,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21617:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12641,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21640:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12640,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21640:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12643,
                  "name": "_dueDate",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21662:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12642,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21662:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "21516:163:22"
            },
            "returnParameters": {
              "id": 12645,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21686:0:22"
            },
            "scope": 13039,
            "src": "21499:188:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of tasks in the colony.\n @return count The task count",
            "id": 12651,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12647,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21800:2:22"
            },
            "returnParameters": {
              "id": 12650,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12649,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12651,
                  "src": "21824:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12648,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21824:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "21823:15:22"
            },
            "scope": 13039,
            "src": "21779:60:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\n @param _id Id of the task\n @return nonce The current task change nonce value",
            "id": 12658,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskChangeNonce",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12653,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12658,
                  "src": "22069:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12652,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22069:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "22068:13:22"
            },
            "returnParameters": {
              "id": 12657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12656,
                  "name": "nonce",
                  "nodeType": "VariableDeclaration",
                  "scope": 12658,
                  "src": "22103:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12655,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22103:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "22102:15:22"
            },
            "scope": 13039,
            "src": "22041:77:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker)\n using the detached signatures for these users.\n @dev The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation.\n Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n @param _sigV recovery id\n @param _sigR r output of the ECDSA signature of the transaction\n @param _sigS s output of the ECDSA signature of the transaction\n @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n Currently we only accept 0 value transactions but this is kept as a future option\n @param _data The transaction data",
            "id": 12677,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "executeTaskChange",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12675,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12661,
                  "name": "_sigV",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23104:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12659,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "23104:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12660,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23104:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12664,
                  "name": "_sigR",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23130:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12662,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "23130:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12663,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23130:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12667,
                  "name": "_sigS",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23158:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12665,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "23158:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12666,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23158:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12670,
                  "name": "_mode",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23186:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12668,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "23186:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12669,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23186:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12672,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23212:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12671,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "23212:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12674,
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23232:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12673,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "23232:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "23098:158:22"
            },
            "returnParameters": {
              "id": 12676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23263:0:22"
            },
            "scope": 13039,
            "src": "23072:192:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Executes a task role update transaction `_data` which is approved and signed by two of addresses.\n depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`.\n Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n @param _sigV recovery id\n @param _sigR r output of the ECDSA signature of the transaction\n @param _sigS s output of the ECDSA signature of the transaction\n @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n Currently we only accept 0 value transactions but this is kept as a future option\n @param _data The transaction data",
            "id": 12696,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "executeTaskRoleAssignment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12694,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12680,
                  "name": "_sigV",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24179:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12678,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "24179:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12679,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24179:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12683,
                  "name": "_sigR",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24205:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12681,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "24205:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12682,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24205:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12686,
                  "name": "_sigS",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24233:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12684,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "24233:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12685,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24233:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12689,
                  "name": "_mode",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24261:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12687,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "24261:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12688,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24261:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12691,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24287:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12690,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24287:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12693,
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24307:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12692,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "24307:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "24173:158:22"
            },
            "returnParameters": {
              "id": 12695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24338:0:22"
            },
            "scope": 13039,
            "src": "24139:200:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`.\n Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached.\n Allowed only for evaluator to rate worker and for worker to rate manager performance.\n Once submitted ratings can not be changed or overwritten.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50).\n Can be generated via `IColony.generateSecret` helper function.",
            "id": 12705,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitTaskWorkRating",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12698,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12705,
                  "src": "25093:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12697,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25093:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12700,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12705,
                  "src": "25106:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12699,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "25106:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12702,
                  "name": "_ratingSecret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12705,
                  "src": "25119:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12701,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "25119:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "25092:49:22"
            },
            "returnParameters": {
              "id": 12704,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "25148:0:22"
            },
            "scope": 13039,
            "src": "25063:86:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`.\n Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted\n (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\n @dev Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match,\n sets the task role properties `rated` to `true` and `rating` to `_rating`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\n @param _salt Salt value used to generate the rating secret",
            "id": 12716,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "revealTaskWorkRating",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12714,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12707,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "25963:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12706,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25963:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12709,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "25976:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12708,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "25976:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12711,
                  "name": "_rating",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "25989:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12710,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "25989:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12713,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "26004:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12712,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26004:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "25962:56:22"
            },
            "returnParameters": {
              "id": 12715,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "26025:0:22"
            },
            "scope": 13039,
            "src": "25933:93:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\n @param _salt Salt value\n @param _value Value to hide\n @return secret `keccak256` hash of joint _salt and _value",
            "id": 12725,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "generateSecret",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12721,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12718,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 12725,
                  "src": "26312:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12717,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26312:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12720,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12725,
                  "src": "26327:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12719,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26327:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26311:31:22"
            },
            "returnParameters": {
              "id": 12724,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12723,
                  "name": "secret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12725,
                  "src": "26364:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12722,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26364:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26363:16:22"
            },
            "scope": 13039,
            "src": "26288:92:22",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `ColonyStorage.RatingSecrets` information for task `_id`.\n @param _id Id of the task\n @return nSecrets Number of secrets\n @return lastSubmittedAt Timestamp of the last submitted rating secret",
            "id": 12734,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskWorkRatingSecretsInfo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12728,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12727,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12734,
                  "src": "26651:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12726,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26651:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26650:13:22"
            },
            "returnParameters": {
              "id": 12733,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12730,
                  "name": "nSecrets",
                  "nodeType": "VariableDeclaration",
                  "scope": 12734,
                  "src": "26685:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12729,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26685:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12732,
                  "name": "lastSubmittedAt",
                  "nodeType": "VariableDeclaration",
                  "scope": 12734,
                  "src": "26703:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12731,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26703:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26684:43:22"
            },
            "scope": 13039,
            "src": "26613:115:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the rating secret submitted for role `_role` in task `_id`\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @return secret Rating secret `bytes32` value",
            "id": 12743,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskWorkRatingSecret",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12739,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12736,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12743,
                  "src": "26988:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12735,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26988:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12738,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12743,
                  "src": "27001:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12737,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "27001:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26987:26:22"
            },
            "returnParameters": {
              "id": 12742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12741,
                  "name": "secret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12743,
                  "src": "27035:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12740,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "27035:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "27034:16:22"
            },
            "scope": 13039,
            "src": "26955:96:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Assigning manager role.\n Current manager and user we want to assign role to both need to agree.\n User we want to set here also needs to be an admin.\n Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a manager role to\n @param _permissionDomainId The domain ID in which _user has the Administration permission\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`",
            "id": 12754,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskManagerRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12745,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27751:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12744,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27751:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12747,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27764:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12746,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27764:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12749,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27787:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12748,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27787:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12751,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27816:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12750,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27816:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "27750:91:22"
            },
            "returnParameters": {
              "id": 12753,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "27848:0:22"
            },
            "scope": 13039,
            "src": "27723:126:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Assigning evaluator role.\n Can only be set if there is no one currently assigned to be an evaluator.\n Manager of the task and user we want to assign role to both need to agree.\n Managers can assign themselves to this role, if there is no one currently assigned to it.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a evaluator role to",
            "id": 12761,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskEvaluatorRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12759,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12756,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12761,
                  "src": "28368:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12755,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "28368:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12758,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12761,
                  "src": "28381:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12757,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28381:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "28367:36:22"
            },
            "returnParameters": {
              "id": 12760,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "28410:0:22"
            },
            "scope": 13039,
            "src": "28338:73:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Assigning worker role.\n Can only be set if there is no one currently assigned to be a worker.\n Manager of the task and user we want to assign role to both need to agree.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a worker role to",
            "id": 12768,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskWorkerRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12766,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12763,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12768,
                  "src": "28821:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12762,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "28821:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12765,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12768,
                  "src": "28834:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12764,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28834:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "28820:36:22"
            },
            "returnParameters": {
              "id": 12767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "28863:0:22"
            },
            "scope": 13039,
            "src": "28794:70:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Removing evaluator role.\n Agreed between manager and currently assigned evaluator.\n @param _id Id of the task",
            "id": 12773,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeTaskEvaluatorRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12771,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12770,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12773,
                  "src": "29035:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12769,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29035:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29034:13:22"
            },
            "returnParameters": {
              "id": 12772,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29054:0:22"
            },
            "scope": 13039,
            "src": "29002:53:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Removing worker role.\n Agreed between manager and currently assigned worker.\n @param _id Id of the task",
            "id": 12778,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeTaskWorkerRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12775,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12778,
                  "src": "29217:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12774,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29217:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29216:13:22"
            },
            "returnParameters": {
              "id": 12777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29236:0:22"
            },
            "scope": 13039,
            "src": "29187:50:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the skill for task `_id`.\n @dev Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct.\n Allowed before a task is finalized.\n @param _id Id of the task\n @param _skillId Id of the skill which has to be a global skill",
            "id": 12785,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12780,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12785,
                  "src": "29574:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12779,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29574:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12782,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12785,
                  "src": "29587:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12781,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29587:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29573:31:22"
            },
            "returnParameters": {
              "id": 12784,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29611:0:22"
            },
            "scope": 13039,
            "src": "29552:60:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb.\n Allowed before a task is finalized.\n @param _id Id of the task\n @param _specificationHash Unique hash of the task brief in ddb",
            "id": 12792,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskBrief",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12790,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12787,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12792,
                  "src": "29905:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29905:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12789,
                  "name": "_specificationHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12792,
                  "src": "29918:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12788,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "29918:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29904:41:22"
            },
            "returnParameters": {
              "id": 12791,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29952:0:22"
            },
            "scope": 13039,
            "src": "29883:70:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the due date on task `_id`. Allowed before a task is finalized.\n @param _id Id of the task\n @param _dueDate Due date as seconds since unix epoch",
            "id": 12799,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskDueDate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12797,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12794,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12799,
                  "src": "30154:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12793,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30154:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12796,
                  "name": "_dueDate",
                  "nodeType": "VariableDeclaration",
                  "scope": 12799,
                  "src": "30167:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12795,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30167:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "30153:31:22"
            },
            "returnParameters": {
              "id": 12798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "30191:0:22"
            },
            "scope": 13039,
            "src": "30130:62:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Submit the task deliverable, i.e. the output of the work performed for task `_id`.\n Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\n @dev Set the `task.deliverableHash` and `task.completionTimestamp` properties.\n @param _id Id of the task\n @param _deliverableHash Unique hash of the task deliverable content in ddb",
            "id": 12806,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitTaskDeliverable",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12801,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12806,
                  "src": "30639:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12800,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30639:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12803,
                  "name": "_deliverableHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12806,
                  "src": "30652:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12802,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "30652:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "30638:39:22"
            },
            "returnParameters": {
              "id": 12805,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "30684:0:22"
            },
            "scope": 13039,
            "src": "30608:77:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Submit the task deliverable for Worker and rating for Manager.\n @dev Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\n @param _id Id of the task\n @param _deliverableHash Unique hash of the task deliverable content in ddb\n @param _ratingSecret Rating secret for manager",
            "id": 12815,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitTaskDeliverableAndRating",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12813,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12808,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12815,
                  "src": "31063:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12807,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31063:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12810,
                  "name": "_deliverableHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12815,
                  "src": "31076:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12809,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "31076:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12812,
                  "name": "_ratingSecret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12815,
                  "src": "31102:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12811,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "31102:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "31062:62:22"
            },
            "returnParameters": {
              "id": 12814,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "31131:0:22"
            },
            "scope": 13039,
            "src": "31023:109:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Called after task work rating is complete which closes the task and logs the respective reputation log updates.\n Allowed to be called once per task. Secured function to authorised members.\n @dev Set the `task.finalized` property to true\n @param _id Id of the task",
            "id": 12820,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12817,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12820,
                  "src": "31451:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12816,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31451:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "31450:13:22"
            },
            "returnParameters": {
              "id": 12819,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "31470:0:22"
            },
            "scope": 13039,
            "src": "31429:42:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Cancel a task at any point before it is finalized. Secured function to authorised members.\n Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\n @dev Set the `task.status` property to `1`.\n @param _id Id of the task",
            "id": 12825,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12822,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12825,
                  "src": "31794:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12821,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31794:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "31793:13:22"
            },
            "returnParameters": {
              "id": 12824,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "31813:0:22"
            },
            "scope": 13039,
            "src": "31774:40:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Mark a task as complete after the due date has passed.\n This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared.\n Note that if the due date was not set, then this function will throw.\n @param _id Id of the task",
            "id": 12830,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "completeTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12827,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12830,
                  "src": "32146:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12826,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32146:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "32145:13:22"
            },
            "returnParameters": {
              "id": 12829,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "32165:0:22"
            },
            "scope": 13039,
            "src": "32124:42:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a task with id `_id`\n @param _id Id of the task\n @return specificationHash Task brief hash\n @return deliverableHash Task deliverable hash\n @return status TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized\n @return dueDate Due date\n @return fundingPotId Id of funding pot for task\n @return completionTimestamp Task completion timestamp\n @return domainId Task domain id, default is root colony domain with id 1\n @return skillIds Array of global skill ids assigned to task",
            "id": 12852,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12833,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12832,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32731:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12831,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32731:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "32730:13:22"
            },
            "returnParameters": {
              "id": 12851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12835,
                  "name": "specificationHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32770:25:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12834,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "32770:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12837,
                  "name": "deliverableHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32801:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12836,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "32801:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12839,
                  "name": "status",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32830:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_TaskStatus_$1994",
                    "typeString": "enum ColonyDataTypes.TaskStatus"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12838,
                    "name": "TaskStatus",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1994,
                    "src": "32830:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_TaskStatus_$1994",
                      "typeString": "enum ColonyDataTypes.TaskStatus"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12841,
                  "name": "dueDate",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32853:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12840,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32853:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12843,
                  "name": "fundingPotId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32874:20:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32874:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12845,
                  "name": "completionTimestamp",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32900:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12844,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32900:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12847,
                  "name": "domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32933:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12846,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32933:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12850,
                  "name": "skillIds",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32955:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12848,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "32955:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12849,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "32955:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "32764:222:22"
            },
            "scope": 13039,
            "src": "32714:273:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `Role` properties back for role `_role` in task `_id`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @return role The Role",
            "id": 12861,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12854,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12861,
                  "src": "33212:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12853,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "33212:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12856,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12861,
                  "src": "33225:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12855,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "33225:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33211:26:22"
            },
            "returnParameters": {
              "id": 12860,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12859,
                  "name": "role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12861,
                  "src": "33259:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$2009_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Role"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12858,
                    "name": "Role",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2009,
                    "src": "33259:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Role_$2009_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Role"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33258:18:22"
            },
            "scope": 13039,
            "src": "33191:86:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\n @param _rewardInverse The inverse of the reward",
            "id": 12866,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRewardInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12864,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12863,
                  "name": "_rewardInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 12866,
                  "src": "33465:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12862,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "33465:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33464:24:22"
            },
            "returnParameters": {
              "id": 12865,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "33495:0:22"
            },
            "scope": 13039,
            "src": "33439:57:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\n @return rewardInverse The inverse of the reward",
            "id": 12871,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "33685:2:22"
            },
            "returnParameters": {
              "id": 12870,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12869,
                  "name": "rewardInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 12871,
                  "src": "33709:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12868,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "33709:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33708:23:22"
            },
            "scope": 13039,
            "src": "33660:72:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get payout amount in `_token` denomination for role `_role` in task `_id`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _token Address of the token, `0x0` value indicates Ether\n @return amount Payout amount",
            "id": 12882,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12873,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34048:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12872,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34048:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12875,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34061:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12874,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "34061:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12877,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34074:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34074:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34047:42:22"
            },
            "returnParameters": {
              "id": 12881,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12880,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34111:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12879,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34111:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34110:16:22"
            },
            "scope": 13039,
            "src": "34025:102:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for manager in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12891,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskManagerPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12889,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12884,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12891,
                  "src": "34372:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34372:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12886,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12891,
                  "src": "34385:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34385:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12888,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12891,
                  "src": "34401:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12887,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34401:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34371:46:22"
            },
            "returnParameters": {
              "id": 12890,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "34424:0:22"
            },
            "scope": 13039,
            "src": "34342:83:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for evaluator in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12900,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskEvaluatorPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12893,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12900,
                  "src": "34674:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12892,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34674:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12895,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12900,
                  "src": "34687:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12894,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34687:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12897,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12900,
                  "src": "34703:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12896,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34703:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34673:46:22"
            },
            "returnParameters": {
              "id": 12899,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "34726:0:22"
            },
            "scope": 13039,
            "src": "34642:85:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for worker in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12909,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskWorkerPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12907,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12902,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12909,
                  "src": "34970:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12901,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34970:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12904,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12909,
                  "src": "34983:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12903,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34983:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12906,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12909,
                  "src": "34999:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12905,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34999:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34969:46:22"
            },
            "returnParameters": {
              "id": 12908,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "35022:0:22"
            },
            "scope": 13039,
            "src": "34941:82:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for all roles in task `_id` to the respective amounts.\n @dev Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _managerAmount Payout amount for manager\n @param _evaluatorAmount Payout amount for evaluator\n @param _workerAmount Payout amount for worker",
            "id": 12922,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAllTaskPayouts",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12911,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35511:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12910,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35511:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12913,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35524:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12912,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "35524:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12915,
                  "name": "_managerAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35540:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12914,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35540:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12917,
                  "name": "_evaluatorAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35564:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12916,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35564:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12919,
                  "name": "_workerAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35590:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12918,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35590:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "35510:102:22"
            },
            "returnParameters": {
              "id": 12921,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "35619:0:22"
            },
            "scope": 13039,
            "src": "35484:136:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`.\n Allowed only after task is finalized. Here the network receives its fee from each payout.\n Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 12931,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimTaskPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12929,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12924,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "36139:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12923,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "36139:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12926,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "36152:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12925,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "36152:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12928,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "36165:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12927,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "36165:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "36138:42:22"
            },
            "returnParameters": {
              "id": 12930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "36187:0:22"
            },
            "scope": 13039,
            "src": "36114:74:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.\n @notice Add a new payment in the colony. Can only be called by users with root permission.\n All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\n @param _token Address of the token used for reward payout\n @param key Some Reputation hash tree key\n @param value Reputation value\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof",
            "id": 12945,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startNextRewardPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12933,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36794:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12932,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "36794:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12935,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36810:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12934,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "36810:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12937,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36828:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12936,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "36828:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12939,
                  "name": "branchMask",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36848:18:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12938,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "36848:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12942,
                  "name": "siblings",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36868:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12940,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "36868:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12941,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "36868:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "36793:101:22"
            },
            "returnParameters": {
              "id": 12944,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "36901:0:22"
            },
            "scope": 13039,
            "src": "36763:139:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation\n which will be proven via Merkle proof inside this function.\n Can only be called if payout is active, i.e if 60 days have not passed from its creation.\n Can only be called if next in queue.\n @param _payoutId Id of the reward payout\n @param _squareRoots Square roots of values used in equation:\n `_squareRoots[0]` - square root of user reputation,\n `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking),\n `_squareRoots[2]` - square root of total reputation,\n `_squareRoots[3]` - square root of total tokens,\n `_squareRoots[4]` - square root of numerator (user reputation * user tokens),\n `_squareRoots[5]` - square root of denominator (total reputation * total tokens),\n `_squareRoots[6]` - square root of payout amount.\n @param key Some Reputation hash tree key\n @param value Reputation value\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof",
            "id": 12963,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimRewardPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12961,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12947,
                  "name": "_payoutId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38042:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12946,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38042:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12951,
                  "name": "_squareRoots",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38065:30:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
                    "typeString": "uint256[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12948,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "38065:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12950,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 12949,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "38073:1:22",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_7_by_1",
                        "typeString": "int_const 7"
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "38065:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$7_storage_ptr",
                      "typeString": "uint256[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12953,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38101:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12952,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "38101:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12955,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38123:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12954,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "38123:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12957,
                  "name": "branchMask",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38147:18:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12956,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38147:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12960,
                  "name": "siblings",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38171:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12958,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "38171:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12959,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "38171:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "38036:166:22"
            },
            "returnParameters": {
              "id": 12962,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "38209:0:22"
            },
            "scope": 13039,
            "src": "38010:200:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get useful information about specific reward payout.\n @param _payoutId Id of the reward payout\n @return rewardPayoutCycle RewardPayoutCycle, containing propertes:\n  `reputationState` Reputation root hash at the time of creation,\n  `colonyWideReputation` Colony wide reputation in `reputationState`,\n  `totalTokens` Total colony tokens at the time of creation,\n  `amount` Total amount of tokens taken aside for reward payout,\n  `tokenAddress` Token address,\n  `blockTimestamp` Block number at the time of creation.",
            "id": 12970,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardPayoutInfo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12965,
                  "name": "_payoutId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12970,
                  "src": "38811:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38811:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "38810:19:22"
            },
            "returnParameters": {
              "id": 12969,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12968,
                  "name": "rewardPayoutCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 12970,
                  "src": "38851:42:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RewardPayoutCycle_$1916_memory_ptr",
                    "typeString": "struct ColonyDataTypes.RewardPayoutCycle"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12967,
                    "name": "RewardPayoutCycle",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1916,
                    "src": "38851:17:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RewardPayoutCycle_$1916_storage_ptr",
                      "typeString": "struct ColonyDataTypes.RewardPayoutCycle"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "38850:44:22"
            },
            "scope": 13039,
            "src": "38782:113:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`.\n Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\n @param _payoutId Id of the reward payout",
            "id": 12975,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeRewardPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12973,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12972,
                  "name": "_payoutId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12975,
                  "src": "39213:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12971,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39213:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "39212:19:22"
            },
            "returnParameters": {
              "id": 12974,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "39238:0:22"
            },
            "scope": 13039,
            "src": "39183:56:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the non-mapping properties of a pot by id.\n @param _id Id of the pot which details to get\n @return associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout\n @return associatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId\n @return payoutsWeCannotMake Number of payouts that cannot be completed with the current funding\n @dev For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).",
            "id": 12986,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPot",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12977,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39818:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12976,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39818:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "39817:13:22"
            },
            "returnParameters": {
              "id": 12985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12980,
                  "name": "associatedType",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39857:39:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_FundingPotAssociatedType_$2024",
                    "typeString": "enum ColonyDataTypes.FundingPotAssociatedType"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12979,
                    "name": "FundingPotAssociatedType",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2024,
                    "src": "39857:24:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_FundingPotAssociatedType_$2024",
                      "typeString": "enum ColonyDataTypes.FundingPotAssociatedType"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12982,
                  "name": "associatedTypeId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39902:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12981,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39902:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12984,
                  "name": "payoutsWeCannotMake",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39932:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12983,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39932:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "39851:109:22"
            },
            "scope": 13039,
            "src": "39795:166:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of funding pots in the colony.\n @return count The funding pots count",
            "id": 12991,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPotCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12987,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "40095:2:22"
            },
            "returnParameters": {
              "id": 12990,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12989,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12991,
                  "src": "40119:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12988,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40119:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40118:15:22"
            },
            "scope": 13039,
            "src": "40068:66:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `_token` balance of pot with id `_potId`.\n @param _potId Id of the funding pot\n @param _token Address of the token, `0x0` value indicates Ether\n @return balance Funding pot supply balance",
            "id": 13000,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPotBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12996,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12993,
                  "name": "_potId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13000,
                  "src": "40393:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12992,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40393:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12995,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13000,
                  "src": "40409:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12994,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "40409:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40392:32:22"
            },
            "returnParameters": {
              "id": 12999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12998,
                  "name": "balance",
                  "nodeType": "VariableDeclaration",
                  "scope": 13000,
                  "src": "40446:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12997,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40446:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40445:17:22"
            },
            "scope": 13039,
            "src": "40363:100:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the assigned `_token` payouts of pot with id `_potId`.\n @param _potId Id of the funding pot\n @param _token Address of the token, `0x0` value indicates Ether\n @return payout Funding pot payout amount",
            "id": 13009,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPotPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13005,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13002,
                  "name": "_potId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13009,
                  "src": "40728:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13001,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40728:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13004,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13009,
                  "src": "40744:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13003,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "40744:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40727:32:22"
            },
            "returnParameters": {
              "id": 13008,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13007,
                  "name": "payout",
                  "nodeType": "VariableDeclaration",
                  "scope": 13009,
                  "src": "40781:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13006,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40781:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40780:16:22"
            },
            "scope": 13039,
            "src": "40699:98:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\n @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\n @param _fromPot Funding pot id providing the funds\n @param _toPot Funding pot id receiving the funds\n @param _amount Amount of funds\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 13026,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "moveFundsBetweenPots",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13011,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41514:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13010,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41514:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13013,
                  "name": "_fromChildSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41547:28:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13012,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41547:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13015,
                  "name": "_toChildSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41581:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13014,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41581:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13017,
                  "name": "_fromPot",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41613:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13016,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41613:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13019,
                  "name": "_toPot",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41635:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13018,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41635:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13021,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41655:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13020,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41655:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13023,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41676:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13022,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "41676:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "41508:188:22"
            },
            "returnParameters": {
              "id": 13025,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "41703:0:22"
            },
            "scope": 13039,
            "src": "41479:225:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Move any funds received by the colony in `_token` denomination to the top-level domain pot,\n siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 13031,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimColonyFunds",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13029,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13028,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13031,
                  "src": "42021:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13027,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "42021:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "42020:16:22"
            },
            "returnParameters": {
              "id": 13030,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "42043:0:22"
            },
            "scope": 13039,
            "src": "41995:49:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\n @param _token Address of the token, `0x0` value indicates Ether\n @return amount Total amount of tokens in funding pots other than the rewards pot (id 0)",
            "id": 13038,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getNonRewardPotsTotal",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13034,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13033,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13038,
                  "src": "42378:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13032,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "42378:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "42377:16:22"
            },
            "returnParameters": {
              "id": 13037,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13036,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 13038,
                  "src": "42415:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13035,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "42415:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "42414:16:22"
            },
            "scope": 13039,
            "src": "42347:84:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 13040,
        "src": "987:41446:22"
      }
    ],
    "src": "700:41734:22"
  },
  "legacyAST": {
    "absolutePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/IColony.sol",
    "exportedSymbols": {
      "IColony": [
        13039
      ]
    },
    "id": 13040,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12212,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "700:24:22"
      },
      {
        "id": 12213,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "743:33:22"
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/IRecovery.sol",
        "file": "./IRecovery.sol",
        "id": 12214,
        "nodeType": "ImportDirective",
        "scope": 13040,
        "sourceUnit": 13462,
        "src": "778:25:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/kronosapiens/code/colony/colonyNetwork/contracts/ColonyDataTypes.sol",
        "file": "./ColonyDataTypes.sol",
        "id": 12215,
        "nodeType": "ImportDirective",
        "scope": 13040,
        "sourceUnit": 2053,
        "src": "804:31:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 12216,
              "name": "ColonyDataTypes",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2052,
              "src": "1007:15:22",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ColonyDataTypes_$2052",
                "typeString": "contract ColonyDataTypes"
              }
            },
            "id": 12217,
            "nodeType": "InheritanceSpecifier",
            "src": "1007:15:22"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 12218,
              "name": "IRecovery",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 13461,
              "src": "1024:9:22",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IRecovery_$13461",
                "typeString": "contract IRecovery"
              }
            },
            "id": 12219,
            "nodeType": "InheritanceSpecifier",
            "src": "1024:9:22"
          }
        ],
        "contractDependencies": [
          2052,
          11849,
          13461
        ],
        "contractKind": "contract",
        "documentation": "@title Colony interface\n @notice All publicly available functions are available here and registered to work with EtherRouter Network contract",
        "fullyImplemented": false,
        "id": 13039,
        "linearizedBaseContracts": [
          13039,
          13461,
          11849,
          2052
        ],
        "name": "IColony",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Get the `ColonyAuthority` for the colony.\n @return colonyAuthority The `ColonyAuthority` contract address",
            "id": 12224,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "authority",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12220,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1212:2:22"
            },
            "returnParameters": {
              "id": 12223,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12222,
                  "name": "colonyAuthority",
                  "nodeType": "VariableDeclaration",
                  "scope": 12224,
                  "src": "1236:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12221,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1236:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1235:25:22"
            },
            "scope": 13039,
            "src": "1194:67:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the colony `owner` address. This should be address(0x0) at all times.\n @dev Used for testing.\n @return colonyOwner Address of the colony owner",
            "id": 12229,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "owner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12225,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1450:2:22"
            },
            "returnParameters": {
              "id": 12228,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12227,
                  "name": "colonyOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 12229,
                  "src": "1474:19:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12226,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1474:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1473:21:22"
            },
            "scope": 13039,
            "src": "1436:59:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the Colony contract version.\n Starts from 1 and is incremented with every deployed contract change.\n @return colonyVersion Version number",
            "id": 12234,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "version",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1712:2:22"
            },
            "returnParameters": {
              "id": 12233,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12232,
                  "name": "colonyVersion",
                  "nodeType": "VariableDeclaration",
                  "scope": 12234,
                  "src": "1736:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12231,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1735:23:22"
            },
            "scope": 13039,
            "src": "1696:63:22",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Upgrades a colony to a new Colony contract version `_newVersion`.\n @dev Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.\n @param _newVersion The target version for the upgrade",
            "id": 12239,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12237,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12236,
                  "name": "_newVersion",
                  "nodeType": "VariableDeclaration",
                  "scope": 12239,
                  "src": "2028:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12235,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2028:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2027:18:22"
            },
            "returnParameters": {
              "id": 12238,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:0:22"
            },
            "scope": 13039,
            "src": "2011:42:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice A function to be called after an upgrade has been done from v2 to v3.\n @dev Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to\n be public so it can be an external call.",
            "id": 12242,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finishUpgrade",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12240,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2338:2:22"
            },
            "returnParameters": {
              "id": 12241,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2347:0:22"
            },
            "scope": 13039,
            "src": "2316:32:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns the colony network address set on the Colony.\n @dev The colonyNetworkAddress we read here is set once, during `initialiseColony`.\n @return colonyNetwork The address of Colony Network instance",
            "id": 12247,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getColonyNetwork",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12243,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2601:2:22"
            },
            "returnParameters": {
              "id": 12246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12245,
                  "name": "colonyNetwork",
                  "nodeType": "VariableDeclaration",
                  "scope": 12247,
                  "src": "2625:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12244,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2625:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2624:23:22"
            },
            "scope": 13039,
            "src": "2576:72:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the colony token.\n @return tokenAddress Address of the token contract",
            "id": 12252,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2762:2:22"
            },
            "returnParameters": {
              "id": 12251,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12250,
                  "name": "tokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 12252,
                  "src": "2786:20:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12249,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2786:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2785:22:22"
            },
            "scope": 13039,
            "src": "2745:63:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony root role.\n Can be called by root role only.\n @param _user User we want to give an root role to\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12259,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRootRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12257,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12254,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12259,
                  "src": "3068:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12253,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3068:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12256,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12259,
                  "src": "3083:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12255,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3083:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3067:28:22"
            },
            "returnParameters": {
              "id": 12258,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3102:0:22"
            },
            "scope": 13039,
            "src": "3047:56:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony arbitration role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an arbitration role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12272,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setArbitrationRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12261,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3639:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12260,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3639:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12263,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3668:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12262,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3668:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12265,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3694:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12264,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3694:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12267,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3709:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12266,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3709:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12269,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12272,
                  "src": "3728:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12268,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3728:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3638:102:22"
            },
            "returnParameters": {
              "id": 12271,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3747:0:22"
            },
            "scope": 13039,
            "src": "3611:137:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony architecture role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an architecture role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12285,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setArchitectureRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12274,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4300:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12273,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4300:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12276,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4329:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12275,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4329:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12278,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4355:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12277,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4355:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12280,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4370:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12279,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4370:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12282,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12285,
                  "src": "4389:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12281,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4389:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4299:102:22"
            },
            "returnParameters": {
              "id": 12284,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4408:0:22"
            },
            "scope": 13039,
            "src": "4271:138:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony funding role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an funding role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12298,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFundingRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12287,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "4946:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12286,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4946:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12289,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "4975:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12288,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4975:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12291,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "5001:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12290,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5001:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12293,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "5016:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12292,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5016:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12295,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12298,
                  "src": "5035:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12294,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5035:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4945:102:22"
            },
            "returnParameters": {
              "id": 12297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5054:0:22"
            },
            "scope": 13039,
            "src": "4922:133:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set new colony admin role.\n Can be called by root role or architecture role.\n @param _permissionDomainId Domain in which the caller has root/architecture role\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _user User we want to give an admin role to\n @param _domainId Domain in which we are giving user the role\n @param _setTo The state of the role permission (true assign the permission, false revokes it)",
            "id": 12311,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAdministrationRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12309,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12300,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5595:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12299,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5595:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12302,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5624:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12301,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5624:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12304,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5650:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12303,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5650:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12306,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5665:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12305,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5665:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12308,
                  "name": "_setTo",
                  "nodeType": "VariableDeclaration",
                  "scope": 12311,
                  "src": "5684:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12307,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5684:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5594:102:22"
            },
            "returnParameters": {
              "id": 12310,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5703:0:22"
            },
            "scope": 13039,
            "src": "5564:140:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Check whether a given user has a given role for the colony.\n Calls the function of the same name on the colony's authority contract.\n @param _user The user whose role we want to check\n @param _domainId The domain where we want to check for the role\n @param _role The role we want to check for\n @return hasRole Boolean indicating whether the given user has the given role in domain",
            "id": 12322,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasUserRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12313,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6149:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12312,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6149:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12315,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6164:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12314,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6164:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12317,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6183:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ColonyRole_$2002",
                    "typeString": "enum ColonyDataTypes.ColonyRole"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12316,
                    "name": "ColonyRole",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2002,
                    "src": "6183:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ColonyRole_$2002",
                      "typeString": "enum ColonyDataTypes.ColonyRole"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6148:52:22"
            },
            "returnParameters": {
              "id": 12321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12320,
                  "name": "hasRole",
                  "nodeType": "VariableDeclaration",
                  "scope": 12322,
                  "src": "6222:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12319,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6222:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6221:14:22"
            },
            "scope": 13039,
            "src": "6128:108:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Check whether a given user has a given role for the colony, in a child domain.\n Calls the function of the same name on the colony's authority contract and an internal inheritence validator function\n @param _user The user whose role we want to check\n @param _domainId Domain in which the caller has the role\n @param _role The role we want to check for\n @param _childSkillIndex The index that the `_childDomainId` is relative to `_domainId`\n @param _childDomainId The domain where we want to use the role\n @return hasRole Boolean indicating whether the given user has the given role in domain",
            "id": 12337,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasInheritedUserRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12333,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12324,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6910:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12323,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6910:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12326,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6925:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12325,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6925:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12328,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6944:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ColonyRole_$2002",
                    "typeString": "enum ColonyDataTypes.ColonyRole"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12327,
                    "name": "ColonyRole",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2002,
                    "src": "6944:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ColonyRole_$2002",
                      "typeString": "enum ColonyDataTypes.ColonyRole"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12330,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6962:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12329,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6962:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12332,
                  "name": "_childDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "6988:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12331,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6988:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6909:102:22"
            },
            "returnParameters": {
              "id": 12336,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12335,
                  "name": "hasRole",
                  "nodeType": "VariableDeclaration",
                  "scope": 12337,
                  "src": "7037:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12334,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7037:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7036:14:22"
            },
            "scope": 13039,
            "src": "6880:171:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Gets the bytes32 representation of the roles for a user in a given domain\n @param who The user whose roles we want to get\n @param where The domain where we want to get roles for\n @return roles bytes32 representation of the roles",
            "id": 12346,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUserRoles",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12342,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12339,
                  "name": "who",
                  "nodeType": "VariableDeclaration",
                  "scope": 12346,
                  "src": "7335:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12338,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7335:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12341,
                  "name": "where",
                  "nodeType": "VariableDeclaration",
                  "scope": 12346,
                  "src": "7348:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12340,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7348:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7334:28:22"
            },
            "returnParameters": {
              "id": 12345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12344,
                  "name": "roles",
                  "nodeType": "VariableDeclaration",
                  "scope": 12346,
                  "src": "7384:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12343,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7384:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7383:15:22"
            },
            "scope": 13039,
            "src": "7313:86:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Called once when the colony is created to initialise certain storage slot values.\n @dev Sets the reward inverse to the uint max 2**256 - 1.\n @param _colonyNetworkAddress Address of the colony network\n @param _token Address of the colony ERC20 Token",
            "id": 12353,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialiseColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12351,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12348,
                  "name": "_colonyNetworkAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 12353,
                  "src": "7707:29:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12347,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7707:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12350,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12353,
                  "src": "7738:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12349,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7738:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "7706:47:22"
            },
            "returnParameters": {
              "id": 12352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7760:0:22"
            },
            "scope": 13039,
            "src": "7681:80:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`.\n This reputation is assigned in the colony-wide domain. Secured function to authorised members.\n @dev Only allowed to be called when `taskCount` is `0` by authorized addresses.\n @param _users Array of address to bootstrap with reputation\n @param _amount Amount of reputation/tokens for every address",
            "id": 12362,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "bootstrapColony",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12360,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12356,
                  "name": "_users",
                  "nodeType": "VariableDeclaration",
                  "scope": 12362,
                  "src": "8233:23:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12354,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8233:7:22",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 12355,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "8233:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12359,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12362,
                  "src": "8258:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                    "typeString": "int256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12357,
                      "name": "int",
                      "nodeType": "ElementaryTypeName",
                      "src": "8258:3:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "id": 12358,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "8258:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                      "typeString": "int256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8232:47:22"
            },
            "returnParameters": {
              "id": 12361,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8286:0:22"
            },
            "scope": 13039,
            "src": "8208:79:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Mint `_wad` amount of colony tokens. Secured function to authorised members.\n @param _wad Amount to mint",
            "id": 12367,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mintTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12364,
                  "name": "_wad",
                  "nodeType": "VariableDeclaration",
                  "scope": 12367,
                  "src": "8435:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12363,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8435:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8434:14:22"
            },
            "returnParameters": {
              "id": 12366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8455:0:22"
            },
            "scope": 13039,
            "src": "8415:41:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Register colony's ENS label.\n @param colonyName The label to register.\n @param orbitdb The path of the orbitDB database associated with the colony name",
            "id": 12374,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerColonyLabel",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12372,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12369,
                  "name": "colonyName",
                  "nodeType": "VariableDeclaration",
                  "scope": 12374,
                  "src": "8665:24:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12368,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8665:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12371,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 12374,
                  "src": "8691:21:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12370,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8691:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8664:49:22"
            },
            "returnParameters": {
              "id": 12373,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8720:0:22"
            },
            "scope": 13039,
            "src": "8636:85:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain\n @param orbitdb The path of the orbitDB database to be associated with the colony",
            "id": 12379,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateColonyOrbitDB",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12377,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12376,
                  "name": "orbitdb",
                  "nodeType": "VariableDeclaration",
                  "scope": 12379,
                  "src": "8949:21:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12375,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8949:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8948:23:22"
            },
            "returnParameters": {
              "id": 12378,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8978:0:22"
            },
            "scope": 13039,
            "src": "8920:59:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Add a colony domain, and its respective local skill under skill with id `_parentSkillId`.\n New funding pot is created and associated with the domain here.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _parentDomainId Id of the domain under which the new one will be added\n @dev Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.",
            "id": 12388,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12381,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "9585:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12380,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9585:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12383,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "9614:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12382,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9614:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12385,
                  "name": "_parentDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "9640:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9640:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9584:80:22"
            },
            "returnParameters": {
              "id": 12387,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9671:0:22"
            },
            "scope": 13039,
            "src": "9566:106:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a domain by id.\n @param _id Id of the domain which details to get\n @return domain The domain",
            "id": 12395,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDomain",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12391,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12390,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12395,
                  "src": "9816:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12389,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9816:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9815:13:22"
            },
            "returnParameters": {
              "id": 12394,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12393,
                  "name": "domain",
                  "nodeType": "VariableDeclaration",
                  "scope": 12395,
                  "src": "9850:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Domain_$2044_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Domain"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12392,
                    "name": "Domain",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2044,
                    "src": "9850:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Domain_$2044_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Domain"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "9849:22:22"
            },
            "scope": 13039,
            "src": "9797:75:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of domains in the colony.\n @return count The domain count. Min 1 as the root domain is created at the same time as the colony",
            "id": 12400,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDomainCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10059:2:22"
            },
            "returnParameters": {
              "id": 12399,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12398,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12400,
                  "src": "10083:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10083:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10082:15:22"
            },
            "scope": 13039,
            "src": "10036:62:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with.\n @param key The key of the element the proof is for.\n @param value The value of the element that the proof is for.\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof\n @return isValid True if the proof is valid, false otherwise.\n @dev For more detail about branchMask and siblings, examine the PatriciaTree implementation.\n While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own\n reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function\n is not currently exposed on the Colony's EtherRouter.",
            "id": 12414,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verifyReputationProof",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12410,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12402,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "10956:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12401,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10956:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12404,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "10974:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12403,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10974:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12406,
                  "name": "branchMask",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "10994:18:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12405,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10994:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12409,
                  "name": "siblings",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "11014:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12407,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "11014:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12408,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "11014:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "10955:85:22"
            },
            "returnParameters": {
              "id": 12413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12412,
                  "name": "isValid",
                  "nodeType": "VariableDeclaration",
                  "scope": 12414,
                  "src": "11066:12:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12411,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11066:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11065:14:22"
            },
            "scope": 13039,
            "src": "10925:155:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Add a new expenditure in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _domainId The domain where the expenditure belongs\n @return expenditureId Identifier of the newly created expenditure",
            "id": 12425,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "makeExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12416,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11645:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12415,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11645:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12418,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11674:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12417,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11674:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12420,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11700:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12419,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11700:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11644:74:22"
            },
            "returnParameters": {
              "id": 12424,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12423,
                  "name": "expenditureId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12425,
                  "src": "11735:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12422,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11735:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11734:23:22"
            },
            "scope": 13039,
            "src": "11620:138:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Updates the expenditure owner. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _newOwner New owner of expenditure",
            "id": 12432,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12430,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12427,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12432,
                  "src": "11965:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12426,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11965:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12429,
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 12432,
                  "src": "11978:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12428,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11978:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "11964:32:22"
            },
            "returnParameters": {
              "id": 12431,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12003:0:22"
            },
            "scope": 13039,
            "src": "11936:68:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Updates the expenditure owner. Can only be called by Arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _newOwner New owner of expenditure",
            "id": 12443,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferExpenditureViaArbitration",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12434,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12491:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12433,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12491:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12436,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12520:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12435,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12520:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12438,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12546:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12437,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12546:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12440,
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 12443,
                  "src": "12559:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12439,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12559:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12490:87:22"
            },
            "returnParameters": {
              "id": 12442,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12584:0:22"
            },
            "scope": 13039,
            "src": "12448:137:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Cancels the expenditure and prevents further editing. Can only be called by expenditure owner.\n @param _id Expenditure identifier",
            "id": 12448,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12446,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12445,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12448,
                  "src": "12765:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12444,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12765:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12764:13:22"
            },
            "returnParameters": {
              "id": 12447,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12784:0:22"
            },
            "scope": 13039,
            "src": "12738:47:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Finalizes the expenditure and prevents further editing. Can only be called by expenditure owner.\n @param _id Expenditure identifier",
            "id": 12453,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12450,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12453,
                  "src": "12969:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12449,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12969:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "12968:13:22"
            },
            "returnParameters": {
              "id": 12452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12988:0:22"
            },
            "scope": 13039,
            "src": "12940:49:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the recipient on an expenditure slot. Can only be called by expenditure owner.\n @param _id Id of the expenditure\n @param _slot Slot for the recipient address\n @param _recipient Address of the recipient",
            "id": 12462,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditureRecipient",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12460,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12455,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12462,
                  "src": "13262:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12454,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13262:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12457,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12462,
                  "src": "13275:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12456,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13275:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12459,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 12462,
                  "src": "13290:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12458,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13290:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13261:56:22"
            },
            "returnParameters": {
              "id": 12461,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13324:0:22"
            },
            "scope": 13039,
            "src": "13229:96:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the token payout on an expenditure slot. Can only be called by expenditure owner.\n @param _id Id of the expenditure\n @param _slot Number of the slot\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12473,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditurePayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12464,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13641:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12463,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13641:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12466,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13654:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12465,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13654:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12468,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13669:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13669:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12470,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12473,
                  "src": "13685:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12469,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13685:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13640:61:22"
            },
            "returnParameters": {
              "id": 12472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13708:0:22"
            },
            "scope": 13039,
            "src": "13611:98:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the skill on an expenditure slot. Can only be called by expenditure owner.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _skillId Id of the new skill to set",
            "id": 12482,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditureSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12475,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12482,
                  "src": "13963:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13963:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12477,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12482,
                  "src": "13976:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12476,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13976:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12479,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12482,
                  "src": "13991:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13991:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13962:46:22"
            },
            "returnParameters": {
              "id": 12481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14015:0:22"
            },
            "scope": 13039,
            "src": "13934:82:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the payout modifier on an expenditure slot. Can only be called by Arbitration role.\n @dev Note that when determining payouts the payoutModifier is incremented by WAD and converted into payoutScalar\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _payoutModifier Modifier to their payout (between -1 and 1, denominated in WADs, 0 means no modification)",
            "id": 12495,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditurePayoutModifier",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12484,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14748:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14748:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12486,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14781:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12485,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14781:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12488,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14811:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12487,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14811:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12490,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14828:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14828:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12492,
                  "name": "_payoutModifier",
                  "nodeType": "VariableDeclaration",
                  "scope": 12495,
                  "src": "14847:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 12491,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14847:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "14742:133:22"
            },
            "returnParameters": {
              "id": 12494,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14882:0:22"
            },
            "scope": 13039,
            "src": "14705:178:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the claim delay on an expenditure slot. Can only be called by Arbitration role.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _claimDelay Time (in seconds) to delay claiming payout after finalization",
            "id": 12508,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setExpenditureClaimDelay",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12497,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15456:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12496,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15456:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12499,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15489:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12498,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15489:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12501,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15519:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15519:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12503,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15536:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12502,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15536:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12505,
                  "name": "_claimDelay",
                  "nodeType": "VariableDeclaration",
                  "scope": 12508,
                  "src": "15555:19:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12504,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15555:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15450:130:22"
            },
            "returnParameters": {
              "id": 12507,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15587:0:22"
            },
            "scope": 13039,
            "src": "15417:171:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the payout for an expenditure slot. Here the network receives a fee from each payout.\n @param _id Expenditure identifier\n @param _slot Number of the slot\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 12517,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimExpenditurePayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12515,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12510,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12517,
                  "src": "15878:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12509,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15878:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12512,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12517,
                  "src": "15891:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15891:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12514,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12517,
                  "src": "15906:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12513,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15906:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "15877:44:22"
            },
            "returnParameters": {
              "id": 12516,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15928:0:22"
            },
            "scope": 13039,
            "src": "15846:83:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of expenditures in the colony.\n @return count The expenditure count",
            "id": 12522,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditureCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16063:2:22"
            },
            "returnParameters": {
              "id": 12521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12520,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12522,
                  "src": "16087:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12519,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16087:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16086:15:22"
            },
            "scope": 13039,
            "src": "16035:67:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an existing expenditure.\n @param _id Expenditure identifier\n @return expenditure The expenditure",
            "id": 12529,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditure",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12524,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12529,
                  "src": "16259:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12523,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16259:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16258:13:22"
            },
            "returnParameters": {
              "id": 12528,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12527,
                  "name": "expenditure",
                  "nodeType": "VariableDeclaration",
                  "scope": 12529,
                  "src": "16293:30:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Expenditure_$1927_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Expenditure"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12526,
                    "name": "Expenditure",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1927,
                    "src": "16293:11:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Expenditure_$1927_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Expenditure"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16292:32:22"
            },
            "scope": 13039,
            "src": "16235:90:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an existing expenditure slot.\n @param _id Expenditure identifier\n @param _slot Expenditure slot\n @return expenditureSlot The expenditure slot",
            "id": 12538,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditureSlot",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12531,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12538,
                  "src": "16536:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12530,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16536:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12533,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12538,
                  "src": "16549:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12532,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16549:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16535:28:22"
            },
            "returnParameters": {
              "id": 12537,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12536,
                  "name": "expenditureSlot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12538,
                  "src": "16585:38:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ExpenditureSlot_$1937_memory_ptr",
                    "typeString": "struct ColonyDataTypes.ExpenditureSlot"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12535,
                    "name": "ExpenditureSlot",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1937,
                    "src": "16585:15:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ExpenditureSlot_$1937_storage_ptr",
                      "typeString": "struct ColonyDataTypes.ExpenditureSlot"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16584:40:22"
            },
            "scope": 13039,
            "src": "16508:117:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an existing expenditure slot's payout for a token.\n @param _id Expenditure identifier\n @param _slot Expenditure slot\n @param _token Token address\n @return amount Amount of the payout for that slot/token.",
            "id": 12549,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpenditureSlotPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12540,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16909:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16909:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12542,
                  "name": "_slot",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16922:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12541,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16922:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12544,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16937:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12543,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16937:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16908:44:22"
            },
            "returnParameters": {
              "id": 12548,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12547,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12549,
                  "src": "16974:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12546,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16974:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "16973:16:22"
            },
            "scope": 13039,
            "src": "16875:115:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Add a new payment in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`,\n (only used if `_permissionDomainId` is different to `_domainId`)\n @param _recipient Address of the payment recipient\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount\n @param _domainId The domain where the payment belongs\n @param _skillId The skill associated with the payment\n @return paymentId Identifier of the newly created payment",
            "id": 12568,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addPayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12564,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12551,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17757:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17757:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12553,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17790:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12552,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17790:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12555,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17820:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12554,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17820:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12557,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17852:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12556,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17852:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12559,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17872:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12558,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17872:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12561,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17893:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12560,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17893:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12563,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17916:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12562,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17916:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "17751:182:22"
            },
            "returnParameters": {
              "id": 12567,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12566,
                  "name": "paymentId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12568,
                  "src": "17954:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12565,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17954:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "17953:19:22"
            },
            "scope": 13039,
            "src": "17732:241:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Finalizes the payment and logs the reputation log updates.\n Allowed to be called once after payment is fully funded. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier",
            "id": 12577,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizePayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12575,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12570,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12577,
                  "src": "18409:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12569,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18409:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12572,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12577,
                  "src": "18438:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12571,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18438:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12574,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12577,
                  "src": "18464:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12573,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18464:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "18408:68:22"
            },
            "returnParameters": {
              "id": 12576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18483:0:22"
            },
            "scope": 13039,
            "src": "18384:100:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the recipient on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _recipient Address of the payment recipient",
            "id": 12588,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaymentRecipient",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12586,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12579,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18902:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12578,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18902:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12581,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18931:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12580,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18931:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12583,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18957:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12582,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18957:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12585,
                  "name": "_recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 12588,
                  "src": "18970:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12584,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18970:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "18901:96:22"
            },
            "returnParameters": {
              "id": 12587,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "19004:0:22"
            },
            "scope": 13039,
            "src": "18873:132:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the skill on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _skillId Id of the new skill to set",
            "id": 12599,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaymentSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12597,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12590,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19407:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12589,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19407:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12592,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19436:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12591,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19436:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12594,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19462:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12593,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19462:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12596,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12599,
                  "src": "19475:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12595,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19475:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "19406:86:22"
            },
            "returnParameters": {
              "id": 12598,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "19499:0:22"
            },
            "scope": 13039,
            "src": "19382:118:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Sets the payout for a given token on an existing payment. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _id Payment identifier\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12612,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPaymentPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12601,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "19978:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12600,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19978:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12603,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20007:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20007:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12605,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20033:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12604,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20033:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12607,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20046:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12606,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20046:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12609,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12612,
                  "src": "20062:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12608,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20062:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "19977:101:22"
            },
            "returnParameters": {
              "id": 12611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20085:0:22"
            },
            "scope": 13039,
            "src": "19952:134:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Returns an exiting payment.\n @param _id Payment identifier\n @return payment The Payment data structure",
            "id": 12619,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12615,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12614,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12619,
                  "src": "20237:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12613,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20237:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20236:13:22"
            },
            "returnParameters": {
              "id": 12618,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12617,
                  "name": "payment",
                  "nodeType": "VariableDeclaration",
                  "scope": 12619,
                  "src": "20271:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Payment_$1953_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Payment"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12616,
                    "name": "Payment",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1953,
                    "src": "20271:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Payment_$1953_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Payment"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20270:24:22"
            },
            "scope": 13039,
            "src": "20217:78:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout.\n Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n @param _id Payment identifier\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 12626,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimPayment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12624,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12621,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12626,
                  "src": "20679:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12620,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20679:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12623,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12626,
                  "src": "20692:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12622,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20692:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20678:29:22"
            },
            "returnParameters": {
              "id": 12625,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20714:0:22"
            },
            "scope": 13039,
            "src": "20657:58:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of payments in the colony.\n @return count The payment count",
            "id": 12631,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getPaymentCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12627,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20837:2:22"
            },
            "returnParameters": {
              "id": 12630,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12629,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12631,
                  "src": "20861:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12628,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20861:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "20860:15:22"
            },
            "scope": 13039,
            "src": "20813:63:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Make a new task in the colony. Secured function to authorised members.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`\n @param _specificationHash Database identifier where the task specification is stored\n @param _domainId The domain where the task belongs\n @param _skillId The skill associated with the task, can set to `0` for no-op\n @param _dueDate The due date of the task, can set to `0` for no-op",
            "id": 12646,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "makeTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12644,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12633,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21522:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12632,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21522:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12635,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21555:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12634,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21555:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12637,
                  "name": "_specificationHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21585:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12636,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "21585:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12639,
                  "name": "_domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21617:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12638,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21617:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12641,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21640:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12640,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21640:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12643,
                  "name": "_dueDate",
                  "nodeType": "VariableDeclaration",
                  "scope": 12646,
                  "src": "21662:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12642,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21662:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "21516:163:22"
            },
            "returnParameters": {
              "id": 12645,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21686:0:22"
            },
            "scope": 13039,
            "src": "21499:188:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of tasks in the colony.\n @return count The task count",
            "id": 12651,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12647,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21800:2:22"
            },
            "returnParameters": {
              "id": 12650,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12649,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12651,
                  "src": "21824:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12648,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21824:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "21823:15:22"
            },
            "scope": 13039,
            "src": "21779:60:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call.\n @param _id Id of the task\n @return nonce The current task change nonce value",
            "id": 12658,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskChangeNonce",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12653,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12658,
                  "src": "22069:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12652,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22069:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "22068:13:22"
            },
            "returnParameters": {
              "id": 12657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12656,
                  "name": "nonce",
                  "nodeType": "VariableDeclaration",
                  "scope": 12658,
                  "src": "22103:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12655,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22103:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "22102:15:22"
            },
            "scope": 13039,
            "src": "22041:77:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker)\n using the detached signatures for these users.\n @dev The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation.\n Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n @param _sigV recovery id\n @param _sigR r output of the ECDSA signature of the transaction\n @param _sigS s output of the ECDSA signature of the transaction\n @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n Currently we only accept 0 value transactions but this is kept as a future option\n @param _data The transaction data",
            "id": 12677,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "executeTaskChange",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12675,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12661,
                  "name": "_sigV",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23104:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12659,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "23104:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12660,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23104:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12664,
                  "name": "_sigR",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23130:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12662,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "23130:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12663,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23130:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12667,
                  "name": "_sigS",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23158:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12665,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "23158:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12666,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23158:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12670,
                  "name": "_mode",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23186:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12668,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "23186:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12669,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "23186:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12672,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23212:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12671,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "23212:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12674,
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 12677,
                  "src": "23232:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12673,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "23232:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "23098:158:22"
            },
            "returnParameters": {
              "id": 12676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23263:0:22"
            },
            "scope": 13039,
            "src": "23072:192:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Executes a task role update transaction `_data` which is approved and signed by two of addresses.\n depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`.\n Upon successful execution the `taskChangeNonces` entry for the task is incremented.\n @param _sigV recovery id\n @param _sigR r output of the ECDSA signature of the transaction\n @param _sigS s output of the ECDSA signature of the transaction\n @param _mode How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)\n @param _value The transaction value, i.e. number of wei to be sent when the transaction is executed\n Currently we only accept 0 value transactions but this is kept as a future option\n @param _data The transaction data",
            "id": 12696,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "executeTaskRoleAssignment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12694,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12680,
                  "name": "_sigV",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24179:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12678,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "24179:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12679,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24179:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12683,
                  "name": "_sigR",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24205:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12681,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "24205:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12682,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24205:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12686,
                  "name": "_sigS",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24233:22:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12684,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "24233:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12685,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24233:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12689,
                  "name": "_mode",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24261:20:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12687,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "24261:5:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 12688,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "24261:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12691,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24287:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12690,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24287:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12693,
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 12696,
                  "src": "24307:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12692,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "24307:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "24173:158:22"
            },
            "returnParameters": {
              "id": 12695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24338:0:22"
            },
            "scope": 13039,
            "src": "24139:200:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`.\n Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached.\n Allowed only for evaluator to rate worker and for worker to rate manager performance.\n Once submitted ratings can not be changed or overwritten.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _ratingSecret `keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50).\n Can be generated via `IColony.generateSecret` helper function.",
            "id": 12705,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitTaskWorkRating",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12698,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12705,
                  "src": "25093:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12697,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25093:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12700,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12705,
                  "src": "25106:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12699,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "25106:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12702,
                  "name": "_ratingSecret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12705,
                  "src": "25119:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12701,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "25119:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "25092:49:22"
            },
            "returnParameters": {
              "id": 12704,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "25148:0:22"
            },
            "scope": 13039,
            "src": "25063:86:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`.\n Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted\n (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring.\n @dev Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match,\n sets the task role properties `rated` to `true` and `rating` to `_rating`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _rating 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)\n @param _salt Salt value used to generate the rating secret",
            "id": 12716,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "revealTaskWorkRating",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12714,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12707,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "25963:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12706,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25963:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12709,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "25976:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12708,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "25976:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12711,
                  "name": "_rating",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "25989:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12710,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "25989:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12713,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 12716,
                  "src": "26004:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12712,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26004:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "25962:56:22"
            },
            "returnParameters": {
              "id": 12715,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "26025:0:22"
            },
            "scope": 13039,
            "src": "25933:93:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`\n @param _salt Salt value\n @param _value Value to hide\n @return secret `keccak256` hash of joint _salt and _value",
            "id": 12725,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "generateSecret",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12721,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12718,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 12725,
                  "src": "26312:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12717,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26312:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12720,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12725,
                  "src": "26327:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12719,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26327:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26311:31:22"
            },
            "returnParameters": {
              "id": 12724,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12723,
                  "name": "secret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12725,
                  "src": "26364:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12722,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26364:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26363:16:22"
            },
            "scope": 13039,
            "src": "26288:92:22",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `ColonyStorage.RatingSecrets` information for task `_id`.\n @param _id Id of the task\n @return nSecrets Number of secrets\n @return lastSubmittedAt Timestamp of the last submitted rating secret",
            "id": 12734,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskWorkRatingSecretsInfo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12728,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12727,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12734,
                  "src": "26651:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12726,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26651:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26650:13:22"
            },
            "returnParameters": {
              "id": 12733,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12730,
                  "name": "nSecrets",
                  "nodeType": "VariableDeclaration",
                  "scope": 12734,
                  "src": "26685:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12729,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26685:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12732,
                  "name": "lastSubmittedAt",
                  "nodeType": "VariableDeclaration",
                  "scope": 12734,
                  "src": "26703:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12731,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26703:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26684:43:22"
            },
            "scope": 13039,
            "src": "26613:115:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the rating secret submitted for role `_role` in task `_id`\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @return secret Rating secret `bytes32` value",
            "id": 12743,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskWorkRatingSecret",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12739,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12736,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12743,
                  "src": "26988:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12735,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "26988:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12738,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12743,
                  "src": "27001:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12737,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "27001:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "26987:26:22"
            },
            "returnParameters": {
              "id": 12742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12741,
                  "name": "secret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12743,
                  "src": "27035:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12740,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "27035:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "27034:16:22"
            },
            "scope": 13039,
            "src": "26955:96:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Assigning manager role.\n Current manager and user we want to assign role to both need to agree.\n User we want to set here also needs to be an admin.\n Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a manager role to\n @param _permissionDomainId The domain ID in which _user has the Administration permission\n @param _childSkillIndex The index that the `_domainId` is relative to `_permissionDomainId`",
            "id": 12754,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskManagerRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12745,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27751:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12744,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27751:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12747,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27764:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12746,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27764:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12749,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27787:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12748,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27787:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12751,
                  "name": "_childSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 12754,
                  "src": "27816:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12750,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27816:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "27750:91:22"
            },
            "returnParameters": {
              "id": 12753,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "27848:0:22"
            },
            "scope": 13039,
            "src": "27723:126:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Assigning evaluator role.\n Can only be set if there is no one currently assigned to be an evaluator.\n Manager of the task and user we want to assign role to both need to agree.\n Managers can assign themselves to this role, if there is no one currently assigned to it.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a evaluator role to",
            "id": 12761,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskEvaluatorRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12759,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12756,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12761,
                  "src": "28368:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12755,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "28368:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12758,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12761,
                  "src": "28381:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12757,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28381:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "28367:36:22"
            },
            "returnParameters": {
              "id": 12760,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "28410:0:22"
            },
            "scope": 13039,
            "src": "28338:73:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Assigning worker role.\n Can only be set if there is no one currently assigned to be a worker.\n Manager of the task and user we want to assign role to both need to agree.\n @dev This function can only be called through `executeTaskRoleAssignment`.\n @param _id Id of the task\n @param _user Address of the user we want to give a worker role to",
            "id": 12768,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskWorkerRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12766,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12763,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12768,
                  "src": "28821:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12762,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "28821:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12765,
                  "name": "_user",
                  "nodeType": "VariableDeclaration",
                  "scope": 12768,
                  "src": "28834:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 12764,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28834:15:22",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "28820:36:22"
            },
            "returnParameters": {
              "id": 12767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "28863:0:22"
            },
            "scope": 13039,
            "src": "28794:70:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Removing evaluator role.\n Agreed between manager and currently assigned evaluator.\n @param _id Id of the task",
            "id": 12773,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeTaskEvaluatorRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12771,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12770,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12773,
                  "src": "29035:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12769,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29035:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29034:13:22"
            },
            "returnParameters": {
              "id": 12772,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29054:0:22"
            },
            "scope": 13039,
            "src": "29002:53:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Removing worker role.\n Agreed between manager and currently assigned worker.\n @param _id Id of the task",
            "id": 12778,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeTaskWorkerRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12775,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12778,
                  "src": "29217:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12774,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29217:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29216:13:22"
            },
            "returnParameters": {
              "id": 12777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29236:0:22"
            },
            "scope": 13039,
            "src": "29187:50:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the skill for task `_id`.\n @dev Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct.\n Allowed before a task is finalized.\n @param _id Id of the task\n @param _skillId Id of the skill which has to be a global skill",
            "id": 12785,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskSkill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12780,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12785,
                  "src": "29574:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12779,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29574:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12782,
                  "name": "_skillId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12785,
                  "src": "29587:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12781,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29587:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29573:31:22"
            },
            "returnParameters": {
              "id": 12784,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29611:0:22"
            },
            "scope": 13039,
            "src": "29552:60:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb.\n Allowed before a task is finalized.\n @param _id Id of the task\n @param _specificationHash Unique hash of the task brief in ddb",
            "id": 12792,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskBrief",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12790,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12787,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12792,
                  "src": "29905:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29905:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12789,
                  "name": "_specificationHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12792,
                  "src": "29918:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12788,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "29918:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "29904:41:22"
            },
            "returnParameters": {
              "id": 12791,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "29952:0:22"
            },
            "scope": 13039,
            "src": "29883:70:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the due date on task `_id`. Allowed before a task is finalized.\n @param _id Id of the task\n @param _dueDate Due date as seconds since unix epoch",
            "id": 12799,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskDueDate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12797,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12794,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12799,
                  "src": "30154:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12793,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30154:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12796,
                  "name": "_dueDate",
                  "nodeType": "VariableDeclaration",
                  "scope": 12799,
                  "src": "30167:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12795,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30167:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "30153:31:22"
            },
            "returnParameters": {
              "id": 12798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "30191:0:22"
            },
            "scope": 13039,
            "src": "30130:62:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Submit the task deliverable, i.e. the output of the work performed for task `_id`.\n Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten.\n @dev Set the `task.deliverableHash` and `task.completionTimestamp` properties.\n @param _id Id of the task\n @param _deliverableHash Unique hash of the task deliverable content in ddb",
            "id": 12806,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitTaskDeliverable",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12801,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12806,
                  "src": "30639:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12800,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "30639:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12803,
                  "name": "_deliverableHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12806,
                  "src": "30652:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12802,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "30652:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "30638:39:22"
            },
            "returnParameters": {
              "id": 12805,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "30684:0:22"
            },
            "scope": 13039,
            "src": "30608:77:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Submit the task deliverable for Worker and rating for Manager.\n @dev Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.\n @param _id Id of the task\n @param _deliverableHash Unique hash of the task deliverable content in ddb\n @param _ratingSecret Rating secret for manager",
            "id": 12815,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitTaskDeliverableAndRating",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12813,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12808,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12815,
                  "src": "31063:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12807,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31063:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12810,
                  "name": "_deliverableHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12815,
                  "src": "31076:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12809,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "31076:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12812,
                  "name": "_ratingSecret",
                  "nodeType": "VariableDeclaration",
                  "scope": 12815,
                  "src": "31102:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12811,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "31102:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "31062:62:22"
            },
            "returnParameters": {
              "id": 12814,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "31131:0:22"
            },
            "scope": 13039,
            "src": "31023:109:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Called after task work rating is complete which closes the task and logs the respective reputation log updates.\n Allowed to be called once per task. Secured function to authorised members.\n @dev Set the `task.finalized` property to true\n @param _id Id of the task",
            "id": 12820,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12817,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12820,
                  "src": "31451:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12816,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31451:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "31450:13:22"
            },
            "returnParameters": {
              "id": 12819,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "31470:0:22"
            },
            "scope": 13039,
            "src": "31429:42:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Cancel a task at any point before it is finalized. Secured function to authorised members.\n Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`.\n @dev Set the `task.status` property to `1`.\n @param _id Id of the task",
            "id": 12825,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12822,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12825,
                  "src": "31794:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12821,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31794:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "31793:13:22"
            },
            "returnParameters": {
              "id": 12824,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "31813:0:22"
            },
            "scope": 13039,
            "src": "31774:40:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Mark a task as complete after the due date has passed.\n This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared.\n Note that if the due date was not set, then this function will throw.\n @param _id Id of the task",
            "id": 12830,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "completeTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12827,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12830,
                  "src": "32146:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12826,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32146:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "32145:13:22"
            },
            "returnParameters": {
              "id": 12829,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "32165:0:22"
            },
            "scope": 13039,
            "src": "32124:42:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get a task with id `_id`\n @param _id Id of the task\n @return specificationHash Task brief hash\n @return deliverableHash Task deliverable hash\n @return status TaskStatus property. 0 - Active. 1 - Cancelled. 2 - Finalized\n @return dueDate Due date\n @return fundingPotId Id of funding pot for task\n @return completionTimestamp Task completion timestamp\n @return domainId Task domain id, default is root colony domain with id 1\n @return skillIds Array of global skill ids assigned to task",
            "id": 12852,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTask",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12833,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12832,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32731:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12831,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32731:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "32730:13:22"
            },
            "returnParameters": {
              "id": 12851,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12835,
                  "name": "specificationHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32770:25:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12834,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "32770:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12837,
                  "name": "deliverableHash",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32801:23:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 12836,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "32801:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12839,
                  "name": "status",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32830:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_TaskStatus_$1994",
                    "typeString": "enum ColonyDataTypes.TaskStatus"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12838,
                    "name": "TaskStatus",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1994,
                    "src": "32830:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_TaskStatus_$1994",
                      "typeString": "enum ColonyDataTypes.TaskStatus"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12841,
                  "name": "dueDate",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32853:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12840,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32853:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12843,
                  "name": "fundingPotId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32874:20:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32874:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12845,
                  "name": "completionTimestamp",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32900:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12844,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32900:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12847,
                  "name": "domainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32933:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12846,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "32933:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12850,
                  "name": "skillIds",
                  "nodeType": "VariableDeclaration",
                  "scope": 12852,
                  "src": "32955:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12848,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "32955:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12849,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "32955:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "32764:222:22"
            },
            "scope": 13039,
            "src": "32714:273:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `Role` properties back for role `_role` in task `_id`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @return role The Role",
            "id": 12861,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskRole",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12854,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12861,
                  "src": "33212:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12853,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "33212:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12856,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12861,
                  "src": "33225:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12855,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "33225:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33211:26:22"
            },
            "returnParameters": {
              "id": 12860,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12859,
                  "name": "role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12861,
                  "src": "33259:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$2009_memory_ptr",
                    "typeString": "struct ColonyDataTypes.Role"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12858,
                    "name": "Role",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2009,
                    "src": "33259:4:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Role_$2009_storage_ptr",
                      "typeString": "struct ColonyDataTypes.Role"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33258:18:22"
            },
            "scope": 13039,
            "src": "33191:86:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100.\n @param _rewardInverse The inverse of the reward",
            "id": 12866,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRewardInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12864,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12863,
                  "name": "_rewardInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 12866,
                  "src": "33465:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12862,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "33465:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33464:24:22"
            },
            "returnParameters": {
              "id": 12865,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "33495:0:22"
            },
            "scope": 13039,
            "src": "33439:57:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100.\n @return rewardInverse The inverse of the reward",
            "id": 12871,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardInverse",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "33685:2:22"
            },
            "returnParameters": {
              "id": 12870,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12869,
                  "name": "rewardInverse",
                  "nodeType": "VariableDeclaration",
                  "scope": 12871,
                  "src": "33709:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12868,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "33709:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "33708:23:22"
            },
            "scope": 13039,
            "src": "33660:72:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get payout amount in `_token` denomination for role `_role` in task `_id`.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _token Address of the token, `0x0` value indicates Ether\n @return amount Payout amount",
            "id": 12882,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTaskPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12873,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34048:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12872,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34048:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12875,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34061:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12874,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "34061:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12877,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34074:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34074:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34047:42:22"
            },
            "returnParameters": {
              "id": 12881,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12880,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12882,
                  "src": "34111:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12879,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34111:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34110:16:22"
            },
            "scope": 13039,
            "src": "34025:102:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for manager in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12891,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskManagerPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12889,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12884,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12891,
                  "src": "34372:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34372:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12886,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12891,
                  "src": "34385:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34385:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12888,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12891,
                  "src": "34401:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12887,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34401:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34371:46:22"
            },
            "returnParameters": {
              "id": 12890,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "34424:0:22"
            },
            "scope": 13039,
            "src": "34342:83:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for evaluator in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12900,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskEvaluatorPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12893,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12900,
                  "src": "34674:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12892,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34674:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12895,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12900,
                  "src": "34687:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12894,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34687:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12897,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12900,
                  "src": "34703:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12896,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34703:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34673:46:22"
            },
            "returnParameters": {
              "id": 12899,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "34726:0:22"
            },
            "scope": 13039,
            "src": "34642:85:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for worker in task `_id` to `_amount`.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _amount Payout amount",
            "id": 12909,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTaskWorkerPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12907,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12902,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12909,
                  "src": "34970:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12901,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34970:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12904,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12909,
                  "src": "34983:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12903,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "34983:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12906,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12909,
                  "src": "34999:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12905,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "34999:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "34969:46:22"
            },
            "returnParameters": {
              "id": 12908,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "35022:0:22"
            },
            "scope": 13039,
            "src": "34941:82:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Set `_token` payout for all roles in task `_id` to the respective amounts.\n @dev Can only call if evaluator and worker are unassigned or manager, otherwise need signature.\n @param _id Id of the task\n @param _token Address of the token, `0x0` value indicates Ether\n @param _managerAmount Payout amount for manager\n @param _evaluatorAmount Payout amount for evaluator\n @param _workerAmount Payout amount for worker",
            "id": 12922,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAllTaskPayouts",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12911,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35511:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12910,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35511:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12913,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35524:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12912,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "35524:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12915,
                  "name": "_managerAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35540:22:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12914,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35540:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12917,
                  "name": "_evaluatorAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35564:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12916,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35564:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12919,
                  "name": "_workerAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 12922,
                  "src": "35590:21:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12918,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "35590:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "35510:102:22"
            },
            "returnParameters": {
              "id": 12921,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "35619:0:22"
            },
            "scope": 13039,
            "src": "35484:136:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`.\n Allowed only after task is finalized. Here the network receives its fee from each payout.\n Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off.\n @param _id Id of the task\n @param _role Id of the role, as defined in TaskRole enum\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 12931,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimTaskPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12929,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12924,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "36139:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12923,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "36139:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12926,
                  "name": "_role",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "36152:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 12925,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "36152:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12928,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12931,
                  "src": "36165:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12927,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "36165:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "36138:42:22"
            },
            "returnParameters": {
              "id": 12930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "36187:0:22"
            },
            "scope": 13039,
            "src": "36114:74:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.\n @notice Add a new payment in the colony. Can only be called by users with root permission.\n All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`.\n @param _token Address of the token used for reward payout\n @param key Some Reputation hash tree key\n @param value Reputation value\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof",
            "id": 12945,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startNextRewardPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12943,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12933,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36794:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12932,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "36794:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12935,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36810:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12934,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "36810:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12937,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36828:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12936,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "36828:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12939,
                  "name": "branchMask",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36848:18:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12938,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "36848:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12942,
                  "name": "siblings",
                  "nodeType": "VariableDeclaration",
                  "scope": 12945,
                  "src": "36868:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12940,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "36868:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12941,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "36868:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "36793:101:22"
            },
            "returnParameters": {
              "id": 12944,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "36901:0:22"
            },
            "scope": 13039,
            "src": "36763:139:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation\n which will be proven via Merkle proof inside this function.\n Can only be called if payout is active, i.e if 60 days have not passed from its creation.\n Can only be called if next in queue.\n @param _payoutId Id of the reward payout\n @param _squareRoots Square roots of values used in equation:\n `_squareRoots[0]` - square root of user reputation,\n `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking),\n `_squareRoots[2]` - square root of total reputation,\n `_squareRoots[3]` - square root of total tokens,\n `_squareRoots[4]` - square root of numerator (user reputation * user tokens),\n `_squareRoots[5]` - square root of denominator (total reputation * total tokens),\n `_squareRoots[6]` - square root of payout amount.\n @param key Some Reputation hash tree key\n @param value Reputation value\n @param branchMask The branchmask of the proof\n @param siblings The siblings of the proof",
            "id": 12963,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimRewardPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12961,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12947,
                  "name": "_payoutId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38042:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12946,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38042:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12951,
                  "name": "_squareRoots",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38065:30:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$7_memory_ptr",
                    "typeString": "uint256[7]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12948,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "38065:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12950,
                    "length": {
                      "argumentTypes": null,
                      "hexValue": "37",
                      "id": 12949,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "38073:1:22",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_7_by_1",
                        "typeString": "int_const 7"
                      },
                      "value": "7"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "38065:10:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$7_storage_ptr",
                      "typeString": "uint256[7]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12953,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38101:16:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12952,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "38101:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12955,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38123:18:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12954,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "38123:5:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12957,
                  "name": "branchMask",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38147:18:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12956,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38147:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12960,
                  "name": "siblings",
                  "nodeType": "VariableDeclaration",
                  "scope": 12963,
                  "src": "38171:25:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12958,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "38171:7:22",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 12959,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "38171:9:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "38036:166:22"
            },
            "returnParameters": {
              "id": 12962,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "38209:0:22"
            },
            "scope": 13039,
            "src": "38010:200:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get useful information about specific reward payout.\n @param _payoutId Id of the reward payout\n @return rewardPayoutCycle RewardPayoutCycle, containing propertes:\n  `reputationState` Reputation root hash at the time of creation,\n  `colonyWideReputation` Colony wide reputation in `reputationState`,\n  `totalTokens` Total colony tokens at the time of creation,\n  `amount` Total amount of tokens taken aside for reward payout,\n  `tokenAddress` Token address,\n  `blockTimestamp` Block number at the time of creation.",
            "id": 12970,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardPayoutInfo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12965,
                  "name": "_payoutId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12970,
                  "src": "38811:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38811:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "38810:19:22"
            },
            "returnParameters": {
              "id": 12969,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12968,
                  "name": "rewardPayoutCycle",
                  "nodeType": "VariableDeclaration",
                  "scope": 12970,
                  "src": "38851:42:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RewardPayoutCycle_$1916_memory_ptr",
                    "typeString": "struct ColonyDataTypes.RewardPayoutCycle"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12967,
                    "name": "RewardPayoutCycle",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1916,
                    "src": "38851:17:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RewardPayoutCycle_$1916_storage_ptr",
                      "typeString": "struct ColonyDataTypes.RewardPayoutCycle"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "38850:44:22"
            },
            "scope": 13039,
            "src": "38782:113:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`.\n Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation.\n @param _payoutId Id of the reward payout",
            "id": 12975,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalizeRewardPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12973,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12972,
                  "name": "_payoutId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12975,
                  "src": "39213:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12971,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39213:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "39212:19:22"
            },
            "returnParameters": {
              "id": 12974,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "39238:0:22"
            },
            "scope": 13039,
            "src": "39183:56:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the non-mapping properties of a pot by id.\n @param _id Id of the pot which details to get\n @return associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, Payout\n @return associatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainId\n @return payoutsWeCannotMake Number of payouts that cannot be completed with the current funding\n @dev For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).",
            "id": 12986,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPot",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12977,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39818:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12976,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39818:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "39817:13:22"
            },
            "returnParameters": {
              "id": 12985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12980,
                  "name": "associatedType",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39857:39:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_FundingPotAssociatedType_$2024",
                    "typeString": "enum ColonyDataTypes.FundingPotAssociatedType"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 12979,
                    "name": "FundingPotAssociatedType",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2024,
                    "src": "39857:24:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_FundingPotAssociatedType_$2024",
                      "typeString": "enum ColonyDataTypes.FundingPotAssociatedType"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12982,
                  "name": "associatedTypeId",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39902:24:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12981,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39902:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12984,
                  "name": "payoutsWeCannotMake",
                  "nodeType": "VariableDeclaration",
                  "scope": 12986,
                  "src": "39932:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12983,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "39932:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "39851:109:22"
            },
            "scope": 13039,
            "src": "39795:166:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the number of funding pots in the colony.\n @return count The funding pots count",
            "id": 12991,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPotCount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12987,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "40095:2:22"
            },
            "returnParameters": {
              "id": 12990,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12989,
                  "name": "count",
                  "nodeType": "VariableDeclaration",
                  "scope": 12991,
                  "src": "40119:13:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12988,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40119:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40118:15:22"
            },
            "scope": 13039,
            "src": "40068:66:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the `_token` balance of pot with id `_potId`.\n @param _potId Id of the funding pot\n @param _token Address of the token, `0x0` value indicates Ether\n @return balance Funding pot supply balance",
            "id": 13000,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPotBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12996,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12993,
                  "name": "_potId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13000,
                  "src": "40393:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12992,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40393:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12995,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13000,
                  "src": "40409:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12994,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "40409:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40392:32:22"
            },
            "returnParameters": {
              "id": 12999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12998,
                  "name": "balance",
                  "nodeType": "VariableDeclaration",
                  "scope": 13000,
                  "src": "40446:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12997,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40446:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40445:17:22"
            },
            "scope": 13039,
            "src": "40363:100:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the assigned `_token` payouts of pot with id `_potId`.\n @param _potId Id of the funding pot\n @param _token Address of the token, `0x0` value indicates Ether\n @return payout Funding pot payout amount",
            "id": 13009,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFundingPotPayout",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13005,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13002,
                  "name": "_potId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13009,
                  "src": "40728:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13001,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40728:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13004,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13009,
                  "src": "40744:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13003,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "40744:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40727:32:22"
            },
            "returnParameters": {
              "id": 13008,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13007,
                  "name": "payout",
                  "nodeType": "VariableDeclaration",
                  "scope": 13009,
                  "src": "40781:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13006,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "40781:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "40780:16:22"
            },
            "scope": 13039,
            "src": "40699:98:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`.\n @param _permissionDomainId The domainId in which I have the permission to take this action\n @param _fromChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`\n @param _toChildSkillIndex The child index in `_permissionDomainId` where we can find the domain for `_toPotId`\n @param _fromPot Funding pot id providing the funds\n @param _toPot Funding pot id receiving the funds\n @param _amount Amount of funds\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 13026,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "moveFundsBetweenPots",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13011,
                  "name": "_permissionDomainId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41514:27:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13010,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41514:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13013,
                  "name": "_fromChildSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41547:28:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13012,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41547:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13015,
                  "name": "_toChildSkillIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41581:26:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13014,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41581:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13017,
                  "name": "_fromPot",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41613:16:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13016,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41613:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13019,
                  "name": "_toPot",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41635:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13018,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41635:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13021,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41655:15:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13020,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "41655:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13023,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13026,
                  "src": "41676:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13022,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "41676:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "41508:188:22"
            },
            "returnParameters": {
              "id": 13025,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "41703:0:22"
            },
            "scope": 13039,
            "src": "41479:225:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Move any funds received by the colony in `_token` denomination to the top-level domain pot,\n siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken.\n @param _token Address of the token, `0x0` value indicates Ether",
            "id": 13031,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claimColonyFunds",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13029,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13028,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13031,
                  "src": "42021:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13027,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "42021:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "42020:16:22"
            },
            "returnParameters": {
              "id": 13030,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "42043:0:22"
            },
            "scope": 13039,
            "src": "41995:49:22",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": "@notice Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards.\n @param _token Address of the token, `0x0` value indicates Ether\n @return amount Total amount of tokens in funding pots other than the rewards pot (id 0)",
            "id": 13038,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getNonRewardPotsTotal",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13034,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13033,
                  "name": "_token",
                  "nodeType": "VariableDeclaration",
                  "scope": 13038,
                  "src": "42378:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13032,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "42378:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "42377:16:22"
            },
            "returnParameters": {
              "id": 13037,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13036,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 13038,
                  "src": "42415:14:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13035,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "42415:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "42414:16:22"
            },
            "scope": 13039,
            "src": "42347:84:22",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 13040,
        "src": "987:41446:22"
      }
    ],
    "src": "700:41734:22"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-04-01T16:16:52.752Z",
  "devdoc": {
    "methods": {
      "addDomain(uint256,uint256,uint256)": {
        "details": "Adding new domains is currently retricted to one level only, i.e. `_parentDomainId` has to be the root domain id: `1`.",
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_parentDomainId": "Id of the domain under which the new one will be added",
          "_permissionDomainId": "The domainId in which I have the permission to take this action"
        }
      },
      "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "params": {
          "_amount": "Payout amount",
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)",
          "_domainId": "The domain where the payment belongs",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_recipient": "Address of the payment recipient",
          "_skillId": "The skill associated with the payment",
          "_token": "Address of the token, `0x0` value indicates Ether"
        },
        "return": "paymentId Identifier of the newly created payment"
      },
      "authority()": {
        "return": "colonyAuthority The `ColonyAuthority` contract address"
      },
      "bootstrapColony(address[],int256[])": {
        "details": "Only allowed to be called when `taskCount` is `0` by authorized addresses.",
        "params": {
          "_amount": "Amount of reputation/tokens for every address",
          "_users": "Array of address to bootstrap with reputation"
        }
      },
      "cancelExpenditure(uint256)": {
        "params": {
          "_id": "Expenditure identifier"
        }
      },
      "cancelTask(uint256)": {
        "details": "Set the `task.status` property to `1`.",
        "params": {
          "_id": "Id of the task"
        }
      },
      "checkNotAdditionalProtectedVariable(uint256)": {
        "details": "No return value, but should throw if protected.This is public, but is only expected to be called from ContractRecovery; no need toexpose this to any users.",
        "params": {
          "_slot": "The storage slot number to check."
        }
      },
      "claimColonyFunds(address)": {
        "params": {
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "claimExpenditurePayout(uint256,uint256,address)": {
        "params": {
          "_id": "Expenditure identifier",
          "_slot": "Number of the slot",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "claimPayment(uint256,address)": {
        "params": {
          "_id": "Payment identifier",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])": {
        "params": {
          "_payoutId": "Id of the reward payout",
          "_squareRoots": "Square roots of values used in equation: `_squareRoots[0]` - square root of user reputation, `_squareRoots[1]` - square root of user tokens (deposited in TokenLocking), `_squareRoots[2]` - square root of total reputation, `_squareRoots[3]` - square root of total tokens, `_squareRoots[4]` - square root of numerator (user reputation * user tokens), `_squareRoots[5]` - square root of denominator (total reputation * total tokens), `_squareRoots[6]` - square root of payout amount.",
          "branchMask": "The branchmask of the proof",
          "key": "Some Reputation hash tree key",
          "siblings": "The siblings of the proof",
          "value": "Reputation value"
        }
      },
      "claimTaskPayout(uint256,uint8,address)": {
        "params": {
          "_id": "Id of the task",
          "_role": "Id of the role, as defined in TaskRole enum",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "completeTask(uint256)": {
        "params": {
          "_id": "Id of the task"
        }
      },
      "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": {
        "details": "The Colony functions which require approval and the task roles to review these are set in `IColony.initialiseColony` at colony creation. Upon successful execution the `taskChangeNonces` entry for the task is incremented.",
        "params": {
          "_data": "The transaction data",
          "_mode": "How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)",
          "_sigR": "r output of the ECDSA signature of the transaction",
          "_sigS": "s output of the ECDSA signature of the transaction",
          "_sigV": "recovery id",
          "_value": "The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option"
        }
      },
      "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": {
        "params": {
          "_data": "The transaction data",
          "_mode": "How the signature was generated - 0 for Geth-style (usual), 1 for Trezor-style (only Trezor does this)",
          "_sigR": "r output of the ECDSA signature of the transaction",
          "_sigS": "s output of the ECDSA signature of the transaction",
          "_sigV": "recovery id",
          "_value": "The transaction value, i.e. number of wei to be sent when the transaction is executed Currently we only accept 0 value transactions but this is kept as a future option"
        }
      },
      "finalizeExpenditure(uint256)": {
        "params": {
          "_id": "Expenditure identifier"
        }
      },
      "finalizePayment(uint256,uint256,uint256)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_id": "Payment identifier",
          "_permissionDomainId": "The domainId in which I have the permission to take this action"
        }
      },
      "finalizeRewardPayout(uint256)": {
        "params": {
          "_payoutId": "Id of the reward payout"
        }
      },
      "finalizeTask(uint256)": {
        "details": "Set the `task.finalized` property to true",
        "params": {
          "_id": "Id of the task"
        }
      },
      "finishUpgrade()": {
        "details": "Can only be called by the colony itself, and only expected to be called as part of the `upgrade()` call. Required to be public so it can be an external call."
      },
      "generateSecret(bytes32,uint256)": {
        "params": {
          "_salt": "Salt value",
          "_value": "Value to hide"
        },
        "return": "secret `keccak256` hash of joint _salt and _value"
      },
      "getColonyNetwork()": {
        "details": "The colonyNetworkAddress we read here is set once, during `initialiseColony`.",
        "return": "colonyNetwork The address of Colony Network instance"
      },
      "getDomain(uint256)": {
        "params": {
          "_id": "Id of the domain which details to get"
        },
        "return": "domain The domain"
      },
      "getDomainCount()": {
        "return": "count The domain count. Min 1 as the root domain is created at the same time as the colony"
      },
      "getExpenditure(uint256)": {
        "params": {
          "_id": "Expenditure identifier"
        },
        "return": "expenditure The expenditure"
      },
      "getExpenditureCount()": {
        "return": "count The expenditure count"
      },
      "getExpenditureSlot(uint256,uint256)": {
        "params": {
          "_id": "Expenditure identifier",
          "_slot": "Expenditure slot"
        },
        "return": "expenditureSlot The expenditure slot"
      },
      "getExpenditureSlotPayout(uint256,uint256,address)": {
        "params": {
          "_id": "Expenditure identifier",
          "_slot": "Expenditure slot",
          "_token": "Token address"
        },
        "return": "amount Amount of the payout for that slot/token."
      },
      "getFundingPot(uint256)": {
        "details": "For the reward funding pot (e.g. id: 0) this returns (0, 0, 0).",
        "params": {
          "_id": "Id of the pot which details to get"
        },
        "return": "associatedType The FundingPotAssociatedType value of the current funding pot, e.g. Domain, Task, PayoutassociatedTypeId Id of the associated type, e.g. if associatedType = FundingPotAssociatedType.Domain, this refers to the domainIdpayoutsWeCannotMake Number of payouts that cannot be completed with the current funding"
      },
      "getFundingPotBalance(uint256,address)": {
        "params": {
          "_potId": "Id of the funding pot",
          "_token": "Address of the token, `0x0` value indicates Ether"
        },
        "return": "balance Funding pot supply balance"
      },
      "getFundingPotCount()": {
        "return": "count The funding pots count"
      },
      "getFundingPotPayout(uint256,address)": {
        "params": {
          "_potId": "Id of the funding pot",
          "_token": "Address of the token, `0x0` value indicates Ether"
        },
        "return": "payout Funding pot payout amount"
      },
      "getNonRewardPotsTotal(address)": {
        "params": {
          "_token": "Address of the token, `0x0` value indicates Ether"
        },
        "return": "amount Total amount of tokens in funding pots other than the rewards pot (id 0)"
      },
      "getPayment(uint256)": {
        "params": {
          "_id": "Payment identifier"
        },
        "return": "payment The Payment data structure"
      },
      "getPaymentCount()": {
        "return": "count The payment count"
      },
      "getRewardInverse()": {
        "return": "rewardInverse The inverse of the reward"
      },
      "getRewardPayoutInfo(uint256)": {
        "params": {
          "_payoutId": "Id of the reward payout"
        },
        "return": "rewardPayoutCycle RewardPayoutCycle, containing propertes:  `reputationState` Reputation root hash at the time of creation,  `colonyWideReputation` Colony wide reputation in `reputationState`,  `totalTokens` Total colony tokens at the time of creation,  `amount` Total amount of tokens taken aside for reward payout,  `tokenAddress` Token address,  `blockTimestamp` Block number at the time of creation."
      },
      "getTask(uint256)": {
        "params": {
          "_id": "Id of the task"
        },
        "return": "specificationHash Task brief hashdeliverableHash Task deliverable hashstatus TaskStatus property. 0 - Active. 1 - Cancelled. 2 - FinalizeddueDate Due datefundingPotId Id of funding pot for taskcompletionTimestamp Task completion timestampdomainId Task domain id, default is root colony domain with id 1skillIds Array of global skill ids assigned to task"
      },
      "getTaskChangeNonce(uint256)": {
        "params": {
          "_id": "Id of the task"
        },
        "return": "nonce The current task change nonce value"
      },
      "getTaskCount()": {
        "return": "count The task count"
      },
      "getTaskPayout(uint256,uint8,address)": {
        "params": {
          "_id": "Id of the task",
          "_role": "Id of the role, as defined in TaskRole enum",
          "_token": "Address of the token, `0x0` value indicates Ether"
        },
        "return": "amount Payout amount"
      },
      "getTaskRole(uint256,uint8)": {
        "params": {
          "_id": "Id of the task",
          "_role": "Id of the role, as defined in TaskRole enum"
        },
        "return": "role The Role"
      },
      "getTaskWorkRatingSecret(uint256,uint8)": {
        "params": {
          "_id": "Id of the task",
          "_role": "Id of the role, as defined in TaskRole enum"
        },
        "return": "secret Rating secret `bytes32` value"
      },
      "getTaskWorkRatingSecretsInfo(uint256)": {
        "params": {
          "_id": "Id of the task"
        },
        "return": "nSecrets Number of secretslastSubmittedAt Timestamp of the last submitted rating secret"
      },
      "getToken()": {
        "return": "tokenAddress Address of the token contract"
      },
      "getUserRoles(address,uint256)": {
        "params": {
          "where": "The domain where we want to get roles for",
          "who": "The user whose roles we want to get"
        },
        "return": "roles bytes32 representation of the roles"
      },
      "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)": {
        "params": {
          "_childDomainId": "The domain where we want to use the role",
          "_childSkillIndex": "The index that the `_childDomainId` is relative to `_domainId`",
          "_domainId": "Domain in which the caller has the role",
          "_role": "The role we want to check for",
          "_user": "The user whose role we want to check"
        },
        "return": "hasRole Boolean indicating whether the given user has the given role in domain"
      },
      "hasUserRole(address,uint256,uint8)": {
        "params": {
          "_domainId": "The domain where we want to check for the role",
          "_role": "The role we want to check for",
          "_user": "The user whose role we want to check"
        },
        "return": "hasRole Boolean indicating whether the given user has the given role in domain"
      },
      "initialiseColony(address,address)": {
        "details": "Sets the reward inverse to the uint max 2**256 - 1.",
        "params": {
          "_colonyNetworkAddress": "Address of the colony network",
          "_token": "Address of the colony ERC20 Token"
        }
      },
      "isInRecoveryMode()": {
        "return": "inRecoveryMode Return true if recovery mode is active, false otherwise"
      },
      "makeExpenditure(uint256,uint256,uint256)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)",
          "_domainId": "The domain where the expenditure belongs",
          "_permissionDomainId": "The domainId in which I have the permission to take this action"
        },
        "return": "expenditureId Identifier of the newly created expenditure"
      },
      "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_domainId": "The domain where the task belongs",
          "_dueDate": "The due date of the task, can set to `0` for no-op",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_skillId": "The skill associated with the task, can set to `0` for no-op",
          "_specificationHash": "Database identifier where the task specification is stored"
        }
      },
      "mintTokens(uint256)": {
        "params": {
          "_wad": "Amount to mint"
        }
      },
      "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_amount": "Amount of funds",
          "_fromChildSkillIndex": "The child index in `_permissionDomainId` where we can find the domain for `_fromPotId`",
          "_fromPot": "Funding pot id providing the funds",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_toChildSkillIndex": "The child index in `_permissionDomainId` where we can find the domain for `_toPotId`",
          "_toPot": "Funding pot id receiving the funds",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "numRecoveryRoles()": {
        "return": "numRoles Number of users with the recovery role."
      },
      "owner()": {
        "details": "Used for testing.",
        "return": "colonyOwner Address of the colony owner"
      },
      "registerColonyLabel(string,string)": {
        "params": {
          "colonyName": "The label to register.",
          "orbitdb": "The path of the orbitDB database associated with the colony name"
        }
      },
      "removeRecoveryRole(address)": {
        "params": {
          "_user": "User we want to remove recovery role from"
        }
      },
      "removeTaskEvaluatorRole(uint256)": {
        "params": {
          "_id": "Id of the task"
        }
      },
      "removeTaskWorkerRole(uint256)": {
        "params": {
          "_id": "Id of the task"
        }
      },
      "revealTaskWorkRating(uint256,uint8,uint8,bytes32)": {
        "details": "Compares the `keccak256(_salt, _rating)` output with the previously submitted rating secret and if they match, sets the task role properties `rated` to `true` and `rating` to `_rating`.",
        "params": {
          "_id": "Id of the task",
          "_rating": "0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50)",
          "_role": "Id of the role, as defined in TaskRole enum",
          "_salt": "Salt value used to generate the rating secret"
        }
      },
      "setAdministrationRole(uint256,uint256,address,uint256,bool)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_domainId": "Domain in which we are giving user the role",
          "_permissionDomainId": "Domain in which the caller has root/architecture role",
          "_setTo": "The state of the role permission (true assign the permission, false revokes it)",
          "_user": "User we want to give an admin role to"
        }
      },
      "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)": {
        "details": "Can only call if evaluator and worker are unassigned or manager, otherwise need signature.",
        "params": {
          "_evaluatorAmount": "Payout amount for evaluator",
          "_id": "Id of the task",
          "_managerAmount": "Payout amount for manager",
          "_token": "Address of the token, `0x0` value indicates Ether",
          "_workerAmount": "Payout amount for worker"
        }
      },
      "setArbitrationRole(uint256,uint256,address,uint256,bool)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_domainId": "Domain in which we are giving user the role",
          "_permissionDomainId": "Domain in which the caller has root role",
          "_setTo": "The state of the role permission (true assign the permission, false revokes it)",
          "_user": "User we want to give an arbitration role to"
        }
      },
      "setArchitectureRole(uint256,uint256,address,uint256,bool)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_domainId": "Domain in which we are giving user the role",
          "_permissionDomainId": "Domain in which the caller has root/architecture role",
          "_setTo": "The state of the role permission (true assign the permission, false revokes it)",
          "_user": "User we want to give an architecture role to"
        }
      },
      "setExpenditureClaimDelay(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)",
          "_claimDelay": "Time (in seconds) to delay claiming payout after finalization",
          "_id": "Expenditure identifier",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_slot": "Number of the slot"
        }
      },
      "setExpenditurePayout(uint256,uint256,address,uint256)": {
        "params": {
          "_amount": "Payout amount",
          "_id": "Id of the expenditure",
          "_slot": "Number of the slot",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "setExpenditurePayoutModifier(uint256,uint256,uint256,uint256,int256)": {
        "details": "Note that when determining payouts the payoutModifier is incremented by WAD and converted into payoutScalar",
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)",
          "_id": "Expenditure identifier",
          "_payoutModifier": "Modifier to their payout (between -1 and 1, denominated in WADs, 0 means no modification)",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_slot": "Number of the slot"
        }
      },
      "setExpenditureRecipient(uint256,uint256,address)": {
        "params": {
          "_id": "Id of the expenditure",
          "_recipient": "Address of the recipient",
          "_slot": "Slot for the recipient address"
        }
      },
      "setExpenditureSkill(uint256,uint256,uint256)": {
        "params": {
          "_id": "Expenditure identifier",
          "_skillId": "Id of the new skill to set",
          "_slot": "Number of the slot"
        }
      },
      "setFundingRole(uint256,uint256,address,uint256,bool)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_domainId": "Domain in which we are giving user the role",
          "_permissionDomainId": "Domain in which the caller has root/architecture role",
          "_setTo": "The state of the role permission (true assign the permission, false revokes it)",
          "_user": "User we want to give an funding role to"
        }
      },
      "setPaymentPayout(uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amount": "Payout amount",
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_id": "Payment identifier",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "setPaymentRecipient(uint256,uint256,uint256,address)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_id": "Payment identifier",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_recipient": "Address of the payment recipient"
        }
      },
      "setPaymentSkill(uint256,uint256,uint256,uint256)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_id": "Payment identifier",
          "_permissionDomainId": "The domainId in which I have the permission to take this action",
          "_skillId": "Id of the new skill to set"
        }
      },
      "setRecoveryRole(address)": {
        "params": {
          "_user": "User we want to give a recovery role to"
        }
      },
      "setRewardInverse(uint256)": {
        "params": {
          "_rewardInverse": "The inverse of the reward"
        }
      },
      "setRootRole(address,bool)": {
        "params": {
          "_setTo": "The state of the role permission (true assign the permission, false revokes it)",
          "_user": "User we want to give an root role to"
        }
      },
      "setStorageSlotRecovery(uint256,bytes32)": {
        "details": "certain critical variables are protected from editing in this function",
        "params": {
          "_slot": "Uint address of storage slot to be updated",
          "_value": "word of data to be set"
        }
      },
      "setTaskBrief(uint256,bytes32)": {
        "params": {
          "_id": "Id of the task",
          "_specificationHash": "Unique hash of the task brief in ddb"
        }
      },
      "setTaskDueDate(uint256,uint256)": {
        "params": {
          "_dueDate": "Due date as seconds since unix epoch",
          "_id": "Id of the task"
        }
      },
      "setTaskEvaluatorPayout(uint256,address,uint256)": {
        "params": {
          "_amount": "Payout amount",
          "_id": "Id of the task",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "setTaskEvaluatorRole(uint256,address)": {
        "details": "This function can only be called through `executeTaskRoleAssignment`.",
        "params": {
          "_id": "Id of the task",
          "_user": "Address of the user we want to give a evaluator role to"
        }
      },
      "setTaskManagerPayout(uint256,address,uint256)": {
        "params": {
          "_amount": "Payout amount",
          "_id": "Id of the task",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "setTaskManagerRole(uint256,address,uint256,uint256)": {
        "details": "This function can only be called through `executeTaskRoleAssignment`.",
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`",
          "_id": "Id of the task",
          "_permissionDomainId": "The domain ID in which _user has the Administration permission",
          "_user": "Address of the user we want to give a manager role to"
        }
      },
      "setTaskSkill(uint256,uint256)": {
        "details": "Currently we only allow one skill per task although we have provisioned for an array of skills in `Task` struct. Allowed before a task is finalized.",
        "params": {
          "_id": "Id of the task",
          "_skillId": "Id of the skill which has to be a global skill"
        }
      },
      "setTaskWorkerPayout(uint256,address,uint256)": {
        "params": {
          "_amount": "Payout amount",
          "_id": "Id of the task",
          "_token": "Address of the token, `0x0` value indicates Ether"
        }
      },
      "setTaskWorkerRole(uint256,address)": {
        "details": "This function can only be called through `executeTaskRoleAssignment`.",
        "params": {
          "_id": "Id of the task",
          "_user": "Address of the user we want to give a worker role to"
        }
      },
      "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])": {
        "params": {
          "_token": "Address of the token used for reward payout",
          "branchMask": "The branchmask of the proof",
          "key": "Some Reputation hash tree key",
          "siblings": "The siblings of the proof",
          "value": "Reputation value"
        }
      },
      "submitTaskDeliverable(uint256,bytes32)": {
        "details": "Set the `task.deliverableHash` and `task.completionTimestamp` properties.",
        "params": {
          "_deliverableHash": "Unique hash of the task deliverable content in ddb",
          "_id": "Id of the task"
        }
      },
      "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)": {
        "details": "Internally call `submitTaskDeliverable` and `submitTaskWorkRating` in sequence.",
        "params": {
          "_deliverableHash": "Unique hash of the task deliverable content in ddb",
          "_id": "Id of the task",
          "_ratingSecret": "Rating secret for manager"
        }
      },
      "submitTaskWorkRating(uint256,uint8,bytes32)": {
        "params": {
          "_id": "Id of the task",
          "_ratingSecret": "`keccak256` hash of a salt and 0-50 rating score (in increments of 10, .e.g 0, 10, 20, 30, 40 or 50). Can be generated via `IColony.generateSecret` helper function.",
          "_role": "Id of the role, as defined in TaskRole enum"
        }
      },
      "transferExpenditure(uint256,address)": {
        "params": {
          "_id": "Expenditure identifier",
          "_newOwner": "New owner of expenditure"
        }
      },
      "transferExpenditureViaArbitration(uint256,uint256,uint256,address)": {
        "params": {
          "_childSkillIndex": "The index that the `_domainId` is relative to `_permissionDomainId`, (only used if `_permissionDomainId` is different to `_domainId`)",
          "_id": "Expenditure identifier",
          "_newOwner": "New owner of expenditure",
          "_permissionDomainId": "The domainId in which I have the permission to take this action"
        }
      },
      "updateColonyOrbitDB(string)": {
        "params": {
          "orbitdb": "The path of the orbitDB database to be associated with the colony"
        }
      },
      "upgrade(uint256)": {
        "details": "Downgrades are not allowed, i.e. `_newVersion` should be higher than the currect colony version.",
        "params": {
          "_newVersion": "The target version for the upgrade"
        }
      },
      "verifyReputationProof(bytes,bytes,uint256,bytes32[])": {
        "details": "For more detail about branchMask and siblings, examine the PatriciaTree implementation. While public, likely only to be used by the Colony contracts, as it checks that the user is proving their own reputation in the current colony. The `verifyProof` function can be used to verify any proof, though this function is not currently exposed on the Colony's EtherRouter.",
        "params": {
          "branchMask": "The branchmask of the proof",
          "key": "The key of the element the proof is for.",
          "siblings": "The siblings of the proof",
          "value": "The value of the element that the proof is for."
        },
        "return": "isValid True if the proof is valid, false otherwise."
      },
      "version()": {
        "return": "colonyVersion Version number"
      }
    },
    "title": "Colony interface"
  },
  "userdoc": {
    "methods": {
      "addDomain(uint256,uint256,uint256)": {
        "notice": "Add a colony domain, and its respective local skill under skill with id `_parentSkillId`. New funding pot is created and associated with the domain here."
      },
      "addPayment(uint256,uint256,address,address,uint256,uint256,uint256)": {
        "notice": "Add a new payment in the colony. Secured function to authorised members."
      },
      "approveExitRecovery()": {
        "notice": "Indicate approval to exit recovery mode. Can only be called by user with recovery role."
      },
      "authority()": {
        "notice": "Get the `ColonyAuthority` for the colony."
      },
      "bootstrapColony(address[],int256[])": {
        "notice": "Allows the colony to bootstrap itself by having initial reputation and token `_amount` assigned to `_users`. This reputation is assigned in the colony-wide domain. Secured function to authorised members."
      },
      "cancelExpenditure(uint256)": {
        "notice": "Cancels the expenditure and prevents further editing. Can only be called by expenditure owner."
      },
      "cancelTask(uint256)": {
        "notice": "Cancel a task at any point before it is finalized. Secured function to authorised members. Any funds assigned to its funding pot can be moved back to the domain via `IColony.moveFundsBetweenPots`."
      },
      "checkNotAdditionalProtectedVariable(uint256)": {
        "notice": "Check whether the supplied slot is a protected variable specific to this contract"
      },
      "claimColonyFunds(address)": {
        "notice": "Move any funds received by the colony in `_token` denomination to the top-level domain pot, siphoning off a small amount to the reward pot. If called against a colony's own token, no fee is taken."
      },
      "claimExpenditurePayout(uint256,uint256,address)": {
        "notice": "Claim the payout for an expenditure slot. Here the network receives a fee from each payout."
      },
      "claimPayment(uint256,address)": {
        "notice": "Claim the payout in `_token` denomination for payment `_id`. Here the network receives its fee from each payout. Same as for tasks, ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off."
      },
      "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])": {
        "notice": "Claim the reward payout at `_payoutId`. User needs to provide their reputation and colony-wide reputation which will be proven via Merkle proof inside this function. Can only be called if payout is active, i.e if 60 days have not passed from its creation. Can only be called if next in queue."
      },
      "claimTaskPayout(uint256,uint8,address)": {
        "notice": "Claim the payout in `_token` denomination for work completed in task `_id` by contributor with role `_role`. Allowed only after task is finalized. Here the network receives its fee from each payout. Ether fees go straight to the Meta Colony whereas Token fees go to the Network to be auctioned off."
      },
      "completeTask(uint256)": {
        "notice": "Mark a task as complete after the due date has passed. This allows the task to be rated and finalized (and funds recovered) even in the presence of a worker who has disappeared. Note that if the due date was not set, then this function will throw."
      },
      "enterRecoveryMode()": {
        "notice": "Put colony network mining into recovery mode. Can only be called by user with recovery role."
      },
      "executeTaskChange(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": {
        "notice": "Executes a task update transaction `_data` which is approved and signed by two of its roles (e.g. manager and worker) using the detached signatures for these users."
      },
      "executeTaskRoleAssignment(uint8[],bytes32[],bytes32[],uint8[],uint256,bytes)": {
        "notice": "Executes a task role update transaction `_data` which is approved and signed by two of addresses. depending of which function we are calling. Allowed functions are `setTaskManagerRole`, `setTaskEvaluatorRole` and `setTaskWorkerRole`. Upon successful execution the `taskChangeNonces` entry for the task is incremented."
      },
      "exitRecoveryMode()": {
        "notice": "Exit recovery mode, can be called by anyone if enough whitelist approvals are given."
      },
      "finalizeExpenditure(uint256)": {
        "notice": "Finalizes the expenditure and prevents further editing. Can only be called by expenditure owner."
      },
      "finalizePayment(uint256,uint256,uint256)": {
        "notice": "Finalizes the payment and logs the reputation log updates. Allowed to be called once after payment is fully funded. Secured function to authorised members."
      },
      "finalizeRewardPayout(uint256)": {
        "notice": "Finalises the reward payout. Allows creation of next reward payouts for token that has been used in `_payoutId`. Can only be called when reward payout cycle is finished i.e when 60 days have passed from its creation."
      },
      "finalizeTask(uint256)": {
        "notice": "Called after task work rating is complete which closes the task and logs the respective reputation log updates. Allowed to be called once per task. Secured function to authorised members."
      },
      "finishUpgrade()": {
        "notice": "A function to be called after an upgrade has been done from v2 to v3."
      },
      "generateSecret(bytes32,uint256)": {
        "notice": "Helper function used to generage consistently the rating secret using salt value `_salt` and value to hide `_value`"
      },
      "getColonyNetwork()": {
        "notice": "Returns the colony network address set on the Colony."
      },
      "getDomain(uint256)": {
        "notice": "Get a domain by id."
      },
      "getDomainCount()": {
        "notice": "Get the number of domains in the colony."
      },
      "getExpenditure(uint256)": {
        "notice": "Returns an existing expenditure."
      },
      "getExpenditureCount()": {
        "notice": "Get the number of expenditures in the colony."
      },
      "getExpenditureSlot(uint256,uint256)": {
        "notice": "Returns an existing expenditure slot."
      },
      "getExpenditureSlotPayout(uint256,uint256,address)": {
        "notice": "Returns an existing expenditure slot's payout for a token."
      },
      "getFundingPot(uint256)": {
        "notice": "Get the non-mapping properties of a pot by id."
      },
      "getFundingPotBalance(uint256,address)": {
        "notice": "Get the `_token` balance of pot with id `_potId`."
      },
      "getFundingPotCount()": {
        "notice": "Get the number of funding pots in the colony."
      },
      "getFundingPotPayout(uint256,address)": {
        "notice": "Get the assigned `_token` payouts of pot with id `_potId`."
      },
      "getNonRewardPotsTotal(address)": {
        "notice": "Get the total amount of tokens `_token` minus amount reserved to be paid to the reputation and token holders as rewards."
      },
      "getPayment(uint256)": {
        "notice": "Returns an exiting payment."
      },
      "getPaymentCount()": {
        "notice": "Get the number of payments in the colony."
      },
      "getRewardInverse()": {
        "notice": "Return 1 / the reward to pay out from revenue. e.g. if the fee is 1% (or 0.01), return 100."
      },
      "getRewardPayoutInfo(uint256)": {
        "notice": "Get useful information about specific reward payout."
      },
      "getTask(uint256)": {
        "notice": "Get a task with id `_id`"
      },
      "getTaskChangeNonce(uint256)": {
        "notice": "Starts from 0 and is incremented on every co-reviewed task change via `executeTaskChange` call."
      },
      "getTaskCount()": {
        "notice": "Get the number of tasks in the colony."
      },
      "getTaskPayout(uint256,uint8,address)": {
        "notice": "Get payout amount in `_token` denomination for role `_role` in task `_id`."
      },
      "getTaskRole(uint256,uint8)": {
        "notice": "Get the `Role` properties back for role `_role` in task `_id`."
      },
      "getTaskWorkRatingSecret(uint256,uint8)": {
        "notice": "Get the rating secret submitted for role `_role` in task `_id`"
      },
      "getTaskWorkRatingSecretsInfo(uint256)": {
        "notice": "Get the `ColonyStorage.RatingSecrets` information for task `_id`."
      },
      "getToken()": {
        "notice": "Get the colony token."
      },
      "getUserRoles(address,uint256)": {
        "notice": "Gets the bytes32 representation of the roles for a user in a given domain"
      },
      "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)": {
        "notice": "Check whether a given user has a given role for the colony, in a child domain. Calls the function of the same name on the colony's authority contract and an internal inheritence validator function"
      },
      "hasUserRole(address,uint256,uint8)": {
        "notice": "Check whether a given user has a given role for the colony. Calls the function of the same name on the colony's authority contract."
      },
      "initialiseColony(address,address)": {
        "notice": "Called once when the colony is created to initialise certain storage slot values."
      },
      "isInRecoveryMode()": {
        "notice": "Is colony network in recovery mode."
      },
      "makeExpenditure(uint256,uint256,uint256)": {
        "notice": "Add a new expenditure in the colony. Secured function to authorised members."
      },
      "makeTask(uint256,uint256,bytes32,uint256,uint256,uint256)": {
        "notice": "Make a new task in the colony. Secured function to authorised members."
      },
      "mintTokens(uint256)": {
        "notice": "Mint `_wad` amount of colony tokens. Secured function to authorised members."
      },
      "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "Move a given amount: `_amount` of `_token` funds from funding pot with id `_fromPot` to one with id `_toPot`."
      },
      "numRecoveryRoles()": {
        "notice": "Return number of recovery roles."
      },
      "owner()": {
        "notice": "Get the colony `owner` address. This should be address(0x0) at all times."
      },
      "registerColonyLabel(string,string)": {
        "notice": "Register colony's ENS label."
      },
      "removeRecoveryRole(address)": {
        "notice": "Remove colony recovery role. Can only be called by root role."
      },
      "removeTaskEvaluatorRole(uint256)": {
        "notice": "Removing evaluator role. Agreed between manager and currently assigned evaluator."
      },
      "removeTaskWorkerRole(uint256)": {
        "notice": "Removing worker role. Agreed between manager and currently assigned worker."
      },
      "revealTaskWorkRating(uint256,uint8,uint8,bytes32)": {
        "notice": "Reveal the secret rating submitted in `IColony.submitTaskWorkRating` for task `_id` and task role with id `_role`. Allowed within 5 days period starting which whichever is first from either both rating secrets being submitted (via `IColony.submitTaskWorkRating`) or the 5 day rating period expiring."
      },
      "setAdministrationRole(uint256,uint256,address,uint256,bool)": {
        "notice": "Set new colony admin role. Can be called by root role or architecture role."
      },
      "setAllTaskPayouts(uint256,address,uint256,uint256,uint256)": {
        "notice": "Set `_token` payout for all roles in task `_id` to the respective amounts."
      },
      "setArbitrationRole(uint256,uint256,address,uint256,bool)": {
        "notice": "Set new colony arbitration role. Can be called by root role or architecture role."
      },
      "setArchitectureRole(uint256,uint256,address,uint256,bool)": {
        "notice": "Set new colony architecture role. Can be called by root role or architecture role."
      },
      "setExpenditureClaimDelay(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Set the claim delay on an expenditure slot. Can only be called by Arbitration role."
      },
      "setExpenditurePayout(uint256,uint256,address,uint256)": {
        "notice": "Set the token payout on an expenditure slot. Can only be called by expenditure owner."
      },
      "setExpenditurePayoutModifier(uint256,uint256,uint256,uint256,int256)": {
        "notice": "Set the payout modifier on an expenditure slot. Can only be called by Arbitration role."
      },
      "setExpenditureRecipient(uint256,uint256,address)": {
        "notice": "Sets the recipient on an expenditure slot. Can only be called by expenditure owner."
      },
      "setExpenditureSkill(uint256,uint256,uint256)": {
        "notice": "Sets the skill on an expenditure slot. Can only be called by expenditure owner."
      },
      "setFundingRole(uint256,uint256,address,uint256,bool)": {
        "notice": "Set new colony funding role. Can be called by root role or architecture role."
      },
      "setPaymentPayout(uint256,uint256,uint256,address,uint256)": {
        "notice": "Sets the payout for a given token on an existing payment. Secured function to authorised members."
      },
      "setPaymentRecipient(uint256,uint256,uint256,address)": {
        "notice": "Sets the recipient on an existing payment. Secured function to authorised members."
      },
      "setPaymentSkill(uint256,uint256,uint256,uint256)": {
        "notice": "Sets the skill on an existing payment. Secured function to authorised members."
      },
      "setRecoveryRole(address)": {
        "notice": "Set new colony recovery role. Can be called by root."
      },
      "setRewardInverse(uint256)": {
        "notice": "Set the reward inverse to pay out from revenue. e.g. if the fee is 1% (or 0.01), set 100."
      },
      "setRootRole(address,bool)": {
        "notice": "Set new colony root role. Can be called by root role only."
      },
      "setStorageSlotRecovery(uint256,bytes32)": {
        "notice": "Update value of arbitrary storage variable. Can only be called by user with recovery role."
      },
      "setTaskBrief(uint256,bytes32)": {
        "notice": "Set the hash for the task brief, aka task work specification, which identifies the task brief content in ddb. Allowed before a task is finalized."
      },
      "setTaskDueDate(uint256,uint256)": {
        "notice": "Set the due date on task `_id`. Allowed before a task is finalized."
      },
      "setTaskEvaluatorPayout(uint256,address,uint256)": {
        "notice": "Set `_token` payout for evaluator in task `_id` to `_amount`."
      },
      "setTaskEvaluatorRole(uint256,address)": {
        "notice": "Assigning evaluator role. Can only be set if there is no one currently assigned to be an evaluator. Manager of the task and user we want to assign role to both need to agree. Managers can assign themselves to this role, if there is no one currently assigned to it."
      },
      "setTaskManagerPayout(uint256,address,uint256)": {
        "notice": "Set `_token` payout for manager in task `_id` to `_amount`."
      },
      "setTaskManagerRole(uint256,address,uint256,uint256)": {
        "notice": "Assigning manager role. Current manager and user we want to assign role to both need to agree. User we want to set here also needs to be an admin. Note that the domain proof data comes at the end here to not interfere with the assembly argument unpacking."
      },
      "setTaskSkill(uint256,uint256)": {
        "notice": "Set the skill for task `_id`."
      },
      "setTaskWorkerPayout(uint256,address,uint256)": {
        "notice": "Set `_token` payout for worker in task `_id` to `_amount`."
      },
      "setTaskWorkerRole(uint256,address)": {
        "notice": "Assigning worker role. Can only be set if there is no one currently assigned to be a worker. Manager of the task and user we want to assign role to both need to agree."
      },
      "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])": {
        "notice": "Start next reward payout for `_token`. All funds in the reward pot for `_token` will become unavailable.Add a new payment in the colony. Can only be called by users with root permission. All tokens will be locked, and can be unlocked by calling `waiveRewardPayout` or `claimRewardPayout`."
      },
      "submitTaskDeliverable(uint256,bytes32)": {
        "notice": "Submit the task deliverable, i.e. the output of the work performed for task `_id`. Submission is allowed only to the assigned worker before the task due date. Submissions cannot be overwritten."
      },
      "submitTaskDeliverableAndRating(uint256,bytes32,bytes32)": {
        "notice": "Submit the task deliverable for Worker and rating for Manager."
      },
      "submitTaskWorkRating(uint256,uint8,bytes32)": {
        "notice": "Submit a hashed secret of the rating for work in task `_id` which was performed by user with task role id `_role`. Allowed within 5 days period starting which whichever is first from either the deliverable being submitted or the dueDate been reached. Allowed only for evaluator to rate worker and for worker to rate manager performance. Once submitted ratings can not be changed or overwritten."
      },
      "transferExpenditure(uint256,address)": {
        "notice": "Updates the expenditure owner. Can only be called by expenditure owner."
      },
      "transferExpenditureViaArbitration(uint256,uint256,uint256,address)": {
        "notice": "Updates the expenditure owner. Can only be called by Arbitration role."
      },
      "updateColonyOrbitDB(string)": {
        "notice": "Update a colony's orbitdb address. Can only be called by a colony with a registered subdomain"
      },
      "upgrade(uint256)": {
        "notice": "Upgrades a colony to a new Colony contract version `_newVersion`."
      },
      "verifyReputationProof(bytes,bytes,uint256,bytes32[])": {
        "notice": "Helper function that can be used by a client to verify the correctness of a patricia proof they have been supplied with."
      },
      "version()": {
        "notice": "Get the Colony contract version. Starts from 1 and is incremented with every deployed contract change."
      }
    },
    "notice": "All publicly available functions are available here and registered to work with EtherRouter Network contract"
  }
}